{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n  }\n  connect(token) {\n    if (!this.socket) {\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\n        auth: {\n          token\n        }\n      });\n      this.socket.on('connect', () => {\n        console.log('Socket connected');\n      });\n      this.socket.on('disconnect', () => {\n        console.log('Socket disconnected');\n      });\n      this.socket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n      });\n    }\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  emit(event, data) {\n    if (this.socket) {\n      this.socket.emit(event, data);\n    }\n  }\n  on(event, callback) {\n    if (this.socket) {\n      this.socket.on(event, callback);\n    }\n  }\n  off(event) {\n    if (this.socket) {\n      this.socket.off(event);\n    }\n  }\n  listenToNewMessages(callback) {\n    this.on('new_message', callback);\n  }\n  listenToUserStatus(onOnline, onOffline) {\n    this.on('user_online', onOnline);\n    this.on('user_offline', onOffline);\n  }\n  sendMessage(receiverId, content) {\n    this.emit('send_message', {\n      receiverId,\n      content\n    });\n  }\n  getSocket() {\n    return this.socket;\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","connect","token","process","env","REACT_APP_API_URL","auth","on","console","log","error","disconnect","emit","event","data","callback","off","listenToNewMessages","listenToUserStatus","onOnline","onOffline","sendMessage","receiverId","content","getSocket","socketService"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nimport { Message } from '../types';\r\n\r\nclass SocketService {\r\n  private socket: Socket | null = null;\r\n\r\n  connect(token: string) {\r\n    if (!this.socket) {\r\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\r\n        auth: { token }\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Socket connected');\r\n      });\r\n\r\n      this.socket.on('disconnect', () => {\r\n        console.log('Socket disconnected');\r\n      });\r\n\r\n      this.socket.on('connect_error', (error: Error) => {\r\n        console.error('Socket connection error:', error);\r\n      });\r\n    }\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  emit(event: string, data: any) {\r\n    if (this.socket) {\r\n      this.socket.emit(event, data);\r\n    }\r\n  }\r\n\r\n  on(event: string, callback: Function) {\r\n    if (this.socket) {\r\n      this.socket.on(event, callback);\r\n    }\r\n  }\r\n\r\n  off(event: string) {\r\n    if (this.socket) {\r\n      this.socket.off(event);\r\n    }\r\n  }\r\n\r\n  listenToNewMessages(callback: (message: Message) => void) {\r\n    this.on('new_message', callback);\r\n  }\r\n\r\n  listenToUserStatus(onOnline: (userId: string) => void, onOffline: (userId: string) => void) {\r\n    this.on('user_online', onOnline);\r\n    this.on('user_offline', onOffline);\r\n  }\r\n\r\n  sendMessage(receiverId: string, content: string) {\r\n    this.emit('send_message', { receiverId, content });\r\n  }\r\n\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n}\r\n\r\nexport const socketService = new SocketService();\r\nexport default socketService;"],"mappings":"AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAG7C,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KACVC,MAAM,GAAkB,IAAI;EAAA;EAEpCC,OAAOA,CAACC,KAAa,EAAE;IACrB,IAAI,CAAC,IAAI,CAACF,MAAM,EAAE;MAChB,IAAI,CAACA,MAAM,GAAGH,EAAE,CAACM,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,EAAE;QACzEC,IAAI,EAAE;UAAEJ;QAAM;MAChB,CAAC,CAAC;MAEF,IAAI,CAACF,MAAM,CAACO,EAAE,CAAC,SAAS,EAAE,MAAM;QAC9BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MACjC,CAAC,CAAC;MAEF,IAAI,CAACT,MAAM,CAACO,EAAE,CAAC,YAAY,EAAE,MAAM;QACjCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MACpC,CAAC,CAAC;MAEF,IAAI,CAACT,MAAM,CAACO,EAAE,CAAC,eAAe,EAAGG,KAAY,IAAK;QAChDF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,CAAC,CAAC;IACJ;IACA,OAAO,IAAI,CAACV,MAAM;EACpB;EAEAW,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACX,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACW,UAAU,CAAC,CAAC;MACxB,IAAI,CAACX,MAAM,GAAG,IAAI;IACpB;EACF;EAEAY,IAAIA,CAACC,KAAa,EAAEC,IAAS,EAAE;IAC7B,IAAI,IAAI,CAACd,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACY,IAAI,CAACC,KAAK,EAAEC,IAAI,CAAC;IAC/B;EACF;EAEAP,EAAEA,CAACM,KAAa,EAAEE,QAAkB,EAAE;IACpC,IAAI,IAAI,CAACf,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACO,EAAE,CAACM,KAAK,EAAEE,QAAQ,CAAC;IACjC;EACF;EAEAC,GAAGA,CAACH,KAAa,EAAE;IACjB,IAAI,IAAI,CAACb,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACgB,GAAG,CAACH,KAAK,CAAC;IACxB;EACF;EAEAI,mBAAmBA,CAACF,QAAoC,EAAE;IACxD,IAAI,CAACR,EAAE,CAAC,aAAa,EAAEQ,QAAQ,CAAC;EAClC;EAEAG,kBAAkBA,CAACC,QAAkC,EAAEC,SAAmC,EAAE;IAC1F,IAAI,CAACb,EAAE,CAAC,aAAa,EAAEY,QAAQ,CAAC;IAChC,IAAI,CAACZ,EAAE,CAAC,cAAc,EAAEa,SAAS,CAAC;EACpC;EAEAC,WAAWA,CAACC,UAAkB,EAAEC,OAAe,EAAE;IAC/C,IAAI,CAACX,IAAI,CAAC,cAAc,EAAE;MAAEU,UAAU;MAAEC;IAAQ,CAAC,CAAC;EACpD;EAEAC,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACxB,MAAM;EACpB;AACF;AAEA,OAAO,MAAMyB,aAAa,GAAG,IAAI3B,aAAa,CAAC,CAAC;AAChD,eAAe2B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}