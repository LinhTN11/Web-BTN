{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\Components\\\\Chat\\\\MessengerChatPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Card, Typography, Input, Button, List, Avatar, Space, Divider, Badge, Row, Col, Tooltip } from 'antd';\nimport { SendOutlined, UserOutlined, MessageOutlined } from '@ant-design/icons';\nimport { useAuth } from '../../contexts/AuthContext';\nimport socketService from '../../services/socketService';\nimport { chatService } from '../../services/chatService';\nimport './MessengerChatPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst {\n  TextArea\n} = Input;\nconst MessengerChatPage = () => {\n  _s();\n  const {\n    user,\n    token\n  } = useAuth();\n  const [message, setMessage] = useState('');\n  const [messagesByConversation, setMessagesByConversation] = useState({});\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [typing, setTyping] = useState({});\n  const typingTimeoutRef = useRef({});\n  const messagesEndRef = useRef(null);\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const loadMessages = useCallback(async userId => {\n    try {\n      console.log('🔄 Loading messages for user:', userId);\n      const messages = await chatService.getMessages(userId);\n      console.log('📨 Received messages from API:', {\n        userId,\n        count: messages.length,\n        messages: messages.map(m => ({\n          id: m._id,\n          content: m.content.substring(0, 50) + (m.content.length > 50 ? '...' : ''),\n          timestamp: m.timestamp,\n          sender: typeof m.sender === 'string' ? m.sender : m.sender._id,\n          receiver: typeof m.receiver === 'string' ? m.receiver : m.receiver._id\n        }))\n      });\n\n      // Sort messages by timestamp\n      const sortedMessages = messages.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n      setMessagesByConversation(prev => ({\n        ...prev,\n        [userId]: sortedMessages\n      }));\n      console.log('✅ Messages loaded and set in state for user:', userId);\n      scrollToBottom();\n\n      // Mark messages as read\n      chatService.markAsRead(userId).catch(error => console.error('Error marking messages as read:', error));\n    } catch (error) {\n      console.error('❌ Error loading messages:', error);\n    }\n  }, []);\n  const loadActiveUsers = useCallback(async () => {\n    try {\n      const users = await chatService.getActiveUsers();\n      // Filter out current user\n      const filteredUsers = users.filter(u => u._id !== (user === null || user === void 0 ? void 0 : user._id));\n      setActiveUsers(filteredUsers);\n\n      // Auto-select first user if no user is selected and there are users available\n      if (!selectedUser && filteredUsers.length > 0) {\n        setSelectedUser(filteredUsers[0]);\n      }\n    } catch (error) {\n      console.error('Error loading active users:', error);\n    }\n  }, [user === null || user === void 0 ? void 0 : user._id]); // Remove selectedUser dependency to prevent circular updates\n  // Use ref to track connection state to prevent infinite loops\n  const connectionRef = useRef(false);\n  const initialLoadRef = useRef(false);\n\n  // Socket connection effect - only depends on token\n  useEffect(() => {\n    if (token) {\n      // Check if already connected to avoid duplicate connections\n      if (socketService.isConnected() && connectionRef.current) {\n        console.log('🔗 Socket already connected, updating state');\n        setSocketConnected(true);\n        return;\n      }\n      console.log('🔌 Connecting socket with token');\n      const socket = socketService.connect(`Bearer ${token}`);\n      if (socket) {\n        socket.on('connect', () => {\n          console.log('✅ Socket connected successfully');\n          setSocketConnected(true);\n          connectionRef.current = true;\n\n          // Load initial data only once after connection\n          if (!initialLoadRef.current) {\n            initialLoadRef.current = true;\n            loadActiveUsers();\n          }\n        });\n        socket.on('reconnect', () => {\n          console.log('🔄 Socket reconnected successfully');\n          setSocketConnected(true);\n          connectionRef.current = true;\n        });\n        socket.on('connect_error', error => {\n          console.error('❌ Socket connection error:', error);\n          setSocketConnected(false);\n          connectionRef.current = false;\n        });\n        socket.on('disconnect', reason => {\n          console.log('🔌 Socket disconnected:', reason);\n          setSocketConnected(false);\n          connectionRef.current = false;\n\n          // Auto-reconnect for certain disconnect reasons\n          if (reason === 'transport close' || reason === 'transport error') {\n            console.log('🔄 Auto-reconnecting due to transport issue...');\n            setTimeout(() => {\n              if (token && !socketService.isConnected()) {\n                socketService.connect(`Bearer ${token}`);\n              }\n            }, 1000);\n          }\n        });\n      }\n      return () => {\n        console.log('🧹 Cleaning up socket connection');\n        if (socketService.isConnected()) {\n          socketService.disconnect();\n        }\n        setSocketConnected(false);\n        connectionRef.current = false;\n        initialLoadRef.current = false;\n      };\n    }\n  }, [token]); // Only depend on token\n  // Load messages when selected user changes (separate from connection)\n  useEffect(() => {\n    if (socketConnected && selectedUser) {\n      loadMessages(selectedUser._id);\n    }\n  }, [selectedUser, socketConnected, loadMessages]); // Include loadMessages in dependencies\n\n  // Handle token updates - ensure socket service is updated with new tokens\n  useEffect(() => {\n    if (token && socketService.isConnected()) {\n      console.log('🔑 Token updated, updating socket service');\n      socketService.updateToken(`Bearer ${token}`);\n    }\n  }, [token]);\n  useEffect(() => {\n    if (socketConnected) {\n      const messageHandler = newMessage => {\n        var _newMessage$content, _newMessage$content2;\n        console.log('🔄 Received message via socket:', {\n          messageId: newMessage._id,\n          sender: newMessage.sender,\n          receiver: newMessage.receiver,\n          content: ((_newMessage$content = newMessage.content) === null || _newMessage$content === void 0 ? void 0 : _newMessage$content.substring(0, 50)) + (((_newMessage$content2 = newMessage.content) === null || _newMessage$content2 === void 0 ? void 0 : _newMessage$content2.length) > 50 ? '...' : ''),\n          timestamp: newMessage.timestamp,\n          createdAt: newMessage.createdAt\n        });\n\n        // Extract IDs correctly regardless of the format\n        const senderId = typeof newMessage.sender === 'string' ? newMessage.sender : newMessage.sender._id;\n        const receiverId = typeof newMessage.receiver === 'string' ? newMessage.receiver : newMessage.receiver._id;\n        const userId = String(user === null || user === void 0 ? void 0 : user._id);\n        const isMessageForCurrentUser = senderId === userId || receiverId === userId;\n        console.log('🔍 Message routing info:', {\n          senderId,\n          receiverId,\n          currentUserId: userId,\n          isForCurrentUser: isMessageForCurrentUser,\n          isSender: senderId === userId,\n          isReceiver: receiverId === userId\n        });\n\n        // Only update conversation if we're either the sender or receiver\n        if (isMessageForCurrentUser) {\n          // Get the ID of the other person in the conversation\n          const conversationId = senderId === userId ? receiverId : senderId;\n          console.log('📋 Updating conversation:', conversationId);\n          setMessagesByConversation(prev => {\n            const conversationMessages = prev[conversationId] || [];\n            console.log('📋 Current conversation messages count:', conversationMessages.length);\n\n            // Check if this is confirming an optimistic message (for sender)\n            const optimisticIndex = conversationMessages.findIndex(msg => msg._id.startsWith('temp_') && msg.content === newMessage.content && senderId === userId && Math.abs(new Date(msg.timestamp).getTime() - new Date(newMessage.timestamp || newMessage.createdAt || newMessage.timestamp).getTime()) < 10000 // Within 10 seconds\n            );\n            if (optimisticIndex !== -1) {\n              // Replace optimistic message with real message\n              const updatedMessages = [...conversationMessages];\n              const normalizedMessage = {\n                ...newMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(newMessage._id),\n                timestamp: newMessage.timestamp || newMessage.createdAt || new Date()\n              };\n              updatedMessages[optimisticIndex] = normalizedMessage;\n              console.log('✅ Replaced optimistic message with real message:', {\n                tempId: conversationMessages[optimisticIndex]._id,\n                realId: newMessage._id,\n                timestamp: normalizedMessage.timestamp\n              });\n              return {\n                ...prev,\n                [conversationId]: updatedMessages.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime())\n              };\n            }\n\n            // Check if message already exists by ID (prevent duplicates)\n            const exists = conversationMessages.some(msg => String(msg._id) === String(newMessage._id));\n            if (!exists) {\n              // Add new message (for receiver or if no optimistic message found)\n              const normalizedMessage = {\n                ...newMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(newMessage._id),\n                timestamp: newMessage.timestamp || newMessage.createdAt || new Date()\n              };\n              console.log('➕ Adding new message to conversation:', {\n                conversationId,\n                messageId: normalizedMessage._id,\n                timestamp: normalizedMessage.timestamp,\n                isFromSender: senderId === userId\n              });\n\n              // Sort messages by timestamp\n              const updatedMessages = [...conversationMessages, normalizedMessage].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n              return {\n                ...prev,\n                [conversationId]: updatedMessages\n              };\n            }\n            console.log('⚠️ Message already exists, not adding duplicate:', newMessage._id);\n            return prev;\n          });\n        }\n\n        // Only scroll if the message belongs to the currently selected conversation\n        if (selectedUser && (senderId === String(selectedUser._id) || receiverId === String(selectedUser._id))) {\n          console.log('📜 Scrolling to bottom for message in active conversation');\n          scrollToBottom(); // Instant scrolling for real-time feel\n        }\n      };\n\n      // Handle database save confirmation\n      const messageDbSavedHandler = ({\n        tempId,\n        realId\n      }) => {\n        console.log('💾 Database save confirmed:', {\n          tempId,\n          realId\n        });\n        setMessagesByConversation(prev => {\n          const updatedConversations = {\n            ...prev\n          };\n\n          // Find and update the message with temp ID across all conversations\n          Object.keys(updatedConversations).forEach(conversationId => {\n            const messages = updatedConversations[conversationId];\n            const messageIndex = messages.findIndex(msg => msg._id === tempId);\n            if (messageIndex !== -1) {\n              const updatedMessages = [...messages];\n              updatedMessages[messageIndex] = {\n                ...updatedMessages[messageIndex],\n                _id: realId\n              };\n              updatedConversations[conversationId] = updatedMessages;\n              console.log('🔄 Updated message ID:', {\n                tempId,\n                realId,\n                conversationId\n              });\n            }\n          });\n          return updatedConversations;\n        });\n      };\n\n      // Handle message errors\n      const messageErrorHandler = ({\n        error,\n        tempId\n      }) => {\n        console.error('❌ Message error:', error, tempId);\n        if (tempId) {\n          // Mark the temporary message as failed\n          setMessagesByConversation(prev => {\n            const updatedConversations = {\n              ...prev\n            };\n            Object.keys(updatedConversations).forEach(conversationId => {\n              const messages = updatedConversations[conversationId];\n              const messageIndex = messages.findIndex(msg => msg._id === tempId);\n              if (messageIndex !== -1) {\n                const updatedMessages = [...messages];\n                updatedMessages[messageIndex] = {\n                  ...updatedMessages[messageIndex],\n                  error: true,\n                  errorMessage: error\n                };\n                updatedConversations[conversationId] = updatedMessages;\n                console.log('❌ Marked message as failed:', {\n                  tempId,\n                  error\n                });\n              }\n            });\n            return updatedConversations;\n          });\n        }\n      };\n      const userOnlineHandler = userId => {\n        console.log('User came online:', userId);\n        setActiveUsers(prev => prev.map(user => user._id === userId ? {\n          ...user,\n          isOnline: true\n        } : user));\n      };\n      const userOfflineHandler = userId => {\n        console.log('User went offline:', userId);\n        setActiveUsers(prev => prev.map(user => user._id === userId ? {\n          ...user,\n          isOnline: false\n        } : user));\n      };\n      const typingHandler = ({\n        userId,\n        isTyping\n      }) => {\n        setTyping(prev => ({\n          ...prev,\n          [userId]: isTyping\n        }));\n      };\n      socketService.onMessage(messageHandler);\n      socketService.onUserOnline(userOnlineHandler);\n      socketService.onUserOffline(userOfflineHandler);\n      socketService.onTyping(typingHandler);\n\n      // Handle message confirmation for sender - use the same messageHandler\n      const messageConfirmedHandler = confirmedMessage => {\n        var _confirmedMessage$con, _confirmedMessage$con2;\n        console.log('📧 Message confirmed event received:', {\n          messageId: confirmedMessage._id,\n          content: ((_confirmedMessage$con = confirmedMessage.content) === null || _confirmedMessage$con === void 0 ? void 0 : _confirmedMessage$con.substring(0, 50)) + (((_confirmedMessage$con2 = confirmedMessage.content) === null || _confirmedMessage$con2 === void 0 ? void 0 : _confirmedMessage$con2.length) > 50 ? '...' : ''),\n          timestamp: confirmedMessage.timestamp,\n          createdAt: confirmedMessage.createdAt\n        });\n        // Reuse the same messageHandler logic\n        messageHandler(confirmedMessage);\n      };\n\n      // Listen for all message-related events\n      if (socketService.getSocket()) {\n        var _socketService$getSoc, _socketService$getSoc2, _socketService$getSoc3;\n        (_socketService$getSoc = socketService.getSocket()) === null || _socketService$getSoc === void 0 ? void 0 : _socketService$getSoc.on('messageConfirmed', messageConfirmedHandler);\n        (_socketService$getSoc2 = socketService.getSocket()) === null || _socketService$getSoc2 === void 0 ? void 0 : _socketService$getSoc2.on('messageDbSaved', messageDbSavedHandler);\n        (_socketService$getSoc3 = socketService.getSocket()) === null || _socketService$getSoc3 === void 0 ? void 0 : _socketService$getSoc3.on('messageError', messageErrorHandler);\n      }\n      return () => {\n        socketService.off('newMessage');\n        socketService.off('messageConfirmed');\n        socketService.off('userOnline');\n        socketService.off('userOffline');\n        socketService.off('userTyping');\n        if (socketService.getSocket()) {\n          var _socketService$getSoc4, _socketService$getSoc5, _socketService$getSoc6;\n          (_socketService$getSoc4 = socketService.getSocket()) === null || _socketService$getSoc4 === void 0 ? void 0 : _socketService$getSoc4.off('messageConfirmed', messageConfirmedHandler);\n          (_socketService$getSoc5 = socketService.getSocket()) === null || _socketService$getSoc5 === void 0 ? void 0 : _socketService$getSoc5.off('messageDbSaved', messageDbSavedHandler);\n          (_socketService$getSoc6 = socketService.getSocket()) === null || _socketService$getSoc6 === void 0 ? void 0 : _socketService$getSoc6.off('messageError', messageErrorHandler);\n        }\n      };\n    }\n  }, [socketConnected, user, selectedUser]);\n  useEffect(() => {\n    if (selectedUser) {\n      console.log('👤 Selected user changed, loading messages for:', selectedUser._id, selectedUser.username);\n      loadMessages(selectedUser._id);\n    } else {\n      console.log('👤 No user selected');\n    }\n  }, [selectedUser, loadMessages]);\n\n  // Handle page visibility to maintain socket connection when tab is active\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        console.log('📱 Page hidden - socket will continue running');\n      } else {\n        console.log('📱 Page visible - ensuring socket connection');\n        if (token && !socketService.isConnected()) {\n          console.log('🔄 Page visible but socket disconnected, reconnecting...');\n          socketService.connect(`Bearer ${token}`);\n        }\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [token]);\n\n  // Handle page visibility changes (tab switching)\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        console.log('Page became visible, checking socket connection...');\n\n        // Reconnect socket if needed\n        if (!socketService.isConnected() && token) {\n          console.log('Reconnecting socket after tab switch...');\n          const socket = socketService.connect(`Bearer ${token}`);\n          if (socket) {\n            socket.on('connect', () => {\n              console.log('Reconnected after tab switch');\n              setSocketConnected(true);\n              // Reload data when reconnected\n              loadActiveUsers();\n              if (selectedUser) {\n                loadMessages(selectedUser._id);\n              }\n            });\n          }\n        } else if (socketService.isConnected()) {\n          // Socket is connected, just refresh data\n          console.log('Socket still connected, refreshing data...');\n          loadActiveUsers();\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n        }\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [token, selectedUser, loadActiveUsers, loadMessages]);\n  const handleSendMessage = async () => {\n    if (!message.trim() || !selectedUser || !(user !== null && user !== void 0 && user._id)) return;\n\n    // Check if socket is connected\n    if (!socketService.isConnected()) {\n      console.log('Socket not connected, attempting to reconnect...');\n      const socket = socketService.connect(`Bearer ${token}`);\n      if (socket) {\n        socket.on('connect', () => {\n          console.log('Reconnected, sending message...');\n          setSocketConnected(true);\n          // Send the message after reconnection\n          socketService.sendMessage(selectedUser._id, message.trim());\n        });\n      }\n      return;\n    }\n    const content = message.trim();\n    setMessage(''); // Optimistic update - add message immediately to UI\n    const optimisticMessage = {\n      _id: `temp_${Date.now()}_${Math.random()}`,\n      // Temporary ID\n      sender: user._id,\n      receiver: selectedUser._id,\n      content: content,\n      timestamp: new Date(),\n      isRead: false,\n      // Changed back to isRead to match backend\n      messageType: 'text',\n      status: 'sending' // Add status to track message state\n    };\n    console.log('📤 Creating optimistic message:', {\n      tempId: optimisticMessage._id,\n      content: content.substring(0, 50) + (content.length > 50 ? '...' : ''),\n      receiver: selectedUser._id,\n      timestamp: optimisticMessage.timestamp\n    });\n\n    // Add optimistic message to UI immediately\n    setMessagesByConversation(prev => {\n      const conversationMessages = prev[selectedUser._id] || [];\n      return {\n        ...prev,\n        [selectedUser._id]: [...conversationMessages, optimisticMessage]\n      };\n    }); // Scroll to bottom immediately for instant feedback\n    scrollToBottom();\n    try {\n      // Clear typing status\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n      socketService.sendTypingStatus(selectedUser._id, false); // Send through socket\n      console.log('🚀 Sending message via socket to:', selectedUser._id);\n      socketService.sendMessage(selectedUser._id, content); // Set a timeout to mark message as failed if not confirmed within 10 seconds\n      setTimeout(() => {\n        setMessagesByConversation(prev => {\n          const conversationMessages = prev[selectedUser._id] || [];\n          const messageIndex = conversationMessages.findIndex(msg => msg._id === optimisticMessage._id);\n          if (messageIndex !== -1 && conversationMessages[messageIndex]._id.startsWith('temp_')) {\n            // Message still has temp ID, mark as failed\n            const updatedMessages = [...conversationMessages];\n            updatedMessages[messageIndex] = {\n              ...updatedMessages[messageIndex],\n              error: true,\n              errorMessage: 'Message delivery timeout'\n            };\n            return {\n              ...prev,\n              [selectedUser._id]: updatedMessages\n            };\n          }\n          return prev;\n        });\n      }, 10000);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      // Mark the optimistic message as failed\n      setMessagesByConversation(prev => {\n        const conversationMessages = prev[selectedUser._id] || [];\n        const messageIndex = conversationMessages.findIndex(msg => msg._id === optimisticMessage._id);\n        if (messageIndex !== -1) {\n          const updatedMessages = [...conversationMessages];\n          updatedMessages[messageIndex] = {\n            ...updatedMessages[messageIndex],\n            error: true,\n            errorMessage: 'Failed to send message'\n          };\n          return {\n            ...prev,\n            [selectedUser._id]: updatedMessages\n          };\n        }\n        return prev;\n      });\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const handleTyping = e => {\n    setMessage(e.target.value);\n    if (selectedUser) {\n      // Clear existing timeout\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n\n      // Send typing status\n      socketService.sendTypingStatus(selectedUser._id, true);\n\n      // Set new timeout\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\n        socketService.sendTypingStatus(selectedUser._id, false);\n      }, 2000);\n    }\n  };\n  const formatTime = date => {\n    try {\n      const messageDate = new Date(date);\n\n      // Check if date is valid\n      if (isNaN(messageDate.getTime())) {\n        return 'Invalid date';\n      }\n      const now = new Date();\n      const diffMs = now.getTime() - messageDate.getTime();\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n      if (diffMinutes < 1) {\n        return 'Vừa xong';\n      } else if (diffMinutes < 60) {\n        return `${diffMinutes} phút trước`;\n      } else if (diffHours < 24) {\n        return `${diffHours} giờ trước`;\n      } else if (diffDays < 7) {\n        return `${diffDays} ngày trước`;\n      } else {\n        return messageDate.toLocaleDateString('vi-VN');\n      }\n    } catch (error) {\n      console.error('Error formatting time:', error);\n      return 'Invalid date';\n    }\n  };\n  const formatFullDateTime = date => {\n    try {\n      const messageDate = new Date(date);\n\n      // Check if date is valid\n      if (isNaN(messageDate.getTime())) {\n        return 'Invalid date';\n      }\n      return messageDate.toLocaleString('vi-VN', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    } catch (error) {\n      console.error('Error formatting full date time:', error);\n      return 'Invalid date';\n    }\n  };\n  const currentMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\n  // Filter users based on search query\n  const filteredUsers = activeUsers.filter(chatUser => chatUser.username.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messenger-chat-page\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 16,\n      style: {\n        height: '100%'\n      },\n      children: [\"        \", /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 8,\n        md: 6,\n        lg: 6,\n        xl: 5,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Search users by name...\",\n            value: searchQuery,\n            onChange: e => setSearchQuery(e.target.value),\n            style: {\n              width: '100%'\n            },\n            allowClear: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 15\n          }, this),\n          className: \"users-card\",\n          bodyStyle: {\n            padding: 0\n          },\n          children: [\"            \", /*#__PURE__*/_jsxDEV(List, {\n            dataSource: filteredUsers,\n            renderItem: chatUser => /*#__PURE__*/_jsxDEV(List.Item, {\n              className: `user-item ${(selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id) === chatUser._id ? 'selected' : ''}`,\n              onClick: () => setSelectedUser(chatUser),\n              children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n                avatar: /*#__PURE__*/_jsxDEV(Badge, {\n                  dot: true,\n                  status: chatUser.isOnline ? 'success' : 'default',\n                  offset: [-2, 32],\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 708,\n                      columnNumber: 33\n                    }, this),\n                    src: chatUser.avatar,\n                    size: \"large\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 707,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 23\n                }, this),\n                title: /*#__PURE__*/_jsxDEV(Text, {\n                  strong: true,\n                  children: chatUser.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 714,\n                  columnNumber: 28\n                }, this),\n                description: typing[chatUser._id] ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Typing...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 717,\n                  columnNumber: 25\n                }, this) : chatUser.isOnline ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Online\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 719,\n                  columnNumber: 25\n                }, this) : chatUser.lastSeen ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"secondary\",\n                  children: [\"Last seen at \", formatTime(chatUser.lastSeen)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 721,\n                  columnNumber: 25\n                }, this) : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 700,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 59\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 16,\n        md: 18,\n        lg: 18,\n        xl: 19,\n        children: selectedUser ? /*#__PURE__*/_jsxDEV(Card, {\n          className: \"chat-card\",\n          title: /*#__PURE__*/_jsxDEV(Space, {\n            children: [/*#__PURE__*/_jsxDEV(Badge, {\n              dot: true,\n              status: selectedUser.isOnline ? 'success' : 'default',\n              offset: [-2, 32],\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 744,\n                  columnNumber: 29\n                }, this),\n                src: selectedUser.avatar,\n                size: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 743,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: selectedUser.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 19\n            }, this), typing[selectedUser._id] && /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              italic: true,\n              children: \"typing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 751,\n              columnNumber: 21\n            }, this), !socketConnected && /*#__PURE__*/_jsxDEV(Text, {\n              type: \"warning\",\n              style: {\n                fontSize: '12px',\n                marginLeft: '8px'\n              },\n              children: \"\\u26A0\\uFE0F Reconnecting...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 17\n          }, this),\n          style: {\n            height: 'calc(100vh - 200px)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-container\",\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              dataSource: currentMessages,\n              renderItem: msg => {\n                const senderId = typeof msg.sender === 'string' ? msg.sender : msg.sender._id;\n                const isOwnMessage = String(user === null || user === void 0 ? void 0 : user._id) === String(senderId);\n                const isOptimistic = msg._id.startsWith('temp_');\n                return /*#__PURE__*/_jsxDEV(List.Item, {\n                  className: `message-item ${isOwnMessage ? 'own-message' : 'other-message'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-content\",\n                    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                      title: formatFullDateTime(msg.timestamp),\n                      placement: isOwnMessage ? 'left' : 'right',\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"message-bubble\",\n                        style: {\n                          backgroundColor: isOwnMessage ? '#1890ff' : '#e4e6eb',\n                          color: isOwnMessage ? '#ffffff' : '#000000',\n                          opacity: isOptimistic ? 0.7 : 1,\n                          // Show optimistic messages as slightly transparent\n                          transition: 'opacity 0.2s ease' // Smooth transition when message is confirmed\n                        },\n                        children: [\"                              \", /*#__PURE__*/_jsxDEV(Text, {\n                          style: {\n                            color: 'inherit'\n                          },\n                          children: msg.content\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 788,\n                          columnNumber: 60\n                        }, this), isOptimistic && !msg.error && /*#__PURE__*/_jsxDEV(Text, {\n                          style: {\n                            color: 'inherit',\n                            fontSize: '10px',\n                            marginLeft: '8px',\n                            opacity: 0.8\n                          },\n                          children: \"\\u23F3\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 790,\n                          columnNumber: 33\n                        }, this), msg.error && /*#__PURE__*/_jsxDEV(Text, {\n                          style: {\n                            color: 'inherit',\n                            fontSize: '10px',\n                            marginLeft: '8px',\n                            opacity: 0.8,\n                            cursor: 'pointer'\n                          },\n                          title: msg.errorMessage || 'Failed to send',\n                          onClick: () => {\n                            // Retry sending the message\n                            socketService.sendMessage(selectedUser._id, msg.content);\n                            // Remove error status\n                            setMessagesByConversation(prev => {\n                              const conversationMessages = prev[selectedUser._id] || [];\n                              const messageIndex = conversationMessages.findIndex(m => m._id === msg._id);\n                              if (messageIndex !== -1) {\n                                const updatedMessages = [...conversationMessages];\n                                updatedMessages[messageIndex] = {\n                                  ...updatedMessages[messageIndex],\n                                  error: false,\n                                  errorMessage: undefined\n                                };\n                                return {\n                                  ...prev,\n                                  [selectedUser._id]: updatedMessages\n                                };\n                              }\n                              return prev;\n                            });\n                          },\n                          children: \"\\u274C\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 800,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 780,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 776,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Text, {\n                      type: \"secondary\",\n                      className: \"message-time\",\n                      children: formatTime(new Date(msg.timestamp))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 837,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 775,\n                    columnNumber: 25\n                  }, this)\n                }, msg._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 771,\n                  columnNumber: 29\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 845,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              margin: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-input-container\",\n            children: /*#__PURE__*/_jsxDEV(Space.Compact, {\n              style: {\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextArea, {\n                value: message,\n                onChange: handleTyping,\n                onKeyPress: handleKeyPress,\n                placeholder: \"Type a message...\",\n                autoSize: {\n                  minRows: 1,\n                  maxRows: 4\n                },\n                style: {\n                  resize: 'none'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 852,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"primary\",\n                icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 862,\n                  columnNumber: 27\n                }, this),\n                onClick: handleSendMessage,\n                disabled: !message.trim(),\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 860,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 851,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Card, {\n          className: \"no-chat-selected\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center',\n              padding: '60px 20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(MessageOutlined, {\n              style: {\n                fontSize: '48px',\n                color: '#d9d9d9'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 874,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Title, {\n              level: 4,\n              type: \"secondary\",\n              children: \"Select a conversation to start chatting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              children: \"Choose from your existing conversations on the left or start a new one.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 876,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 873,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 679,\n    columnNumber: 5\n  }, this);\n};\n_s(MessengerChatPage, \"wd2h1LgynHbPUvsUWnz2mq3me3U=\", false, function () {\n  return [useAuth];\n});\n_c = MessengerChatPage;\nexport default MessengerChatPage;\nvar _c;\n$RefreshReg$(_c, \"MessengerChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Card","Typography","Input","Button","List","Avatar","Space","Divider","Badge","Row","Col","Tooltip","SendOutlined","UserOutlined","MessageOutlined","useAuth","socketService","chatService","jsxDEV","_jsxDEV","Title","Text","TextArea","MessengerChatPage","_s","user","token","message","setMessage","messagesByConversation","setMessagesByConversation","activeUsers","setActiveUsers","selectedUser","setSelectedUser","typing","setTyping","typingTimeoutRef","messagesEndRef","socketConnected","setSocketConnected","searchQuery","setSearchQuery","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","loadMessages","userId","console","log","messages","getMessages","count","length","map","m","id","_id","content","substring","timestamp","sender","receiver","sortedMessages","sort","a","b","Date","getTime","prev","markAsRead","catch","error","loadActiveUsers","users","getActiveUsers","filteredUsers","filter","u","connectionRef","initialLoadRef","isConnected","socket","connect","on","reason","setTimeout","disconnect","updateToken","messageHandler","newMessage","_newMessage$content","_newMessage$content2","messageId","createdAt","senderId","receiverId","String","isMessageForCurrentUser","currentUserId","isForCurrentUser","isSender","isReceiver","conversationId","conversationMessages","optimisticIndex","findIndex","msg","startsWith","Math","abs","updatedMessages","normalizedMessage","tempId","realId","exists","some","isFromSender","messageDbSavedHandler","updatedConversations","Object","keys","forEach","messageIndex","messageErrorHandler","errorMessage","userOnlineHandler","isOnline","userOfflineHandler","typingHandler","isTyping","onMessage","onUserOnline","onUserOffline","onTyping","messageConfirmedHandler","confirmedMessage","_confirmedMessage$con","_confirmedMessage$con2","getSocket","_socketService$getSoc","_socketService$getSoc2","_socketService$getSoc3","off","_socketService$getSoc4","_socketService$getSoc5","_socketService$getSoc6","username","handleVisibilityChange","document","hidden","addEventListener","removeEventListener","visibilityState","handleSendMessage","trim","sendMessage","optimisticMessage","now","random","isRead","messageType","status","clearTimeout","sendTypingStatus","handleKeyPress","e","key","shiftKey","preventDefault","handleTyping","target","value","formatTime","date","messageDate","isNaN","diffMs","diffMinutes","floor","diffHours","diffDays","toLocaleDateString","formatFullDateTime","toLocaleString","weekday","year","month","day","hour","minute","second","currentMessages","chatUser","toLowerCase","includes","className","children","gutter","style","height","xs","sm","md","lg","xl","title","placeholder","onChange","width","allowClear","fileName","_jsxFileName","lineNumber","columnNumber","bodyStyle","padding","dataSource","renderItem","Item","onClick","Meta","avatar","dot","offset","icon","src","size","strong","description","type","lastSeen","italic","fontSize","marginLeft","isOwnMessage","isOptimistic","placement","backgroundColor","color","opacity","transition","cursor","undefined","ref","margin","Compact","onKeyPress","autoSize","minRows","maxRows","resize","disabled","textAlign","level","_c","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/Components/Chat/MessengerChatPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Input, \r\n  Button, \r\n  List, \r\n  Avatar, \r\n  Space,\r\n  Divider,\r\n  Badge,\r\n  Row,\r\n  Col,\r\n  Tooltip\r\n} from 'antd';\r\nimport { \r\n  SendOutlined, \r\n  UserOutlined,\r\n  MessageOutlined \r\n} from '@ant-design/icons';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport socketService from '../../services/socketService';\r\nimport { chatService, Message, ChatUser } from '../../services/chatService';\r\nimport './MessengerChatPage.css';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst MessengerChatPage: React.FC = () => {\r\n  const { user, token } = useAuth();\r\n  const [message, setMessage] = useState('');\r\n  const [messagesByConversation, setMessagesByConversation] = useState<{ [key: string]: Message[] }>({});\r\n  const [activeUsers, setActiveUsers] = useState<ChatUser[]>([]);\r\n  const [selectedUser, setSelectedUser] = useState<ChatUser | null>(null);\r\n  const [typing, setTyping] = useState<{ [key: string]: boolean }>({});\r\n  const typingTimeoutRef = useRef<{ [key: string]: NodeJS.Timeout }>({});\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n  const loadMessages = useCallback(async (userId: string) => {\r\n    try {\r\n      console.log('🔄 Loading messages for user:', userId);\r\n      const messages = await chatService.getMessages(userId);\r\n      console.log('📨 Received messages from API:', {\r\n        userId,\r\n        count: messages.length,\r\n        messages: messages.map(m => ({\r\n          id: m._id,\r\n          content: m.content.substring(0, 50) + (m.content.length > 50 ? '...' : ''),\r\n          timestamp: m.timestamp,\r\n          sender: typeof m.sender === 'string' ? m.sender : m.sender._id,\r\n          receiver: typeof m.receiver === 'string' ? m.receiver : m.receiver._id\r\n        }))\r\n      });\r\n      \r\n      // Sort messages by timestamp\r\n      const sortedMessages = messages.sort((a, b) => \r\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n      );\r\n      \r\n      setMessagesByConversation(prev => ({\r\n        ...prev,\r\n        [userId]: sortedMessages\r\n      }));\r\n      \r\n      console.log('✅ Messages loaded and set in state for user:', userId);\r\n      scrollToBottom();\r\n      \r\n      // Mark messages as read\r\n      chatService.markAsRead(userId)\r\n        .catch(error => console.error('Error marking messages as read:', error));\r\n    } catch (error) {\r\n      console.error('❌ Error loading messages:', error);\r\n    }\r\n  }, []);  const loadActiveUsers = useCallback(async () => {\r\n    try {\r\n      const users = await chatService.getActiveUsers();\r\n      // Filter out current user\r\n      const filteredUsers = users.filter(u => u._id !== user?._id);\r\n      setActiveUsers(filteredUsers);\r\n      \r\n      // Auto-select first user if no user is selected and there are users available\r\n      if (!selectedUser && filteredUsers.length > 0) {\r\n        setSelectedUser(filteredUsers[0]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading active users:', error);\r\n    }\r\n  }, [user?._id]); // Remove selectedUser dependency to prevent circular updates\r\n  // Use ref to track connection state to prevent infinite loops\r\n  const connectionRef = useRef<boolean>(false);\r\n  const initialLoadRef = useRef<boolean>(false);\r\n\r\n  // Socket connection effect - only depends on token\r\n  useEffect(() => {\r\n    if (token) {\r\n      // Check if already connected to avoid duplicate connections\r\n      if (socketService.isConnected() && connectionRef.current) {\r\n        console.log('🔗 Socket already connected, updating state');\r\n        setSocketConnected(true);\r\n        return;\r\n      }\r\n\r\n      console.log('🔌 Connecting socket with token');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      \r\n      if (socket) {\r\n        socket.on('connect', () => {\r\n          console.log('✅ Socket connected successfully');\r\n          setSocketConnected(true);\r\n          connectionRef.current = true;\r\n          \r\n          // Load initial data only once after connection\r\n          if (!initialLoadRef.current) {\r\n            initialLoadRef.current = true;\r\n            loadActiveUsers();\r\n          }\r\n        });\r\n\r\n        socket.on('reconnect', () => {\r\n          console.log('🔄 Socket reconnected successfully');\r\n          setSocketConnected(true);\r\n          connectionRef.current = true;\r\n        });\r\n\r\n        socket.on('connect_error', (error: Error) => {\r\n          console.error('❌ Socket connection error:', error);\r\n          setSocketConnected(false);\r\n          connectionRef.current = false;\r\n        });\r\n\r\n        socket.on('disconnect', (reason) => {\r\n          console.log('🔌 Socket disconnected:', reason);\r\n          setSocketConnected(false);\r\n          connectionRef.current = false;\r\n          \r\n          // Auto-reconnect for certain disconnect reasons\r\n          if (reason === 'transport close' || reason === 'transport error') {\r\n            console.log('🔄 Auto-reconnecting due to transport issue...');\r\n            setTimeout(() => {\r\n              if (token && !socketService.isConnected()) {\r\n                socketService.connect(`Bearer ${token}`);\r\n              }\r\n            }, 1000);\r\n          }\r\n        });\r\n      }\r\n\r\n      return () => {\r\n        console.log('🧹 Cleaning up socket connection');\r\n        if (socketService.isConnected()) {\r\n          socketService.disconnect();\r\n        }\r\n        setSocketConnected(false);\r\n        connectionRef.current = false;\r\n        initialLoadRef.current = false;\r\n      };\r\n    }\r\n  }, [token]); // Only depend on token\r\n  // Load messages when selected user changes (separate from connection)\r\n  useEffect(() => {\r\n    if (socketConnected && selectedUser) {\r\n      loadMessages(selectedUser._id);\r\n    }\r\n  }, [selectedUser, socketConnected, loadMessages]); // Include loadMessages in dependencies\r\n\r\n  // Handle token updates - ensure socket service is updated with new tokens\r\n  useEffect(() => {\r\n    if (token && socketService.isConnected()) {\r\n      console.log('🔑 Token updated, updating socket service');\r\n      socketService.updateToken(`Bearer ${token}`);\r\n    }\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    if (socketConnected) {\r\n      const messageHandler = (newMessage: Message) => {\r\n        console.log('🔄 Received message via socket:', {\r\n          messageId: newMessage._id,\r\n          sender: newMessage.sender,\r\n          receiver: newMessage.receiver,\r\n          content: newMessage.content?.substring(0, 50) + (newMessage.content?.length > 50 ? '...' : ''),\r\n          timestamp: newMessage.timestamp,\r\n          createdAt: newMessage.createdAt\r\n        });\r\n\r\n        // Extract IDs correctly regardless of the format\r\n        const senderId = typeof newMessage.sender === 'string' \r\n          ? newMessage.sender \r\n          : newMessage.sender._id;\r\n        \r\n        const receiverId = typeof newMessage.receiver === 'string'\r\n          ? newMessage.receiver \r\n          : newMessage.receiver._id;\r\n        \r\n        const userId = String(user?._id);\r\n        const isMessageForCurrentUser = senderId === userId || receiverId === userId;\r\n\r\n        console.log('🔍 Message routing info:', {\r\n          senderId,\r\n          receiverId,\r\n          currentUserId: userId,\r\n          isForCurrentUser: isMessageForCurrentUser,\r\n          isSender: senderId === userId,\r\n          isReceiver: receiverId === userId\r\n        });\r\n\r\n        // Only update conversation if we're either the sender or receiver\r\n        if (isMessageForCurrentUser) {\r\n          // Get the ID of the other person in the conversation\r\n          const conversationId = senderId === userId ? receiverId : senderId;\r\n          console.log('📋 Updating conversation:', conversationId);\r\n\r\n          setMessagesByConversation(prev => {\r\n            const conversationMessages = prev[conversationId] || [];\r\n            console.log('📋 Current conversation messages count:', conversationMessages.length);\r\n            \r\n            // Check if this is confirming an optimistic message (for sender)\r\n            const optimisticIndex = conversationMessages.findIndex(msg => \r\n              msg._id.startsWith('temp_') && \r\n              msg.content === newMessage.content && \r\n              senderId === userId &&\r\n              Math.abs(new Date(msg.timestamp).getTime() - new Date(newMessage.timestamp || newMessage.createdAt || newMessage.timestamp).getTime()) < 10000 // Within 10 seconds\r\n            );\r\n\r\n            if (optimisticIndex !== -1) {\r\n              // Replace optimistic message with real message\r\n              const updatedMessages = [...conversationMessages];\r\n              const normalizedMessage = {\r\n                ...newMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(newMessage._id),\r\n                timestamp: newMessage.timestamp || newMessage.createdAt || new Date()\r\n              };\r\n              updatedMessages[optimisticIndex] = normalizedMessage;\r\n              \r\n              console.log('✅ Replaced optimistic message with real message:', {\r\n                tempId: conversationMessages[optimisticIndex]._id,\r\n                realId: newMessage._id,\r\n                timestamp: normalizedMessage.timestamp\r\n              });\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages.sort((a, b) => \r\n                  new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n                )\r\n              };\r\n            }\r\n\r\n            // Check if message already exists by ID (prevent duplicates)\r\n            const exists = conversationMessages.some(msg => \r\n              String(msg._id) === String(newMessage._id)\r\n            );\r\n            \r\n            if (!exists) {\r\n              // Add new message (for receiver or if no optimistic message found)\r\n              const normalizedMessage = {\r\n                ...newMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(newMessage._id),\r\n                timestamp: newMessage.timestamp || newMessage.createdAt || new Date()\r\n              };\r\n\r\n              console.log('➕ Adding new message to conversation:', {\r\n                conversationId,\r\n                messageId: normalizedMessage._id,\r\n                timestamp: normalizedMessage.timestamp,\r\n                isFromSender: senderId === userId\r\n              });\r\n              \r\n              // Sort messages by timestamp\r\n              const updatedMessages = [...conversationMessages, normalizedMessage]\r\n                .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages\r\n              };\r\n            }\r\n            \r\n            console.log('⚠️ Message already exists, not adding duplicate:', newMessage._id);\r\n            return prev;\r\n          });\r\n        }\r\n\r\n        // Only scroll if the message belongs to the currently selected conversation\r\n        if (selectedUser && (\r\n          senderId === String(selectedUser._id) || \r\n          receiverId === String(selectedUser._id)\r\n        )) {\r\n          console.log('📜 Scrolling to bottom for message in active conversation');\r\n          scrollToBottom(); // Instant scrolling for real-time feel\r\n        }\r\n      };\r\n\r\n      // Handle database save confirmation\r\n      const messageDbSavedHandler = ({ tempId, realId }: { tempId: string, realId: string }) => {\r\n        console.log('💾 Database save confirmed:', { tempId, realId });\r\n        \r\n        setMessagesByConversation(prev => {\r\n          const updatedConversations = { ...prev };\r\n          \r\n          // Find and update the message with temp ID across all conversations\r\n          Object.keys(updatedConversations).forEach(conversationId => {\r\n            const messages = updatedConversations[conversationId];\r\n            const messageIndex = messages.findIndex(msg => msg._id === tempId);\r\n            \r\n            if (messageIndex !== -1) {\r\n              const updatedMessages = [...messages];\r\n              updatedMessages[messageIndex] = {\r\n                ...updatedMessages[messageIndex],\r\n                _id: realId\r\n              };\r\n              updatedConversations[conversationId] = updatedMessages;\r\n              console.log('🔄 Updated message ID:', { tempId, realId, conversationId });\r\n            }\r\n          });\r\n          \r\n          return updatedConversations;\r\n        });\r\n      };\r\n\r\n      // Handle message errors\r\n      const messageErrorHandler = ({ error, tempId }: { error: string, tempId?: string }) => {\r\n        console.error('❌ Message error:', error, tempId);\r\n        \r\n        if (tempId) {\r\n          // Mark the temporary message as failed\r\n          setMessagesByConversation(prev => {\r\n            const updatedConversations = { ...prev };\r\n            \r\n            Object.keys(updatedConversations).forEach(conversationId => {\r\n              const messages = updatedConversations[conversationId];\r\n              const messageIndex = messages.findIndex(msg => msg._id === tempId);\r\n              \r\n              if (messageIndex !== -1) {\r\n                const updatedMessages = [...messages];\r\n                updatedMessages[messageIndex] = {\r\n                  ...updatedMessages[messageIndex],\r\n                  error: true,\r\n                  errorMessage: error\r\n                };\r\n                updatedConversations[conversationId] = updatedMessages;\r\n                console.log('❌ Marked message as failed:', { tempId, error });\r\n              }\r\n            });\r\n            \r\n            return updatedConversations;\r\n          });\r\n        }\r\n      };\r\n\r\n      const userOnlineHandler = (userId: string) => {\r\n        console.log('User came online:', userId);\r\n        setActiveUsers(prev => \r\n          prev.map(user => \r\n            user._id === userId ? { ...user, isOnline: true } : user\r\n          )\r\n        );\r\n      };\r\n\r\n      const userOfflineHandler = (userId: string) => {\r\n        console.log('User went offline:', userId);\r\n        setActiveUsers(prev => \r\n          prev.map(user => \r\n            user._id === userId ? { ...user, isOnline: false } : user\r\n          )\r\n        );\r\n      };\r\n\r\n      const typingHandler = ({ userId, isTyping }: { userId: string, isTyping: boolean }) => {\r\n        setTyping(prev => ({ ...prev, [userId]: isTyping }));\r\n      };\r\n\r\n      socketService.onMessage(messageHandler);\r\n      socketService.onUserOnline(userOnlineHandler);\r\n      socketService.onUserOffline(userOfflineHandler);\r\n      socketService.onTyping(typingHandler);\r\n\r\n      // Handle message confirmation for sender - use the same messageHandler\r\n      const messageConfirmedHandler = (confirmedMessage: Message) => {\r\n        console.log('📧 Message confirmed event received:', {\r\n          messageId: confirmedMessage._id,\r\n          content: confirmedMessage.content?.substring(0, 50) + (confirmedMessage.content?.length > 50 ? '...' : ''),\r\n          timestamp: confirmedMessage.timestamp,\r\n          createdAt: confirmedMessage.createdAt\r\n        });\r\n        // Reuse the same messageHandler logic\r\n        messageHandler(confirmedMessage);\r\n      };\r\n\r\n      // Listen for all message-related events\r\n      if (socketService.getSocket()) {\r\n        socketService.getSocket()?.on('messageConfirmed', messageConfirmedHandler);\r\n        socketService.getSocket()?.on('messageDbSaved', messageDbSavedHandler);\r\n        socketService.getSocket()?.on('messageError', messageErrorHandler);\r\n      }\r\n\r\n      return () => {\r\n        socketService.off('newMessage');\r\n        socketService.off('messageConfirmed');\r\n        socketService.off('userOnline');\r\n        socketService.off('userOffline');\r\n        socketService.off('userTyping');\r\n        if (socketService.getSocket()) {\r\n          socketService.getSocket()?.off('messageConfirmed', messageConfirmedHandler);\r\n          socketService.getSocket()?.off('messageDbSaved', messageDbSavedHandler);\r\n          socketService.getSocket()?.off('messageError', messageErrorHandler);\r\n        }\r\n      };\r\n    }\r\n  }, [socketConnected, user, selectedUser]);  useEffect(() => {\r\n    if (selectedUser) {\r\n      console.log('👤 Selected user changed, loading messages for:', selectedUser._id, selectedUser.username);\r\n      loadMessages(selectedUser._id);\r\n    } else {\r\n      console.log('👤 No user selected');\r\n    }\r\n  }, [selectedUser, loadMessages]);\r\n\r\n  // Handle page visibility to maintain socket connection when tab is active\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.hidden) {\r\n        console.log('📱 Page hidden - socket will continue running');\r\n      } else {\r\n        console.log('📱 Page visible - ensuring socket connection');\r\n        if (token && !socketService.isConnected()) {\r\n          console.log('🔄 Page visible but socket disconnected, reconnecting...');\r\n          socketService.connect(`Bearer ${token}`);\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, [token]);\r\n\r\n  // Handle page visibility changes (tab switching)\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'visible') {\r\n        console.log('Page became visible, checking socket connection...');\r\n        \r\n        // Reconnect socket if needed\r\n        if (!socketService.isConnected() && token) {\r\n          console.log('Reconnecting socket after tab switch...');\r\n          const socket = socketService.connect(`Bearer ${token}`);\r\n          if (socket) {\r\n            socket.on('connect', () => {\r\n              console.log('Reconnected after tab switch');\r\n              setSocketConnected(true);\r\n              // Reload data when reconnected\r\n              loadActiveUsers();\r\n              if (selectedUser) {\r\n                loadMessages(selectedUser._id);\r\n              }\r\n            });\r\n          }\r\n        } else if (socketService.isConnected()) {\r\n          // Socket is connected, just refresh data\r\n          console.log('Socket still connected, refreshing data...');\r\n          loadActiveUsers();\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, [token, selectedUser, loadActiveUsers, loadMessages]);const handleSendMessage = async () => {\r\n    if (!message.trim() || !selectedUser || !user?._id) return;\r\n\r\n    // Check if socket is connected\r\n    if (!socketService.isConnected()) {\r\n      console.log('Socket not connected, attempting to reconnect...');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      if (socket) {\r\n        socket.on('connect', () => {\r\n          console.log('Reconnected, sending message...');\r\n          setSocketConnected(true);\r\n          // Send the message after reconnection\r\n          socketService.sendMessage(selectedUser._id, message.trim());\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    const content = message.trim();\r\n    setMessage('');    // Optimistic update - add message immediately to UI\r\n    const optimisticMessage: Message & { status?: string } = {\r\n      _id: `temp_${Date.now()}_${Math.random()}`, // Temporary ID\r\n      sender: user._id,\r\n      receiver: selectedUser._id,\r\n      content: content,\r\n      timestamp: new Date(),\r\n      isRead: false, // Changed back to isRead to match backend\r\n      messageType: 'text',\r\n      status: 'sending' // Add status to track message state\r\n    };\r\n\r\n    console.log('📤 Creating optimistic message:', {\r\n      tempId: optimisticMessage._id,\r\n      content: content.substring(0, 50) + (content.length > 50 ? '...' : ''),\r\n      receiver: selectedUser._id,\r\n      timestamp: optimisticMessage.timestamp\r\n    });\r\n\r\n    // Add optimistic message to UI immediately\r\n    setMessagesByConversation(prev => {\r\n      const conversationMessages = prev[selectedUser._id] || [];\r\n      return {\r\n        ...prev,\r\n        [selectedUser._id]: [...conversationMessages, optimisticMessage]\r\n      };\r\n    });    // Scroll to bottom immediately for instant feedback\r\n    scrollToBottom();\r\n\r\n    try {\r\n      // Clear typing status\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n      socketService.sendTypingStatus(selectedUser._id, false);      // Send through socket\r\n      console.log('🚀 Sending message via socket to:', selectedUser._id);\r\n      socketService.sendMessage(selectedUser._id, content);      // Set a timeout to mark message as failed if not confirmed within 10 seconds\r\n      setTimeout(() => {\r\n        setMessagesByConversation(prev => {\r\n          const conversationMessages = prev[selectedUser._id] || [];\r\n          const messageIndex = conversationMessages.findIndex(msg => \r\n            msg._id === optimisticMessage._id\r\n          );\r\n          \r\n          if (messageIndex !== -1 && conversationMessages[messageIndex]._id.startsWith('temp_')) {\r\n            // Message still has temp ID, mark as failed\r\n            const updatedMessages = [...conversationMessages];\r\n            updatedMessages[messageIndex] = {\r\n              ...updatedMessages[messageIndex],\r\n              error: true,\r\n              errorMessage: 'Message delivery timeout'\r\n            };\r\n            \r\n            return {\r\n              ...prev,\r\n              [selectedUser._id]: updatedMessages\r\n            };\r\n          }\r\n          return prev;\r\n        });\r\n      }, 10000);\r\n        \r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      // Mark the optimistic message as failed\r\n      setMessagesByConversation(prev => {\r\n        const conversationMessages = prev[selectedUser._id] || [];\r\n        const messageIndex = conversationMessages.findIndex(msg => \r\n          msg._id === optimisticMessage._id\r\n        );\r\n          if (messageIndex !== -1) {\r\n          const updatedMessages = [...conversationMessages];\r\n          updatedMessages[messageIndex] = {\r\n            ...updatedMessages[messageIndex],\r\n            error: true,\r\n            errorMessage: 'Failed to send message'\r\n          };\r\n          \r\n          return {\r\n            ...prev,\r\n            [selectedUser._id]: updatedMessages\r\n          };\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleTyping = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessage(e.target.value);\r\n    \r\n    if (selectedUser) {\r\n      // Clear existing timeout\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n\r\n      // Send typing status\r\n      socketService.sendTypingStatus(selectedUser._id, true);\r\n\r\n      // Set new timeout\r\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\r\n        socketService.sendTypingStatus(selectedUser._id, false);\r\n      }, 2000);\r\n    }\r\n  };\r\n  const formatTime = (date: Date | string) => {\r\n    try {\r\n      const messageDate = new Date(date);\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(messageDate.getTime())) {\r\n        return 'Invalid date';\r\n      }\r\n\r\n      const now = new Date();\r\n      const diffMs = now.getTime() - messageDate.getTime();\r\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\r\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\r\n\r\n      if (diffMinutes < 1) {\r\n        return 'Vừa xong';\r\n      } else if (diffMinutes < 60) {\r\n        return `${diffMinutes} phút trước`;\r\n      } else if (diffHours < 24) {\r\n        return `${diffHours} giờ trước`;\r\n      } else if (diffDays < 7) {\r\n        return `${diffDays} ngày trước`;\r\n      } else {\r\n        return messageDate.toLocaleDateString('vi-VN');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error formatting time:', error);\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n\r\n  const formatFullDateTime = (date: Date | string) => {\r\n    try {\r\n      const messageDate = new Date(date);\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(messageDate.getTime())) {\r\n        return 'Invalid date';\r\n      }\r\n\r\n      return messageDate.toLocaleString('vi-VN', {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long', \r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n      });\r\n    } catch (error) {\r\n      console.error('Error formatting full date time:', error);\r\n      return 'Invalid date';\r\n    }  };\r\n  const currentMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\r\n  // Filter users based on search query\r\n  const filteredUsers = activeUsers.filter(chatUser => \r\n    chatUser.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"messenger-chat-page\">\r\n      <Row gutter={16} style={{ height: '100%' }}>        <Col xs={24} sm={8} md={6} lg={6} xl={5}>\r\n          <Card \r\n            title={\r\n              <Input\r\n                placeholder=\"Search users by name...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                style={{ width: '100%' }}\r\n                allowClear\r\n              />\r\n            }\r\n            className=\"users-card\"\r\n            bodyStyle={{ padding: 0 }}\r\n          >            <List\r\n              dataSource={filteredUsers}\r\n              renderItem={(chatUser) => (\r\n                <List.Item\r\n                  className={`user-item ${selectedUser?._id === chatUser._id ? 'selected' : ''}`}\r\n                  onClick={() => setSelectedUser(chatUser)}\r\n                >\r\n                  <List.Item.Meta\r\n                    avatar={\r\n                      <Badge \r\n                        dot \r\n                        status={chatUser.isOnline ? 'success' : 'default'}\r\n                        offset={[-2, 32]}\r\n                      >\r\n                        <Avatar \r\n                          icon={<UserOutlined />} \r\n                          src={chatUser.avatar}\r\n                          size=\"large\"\r\n                        />\r\n                      </Badge>\r\n                    }\r\n                    title={<Text strong>{chatUser.username}</Text>}\r\n                    description={\r\n                      typing[chatUser._id] ? (\r\n                        <Text type=\"success\">Typing...</Text>\r\n                      ) : chatUser.isOnline ? (\r\n                        <Text type=\"success\">Online</Text>\r\n                      ) : chatUser.lastSeen ? (\r\n                        <Text type=\"secondary\">\r\n                          Last seen at {formatTime(chatUser.lastSeen)}\r\n                        </Text>\r\n                      ) : null\r\n                    }\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col xs={24} sm={16} md={18} lg={18} xl={19}>\r\n          {selectedUser ? (\r\n            <Card\r\n              className=\"chat-card\"              title={\r\n                <Space>\r\n                  <Badge \r\n                    dot \r\n                    status={selectedUser.isOnline ? 'success' : 'default'}\r\n                    offset={[-2, 32]}\r\n                  >\r\n                    <Avatar \r\n                      icon={<UserOutlined />} \r\n                      src={selectedUser.avatar}\r\n                      size=\"large\"\r\n                    />\r\n                  </Badge>\r\n                  <span>{selectedUser.username}</span>\r\n                  {typing[selectedUser._id] && (\r\n                    <Text type=\"secondary\" italic>typing...</Text>\r\n                  )}\r\n                  {!socketConnected && (\r\n                    <Text type=\"warning\" style={{ fontSize: '12px', marginLeft: '8px' }}>\r\n                      ⚠️ Reconnecting...\r\n                    </Text>\r\n                  )}\r\n                </Space>\r\n              }\r\n              style={{\r\n                height: 'calc(100vh - 200px)'\r\n              }}\r\n            >\r\n              <div className=\"messages-container\">\r\n                <List\r\n                  dataSource={currentMessages}                  renderItem={(msg) => {\r\n                    const senderId = typeof msg.sender === 'string' ? msg.sender : msg.sender._id;\r\n                    const isOwnMessage = String(user?._id) === String(senderId);\r\n                    const isOptimistic = msg._id.startsWith('temp_');\r\n                    \r\n                    return (<List.Item\r\n                        key={msg._id}\r\n                        className={`message-item ${isOwnMessage ? 'own-message' : 'other-message'}`}\r\n                      >\r\n                        <div className=\"message-content\">\r\n                          <Tooltip \r\n                            title={formatFullDateTime(msg.timestamp)}\r\n                            placement={isOwnMessage ? 'left' : 'right'}\r\n                          >\r\n                            <div \r\n                              className=\"message-bubble\"\r\n                              style={{\r\n                                backgroundColor: isOwnMessage ? '#1890ff' : '#e4e6eb',\r\n                                color: isOwnMessage ? '#ffffff' : '#000000',\r\n                                opacity: isOptimistic ? 0.7 : 1, // Show optimistic messages as slightly transparent\r\n                                transition: 'opacity 0.2s ease' // Smooth transition when message is confirmed\r\n                              }}\r\n                            >                              <Text style={{ color: 'inherit' }}>{msg.content}</Text>\r\n                              {isOptimistic && !msg.error && (\r\n                                <Text style={{ \r\n                                  color: 'inherit', \r\n                                  fontSize: '10px', \r\n                                  marginLeft: '8px',\r\n                                  opacity: 0.8 \r\n                                }}>\r\n                                  ⏳\r\n                                </Text>\r\n                              )}\r\n                              {msg.error && (\r\n                                <Text \r\n                                  style={{ \r\n                                    color: 'inherit', \r\n                                    fontSize: '10px', \r\n                                    marginLeft: '8px',\r\n                                    opacity: 0.8,\r\n                                    cursor: 'pointer'\r\n                                  }}\r\n                                  title={msg.errorMessage || 'Failed to send'}\r\n                                  onClick={() => {\r\n                                    // Retry sending the message\r\n                                    socketService.sendMessage(selectedUser._id, msg.content);\r\n                                    // Remove error status\r\n                                    setMessagesByConversation(prev => {\r\n                                      const conversationMessages = prev[selectedUser._id] || [];\r\n                                      const messageIndex = conversationMessages.findIndex(m => m._id === msg._id);\r\n                                      if (messageIndex !== -1) {\r\n                                        const updatedMessages = [...conversationMessages];\r\n                                        updatedMessages[messageIndex] = {\r\n                                          ...updatedMessages[messageIndex],\r\n                                          error: false,\r\n                                          errorMessage: undefined\r\n                                        };\r\n                                        return {\r\n                                          ...prev,\r\n                                          [selectedUser._id]: updatedMessages\r\n                                        };\r\n                                      }\r\n                                      return prev;\r\n                                    });\r\n                                  }}\r\n                                >\r\n                                  ❌\r\n                                </Text>\r\n                              )}\r\n                            </div>\r\n                          </Tooltip>\r\n                          <Text type=\"secondary\" className=\"message-time\">\r\n                            {formatTime(new Date(msg.timestamp))}\r\n                          </Text>\r\n                        </div>\r\n                      </List.Item>\r\n                    );\r\n                  }}\r\n                />\r\n                <div ref={messagesEndRef} />\r\n              </div>\r\n\r\n              <Divider style={{ margin: 0 }} />\r\n\r\n              <div className=\"message-input-container\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                  <TextArea\r\n                    value={message}\r\n                    onChange={handleTyping}\r\n                    onKeyPress={handleKeyPress}\r\n                    placeholder=\"Type a message...\"\r\n                    autoSize={{ minRows: 1, maxRows: 4 }}\r\n                    style={{ resize: 'none' }}\r\n                  />\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<SendOutlined />}\r\n                    onClick={handleSendMessage}\r\n                    disabled={!message.trim()}\r\n                  >\r\n                    Send\r\n                  </Button>\r\n                </Space.Compact>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <Card className=\"no-chat-selected\">\r\n              <div style={{ textAlign: 'center', padding: '60px 20px' }}>\r\n                <MessageOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\r\n                <Title level={4} type=\"secondary\">Select a conversation to start chatting</Title>\r\n                <Text type=\"secondary\">\r\n                  Choose from your existing conversations on the left or start a new one.\r\n                </Text>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessengerChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}