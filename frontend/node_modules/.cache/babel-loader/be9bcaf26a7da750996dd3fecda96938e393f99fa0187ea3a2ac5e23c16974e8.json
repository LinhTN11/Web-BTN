{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { userAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [adminData, setAdminData] = useState({\n    users: [],\n    lastFetched: 0,\n    isLoading: false\n  });\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const savedUser = localStorage.getItem('user');\n    const savedToken = localStorage.getItem('token');\n    if (savedUser && savedToken) {\n      const parsedUser = JSON.parse(savedUser);\n      setUser(parsedUser);\n      setToken(savedToken);\n      setIsAuthenticated(true); // If user is admin, preload data immediately and aggressively\n      if (parsedUser.role === 'admin') {\n        // Set loading to true first, then preload\n        preloadAdminData(true);\n      }\n    }\n  }, []);\n  const preloadAdminData = async (forceRefresh = false) => {\n    try {\n      // Check if cache is still valid\n      const now = Date.now();\n      if (!forceRefresh && now - adminData.lastFetched < CACHE_DURATION && adminData.users.length > 0) {\n        return;\n      }\n      setAdminData(prev => ({\n        ...prev,\n        isLoading: true\n      }));\n      const usersData = await userAPI.getAllUsers();\n      setAdminData({\n        users: usersData,\n        lastFetched: now,\n        isLoading: false\n      });\n    } catch (error) {\n      console.error('Error preloading admin data:', error);\n      setAdminData(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n    }\n  };\n  const login = async (userData, accessToken) => {\n    setUser(userData);\n    setToken(accessToken);\n    setIsAuthenticated(true);\n    localStorage.setItem('user', JSON.stringify(userData));\n    localStorage.setItem('token', accessToken);\n\n    // If user is admin, preload data immediately after login\n    if (userData.role === 'admin') {\n      await preloadAdminData();\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n    setAdminData({\n      users: [],\n      lastFetched: 0,\n      isLoading: false\n    });\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n  const updateUser = updatedUserData => {\n    if (user) {\n      const newUser = {\n        ...user,\n        ...updatedUserData\n      };\n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n    }\n  };\n  const refreshUserData = async () => {\n    if (user && token) {\n      try {\n        const userData = await userAPI.getCurrentUser();\n        updateUser(userData);\n\n        // If user is admin, refresh admin data too\n        if (userData.role === 'admin') {\n          await preloadAdminData();\n        }\n      } catch (error) {\n        console.error('Error refreshing user data:', error);\n      }\n    }\n  };\n  const getUsers = () => {\n    return adminData.users;\n  };\n  const refreshUsers = async () => {\n    if ((user === null || user === void 0 ? void 0 : user.role) === 'admin') {\n      await preloadAdminData();\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    login,\n    logout,\n    updateUser,\n    token,\n    refreshUserData,\n    getUsers,\n    refreshUsers\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"KMDTO/R1uu02KKMnw8FOpBn+Bog=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","userAPI","jsxDEV","_jsxDEV","CACHE_DURATION","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","adminData","setAdminData","users","lastFetched","isLoading","savedUser","localStorage","getItem","savedToken","parsedUser","JSON","parse","role","preloadAdminData","forceRefresh","now","Date","length","prev","usersData","getAllUsers","error","console","login","userData","accessToken","setItem","stringify","logout","removeItem","updateUser","updatedUserData","newUser","refreshUserData","getCurrentUser","getUsers","refreshUsers","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, AuthContextType } from '../types';\r\nimport { userAPI } from '../services/api';\r\n\r\ninterface AdminData {\r\n  users: User[];\r\n  lastFetched: number;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [adminData, setAdminData] = useState<AdminData>({ users: [], lastFetched: 0, isLoading: false });\r\n  useEffect(() => {\r\n    // Check if user is logged in on app start\r\n    const savedUser = localStorage.getItem('user');\r\n    const savedToken = localStorage.getItem('token');\r\n    \r\n    if (savedUser && savedToken) {\r\n      const parsedUser = JSON.parse(savedUser);\r\n      setUser(parsedUser);\r\n      setToken(savedToken);\r\n      setIsAuthenticated(true);      // If user is admin, preload data immediately and aggressively\r\n      if (parsedUser.role === 'admin') {\r\n        // Set loading to true first, then preload\r\n        preloadAdminData(true);\r\n      }\r\n    }\r\n  }, []);  const preloadAdminData = async (forceRefresh = false) => {\r\n    try {\r\n      // Check if cache is still valid\r\n      const now = Date.now();\r\n      if (!forceRefresh && now - adminData.lastFetched < CACHE_DURATION && adminData.users.length > 0) {\r\n        return;\r\n      }\r\n\r\n      setAdminData(prev => ({ ...prev, isLoading: true }));\r\n      const usersData = await userAPI.getAllUsers();\r\n      setAdminData({\r\n        users: usersData,\r\n        lastFetched: now,\r\n        isLoading: false\r\n      });\r\n    } catch (error) {\r\n      console.error('Error preloading admin data:', error);\r\n      setAdminData(prev => ({ ...prev, isLoading: false }));\r\n    }\r\n  };\r\n\r\n  const login = async (userData: User, accessToken: string) => {\r\n    setUser(userData);\r\n    setToken(accessToken);\r\n    setIsAuthenticated(true);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    localStorage.setItem('token', accessToken);\r\n\r\n    // If user is admin, preload data immediately after login\r\n    if (userData.role === 'admin') {\r\n      await preloadAdminData();\r\n    }\r\n  };  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setAdminData({ users: [], lastFetched: 0, isLoading: false });\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n  };\r\n  const updateUser = (updatedUserData: Partial<User>) => {\r\n    if (user) {\r\n      const newUser = { ...user, ...updatedUserData };\r\n      setUser(newUser);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n    }\r\n  };\r\n\r\n  const refreshUserData = async () => {\r\n    if (user && token) {\r\n      try {\r\n        const userData = await userAPI.getCurrentUser();\r\n        updateUser(userData);\r\n\r\n        // If user is admin, refresh admin data too\r\n        if (userData.role === 'admin') {\r\n          await preloadAdminData();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error refreshing user data:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getUsers = () => {\r\n    return adminData.users;\r\n  };\r\n\r\n  const refreshUsers = async () => {\r\n    if (user?.role === 'admin') {\r\n      await preloadAdminData();\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    updateUser,\r\n    token,\r\n    refreshUserData,\r\n    getUsers,\r\n    refreshUsers\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}