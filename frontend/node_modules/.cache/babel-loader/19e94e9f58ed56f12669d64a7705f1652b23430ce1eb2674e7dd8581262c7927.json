{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.messageCallbacks = [];\n    this.userOnlineCallbacks = [];\n    this.userOfflineCallbacks = [];\n    this.typingCallbacks = [];\n    this.heartbeatInterval = null;\n    this.lastToken = '';\n  }\n  connect(token) {\n    this.lastToken = token;\n    if (!this.socket || this.socket.disconnected) {\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\n        auth: {\n          token\n        },\n        transports: ['websocket'],\n        // Chỉ sử dụng websocket để giảm overhead\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionAttempts: 5,\n        timeout: 10000\n      });\n      this.socket.on('connect', () => {\n        console.log('Socket connected');\n        this.startHeartbeat();\n        if (this.lastToken) {\n          var _this$socket;\n          (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.emit('rejoin', {\n            token: this.lastToken\n          });\n        }\n      });\n      this.socket.on('reconnect', attemptNumber => {\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\n        this.startHeartbeat();\n      });\n      this.socket.on('reconnect_attempt', attemptNumber => {\n        console.log('Reconnection attempt:', attemptNumber);\n      });\n      this.socket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        if (reason === 'transport close' || reason === 'transport error' || reason === 'ping timeout') {\n          console.log('Temporary disconnect, socket will try to reconnect...');\n          setTimeout(() => {\n            var _this$socket2;\n            if (!((_this$socket2 = this.socket) !== null && _this$socket2 !== void 0 && _this$socket2.connected)) {\n              console.log('Force reconnecting socket after disconnect...');\n              this.forceReconnect(this.lastToken);\n            }\n          }, 2000);\n        } else {\n          console.log('Permanent disconnect:', reason);\n        }\n      });\n      this.socket.on('reconnect_failed', () => {\n        console.error('Socket failed to reconnect after all attempts');\n      });\n      this.socket.on('reconnect_error', error => {\n        console.error('Socket reconnection error:', error);\n      });\n\n      // Message events\n      this.socket.on('newMessage', message => {\n        var _this$socket3, _this$socket4;\n        console.log('Received new message:', message, 'Current user:', (_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.id, 'Auth:', (_this$socket4 = this.socket) === null || _this$socket4 === void 0 ? void 0 : _this$socket4.auth);\n        // Gọi callback để cập nhật UI ngay lập tức\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageConfirmed', message => {\n        var _this$socket5, _this$socket6;\n        console.log('Message confirmed:', message, 'Current user:', (_this$socket5 = this.socket) === null || _this$socket5 === void 0 ? void 0 : _this$socket5.id, 'Auth:', (_this$socket6 = this.socket) === null || _this$socket6 === void 0 ? void 0 : _this$socket6.auth);\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageError', error => {\n        console.error('Message error:', error);\n      }); // User status events\n      this.socket.on('userOnline', userId => {\n        this.userOnlineCallbacks.forEach(callback => callback(userId));\n      });\n      this.socket.on('userOffline', userId => {\n        this.userOfflineCallbacks.forEach(callback => callback(userId));\n      });\n\n      // Typing events\n      this.socket.on('userTyping', data => {\n        this.typingCallbacks.forEach(callback => callback(data));\n      });\n      this.socket.on('ping', () => {\n        var _this$socket7;\n        // Khi nhận được ping từ server, gửi lại pong để giữ kết nối\n        (_this$socket7 = this.socket) === null || _this$socket7 === void 0 ? void 0 : _this$socket7.emit('pong');\n        // Reset lại heartbeat để đảm bảo không bị timeout\n        this.startHeartbeat();\n      });\n    }\n    return this.socket;\n  }\n  disconnect() {\n    this.stopHeartbeat();\n    if (this.socket) {\n      this.socket.removeAllListeners();\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  forceReconnect(token) {\n    console.log('Force reconnecting socket...');\n    this.disconnect();\n    return this.connect(token);\n  }\n  isConnected() {\n    return this.socket && this.socket.connected;\n  }\n  startHeartbeat() {\n    this.stopHeartbeat();\n    this.heartbeatInterval = setInterval(() => {\n      var _this$socket8;\n      if ((_this$socket8 = this.socket) !== null && _this$socket8 !== void 0 && _this$socket8.connected) {\n        this.socket.emit('heartbeat');\n      } else {\n        this.stopHeartbeat();\n      }\n    }, 30000); // Tăng interval lên 30s để giảm tải server\n  }\n  stopHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n  sendMessage(receiverId, content, messageType = 'text') {\n    if (this.socket) {\n      this.socket.emit('sendMessage', {\n        receiverId,\n        content,\n        messageType\n      });\n    }\n  }\n  onMessage(callback) {\n    this.messageCallbacks.push(callback);\n    return () => this.removeMessageCallback(callback);\n  }\n  onUserOnline(callback) {\n    this.userOnlineCallbacks.push(callback);\n    return () => this.removeUserOnlineCallback(callback);\n  }\n  onUserOffline(callback) {\n    this.userOfflineCallbacks.push(callback);\n    return () => this.removeUserOfflineCallback(callback);\n  }\n\n  // Keep for backward compatibility\n  onUserStatus(callback) {\n    return this.onUserOnline(callback);\n  }\n  onTyping(callback) {\n    this.typingCallbacks.push(callback);\n    return () => this.removeTypingCallback(callback);\n  }\n  sendTypingStatus(receiverId, isTyping) {\n    if (this.socket) {\n      this.socket.emit('typing', {\n        receiverId,\n        isTyping\n      });\n    }\n  }\n  markAsRead(senderId) {\n    if (this.socket) {\n      this.socket.emit('markAsRead', {\n        senderId\n      });\n    }\n  }\n  off(event) {\n    if (this.socket) {\n      this.socket.off(event);\n    }\n  }\n  getSocket() {\n    return this.socket;\n  }\n  removeMessageCallback(callback) {\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\n  }\n  removeUserOnlineCallback(callback) {\n    this.userOnlineCallbacks = this.userOnlineCallbacks.filter(cb => cb !== callback);\n  }\n  removeUserOfflineCallback(callback) {\n    this.userOfflineCallbacks = this.userOfflineCallbacks.filter(cb => cb !== callback);\n  }\n  removeTypingCallback(callback) {\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","messageCallbacks","userOnlineCallbacks","userOfflineCallbacks","typingCallbacks","heartbeatInterval","lastToken","connect","token","disconnected","process","env","REACT_APP_API_URL","auth","transports","reconnection","reconnectionDelay","reconnectionAttempts","timeout","on","console","log","startHeartbeat","_this$socket","emit","attemptNumber","error","reason","setTimeout","_this$socket2","connected","forceReconnect","message","_this$socket3","_this$socket4","id","forEach","callback","_this$socket5","_this$socket6","userId","data","_this$socket7","disconnect","stopHeartbeat","removeAllListeners","isConnected","setInterval","_this$socket8","clearInterval","sendMessage","receiverId","content","messageType","onMessage","push","removeMessageCallback","onUserOnline","removeUserOnlineCallback","onUserOffline","removeUserOfflineCallback","onUserStatus","onTyping","removeTypingCallback","sendTypingStatus","isTyping","markAsRead","senderId","off","event","getSocket","filter","cb","socketService"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nimport { Message, ChatUser } from './chatService';\r\n\r\ntype MessageCallback = (message: Message) => void;\r\ntype UserOnlineCallback = (userId: string) => void;\r\ntype UserOfflineCallback = (userId: string) => void;\r\ntype TypingCallback = (data: { userId: string, isTyping: boolean }) => void;\r\n\r\nclass SocketService {\r\n  private socket: Socket | null = null;\r\n  private messageCallbacks: MessageCallback[] = [];\r\n  private userOnlineCallbacks: UserOnlineCallback[] = [];\r\n  private userOfflineCallbacks: UserOfflineCallback[] = [];\r\n  private typingCallbacks: TypingCallback[] = [];\r\n  private heartbeatInterval: NodeJS.Timeout | null = null;\r\n  private lastToken: string = '';\r\n\r\n  connect(token: string) {\r\n    this.lastToken = token;\r\n    if (!this.socket || this.socket.disconnected) {\r\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\r\n        auth: { token },\r\n        transports: ['websocket'], // Chỉ sử dụng websocket để giảm overhead\r\n        reconnection: true,\r\n        reconnectionDelay: 1000,\r\n        reconnectionAttempts: 5,\r\n        timeout: 10000\r\n      });\r\n      this.socket.on('connect', () => {\r\n        console.log('Socket connected');\r\n        this.startHeartbeat();\r\n        if (this.lastToken) {\r\n          this.socket?.emit('rejoin', { token: this.lastToken });\r\n        }\r\n      });\r\n\r\n      this.socket.on('reconnect', (attemptNumber) => {\r\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\r\n        this.startHeartbeat();\r\n      });\r\n\r\n      this.socket.on('reconnect_attempt', (attemptNumber) => {\r\n        console.log('Reconnection attempt:', attemptNumber);\r\n      });\r\n\r\n      this.socket.on('connect_error', (error: Error) => {\r\n        console.error('Socket connection error:', error);\r\n      });      this.socket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        if (reason === 'transport close' || \r\n            reason === 'transport error' || \r\n            reason === 'ping timeout') {\r\n          console.log('Temporary disconnect, socket will try to reconnect...');\r\n          setTimeout(() => {\r\n            if (!this.socket?.connected) {\r\n              console.log('Force reconnecting socket after disconnect...');\r\n              this.forceReconnect(this.lastToken);\r\n            }\r\n          }, 2000);\r\n        } else {\r\n          console.log('Permanent disconnect:', reason);\r\n        }\r\n      });      this.socket.on('reconnect_failed', () => {\r\n        console.error('Socket failed to reconnect after all attempts');\r\n      });\r\n\r\n      this.socket.on('reconnect_error', (error) => {\r\n        console.error('Socket reconnection error:', error);\r\n      });\r\n\r\n      // Message events\r\n      this.socket.on('newMessage', (message: Message) => {\r\n        console.log('Received new message:', message, 'Current user:', this.socket?.id, 'Auth:', this.socket?.auth);\r\n        // Gọi callback để cập nhật UI ngay lập tức\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageConfirmed', (message: Message) => {\r\n        console.log('Message confirmed:', message, 'Current user:', this.socket?.id, 'Auth:', this.socket?.auth);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageError', (error: { error: string }) => {\r\n        console.error('Message error:', error);\r\n      });      // User status events\r\n      this.socket.on('userOnline', (userId: string) => {\r\n        this.userOnlineCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      this.socket.on('userOffline', (userId: string) => {\r\n        this.userOfflineCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      // Typing events\r\n      this.socket.on('userTyping', (data: { userId: string, isTyping: boolean }) => {\r\n        this.typingCallbacks.forEach(callback => callback(data));\r\n      });\r\n\r\n      this.socket.on('ping', () => {\r\n        // Khi nhận được ping từ server, gửi lại pong để giữ kết nối\r\n        this.socket?.emit('pong');\r\n        // Reset lại heartbeat để đảm bảo không bị timeout\r\n        this.startHeartbeat();\r\n      });\r\n    }\r\n    return this.socket;\r\n  }  disconnect() {\r\n    this.stopHeartbeat();\r\n    if (this.socket) {\r\n      this.socket.removeAllListeners();\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  forceReconnect(token: string) {\r\n    console.log('Force reconnecting socket...');\r\n    this.disconnect();\r\n    return this.connect(token);\r\n  }\r\n\r\n  isConnected() {\r\n    return this.socket && this.socket.connected;\r\n  }\r\n  private startHeartbeat() {\r\n    this.stopHeartbeat();\r\n    this.heartbeatInterval = setInterval(() => {\r\n      if (this.socket?.connected) {\r\n        this.socket.emit('heartbeat');\r\n      } else {\r\n        this.stopHeartbeat();\r\n      }\r\n    }, 30000); // Tăng interval lên 30s để giảm tải server\r\n  }\r\n\r\n  private stopHeartbeat() {\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval);\r\n      this.heartbeatInterval = null;\r\n    }\r\n  }\r\n\r\n  sendMessage(receiverId: string, content: string, messageType: string = 'text') {\r\n    if (this.socket) {\r\n      this.socket.emit('sendMessage', { receiverId, content, messageType });\r\n    }\r\n  }\r\n  onMessage(callback: MessageCallback) {\r\n    this.messageCallbacks.push(callback);\r\n    return () => this.removeMessageCallback(callback);\r\n  }\r\n\r\n  onUserOnline(callback: UserOnlineCallback) {\r\n    this.userOnlineCallbacks.push(callback);\r\n    return () => this.removeUserOnlineCallback(callback);\r\n  }\r\n\r\n  onUserOffline(callback: UserOfflineCallback) {\r\n    this.userOfflineCallbacks.push(callback);\r\n    return () => this.removeUserOfflineCallback(callback);\r\n  }\r\n\r\n  // Keep for backward compatibility\r\n  onUserStatus(callback: UserOnlineCallback) {\r\n    return this.onUserOnline(callback);\r\n  }\r\n\r\n  onTyping(callback: TypingCallback) {\r\n    this.typingCallbacks.push(callback);\r\n    return () => this.removeTypingCallback(callback);\r\n  }\r\n\r\n  sendTypingStatus(receiverId: string, isTyping: boolean) {\r\n    if (this.socket) {\r\n      this.socket.emit('typing', { receiverId, isTyping });\r\n    }\r\n  }\r\n\r\n  markAsRead(senderId: string) {\r\n    if (this.socket) {\r\n      this.socket.emit('markAsRead', { senderId });\r\n    }\r\n  }\r\n\r\n  off(event: string) {\r\n    if (this.socket) {\r\n      this.socket.off(event);\r\n    }\r\n  }\r\n\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n  private removeMessageCallback(callback: MessageCallback) {\r\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserOnlineCallback(callback: UserOnlineCallback) {\r\n    this.userOnlineCallbacks = this.userOnlineCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserOfflineCallback(callback: UserOfflineCallback) {\r\n    this.userOfflineCallbacks = this.userOfflineCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeTypingCallback(callback: TypingCallback) {\r\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\r\n  }\r\n}\r\n\r\nexport const socketService = new SocketService();\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}