{"ast":null,"code":"import api from'./api';export const chatService={getMessages:async userId=>{const response=await api.get(\"/v1/chat/conversation/\".concat(userId));return response.data.messages;},sendMessage:async function(receiverId,content){let messageType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'text';const response=await api.post('/v1/chat/send',{receiverId,content,messageType});return response.data;},markAsRead:async senderId=>{await api.post('/v1/chat/read',{senderId});},getActiveUsers:async()=>{const response=await api.get('/v1/chat/users');return response.data;},getConversations:async()=>{const response=await api.get('/v1/chat/conversations');return response.data;},getUnreadCount:async()=>{const response=await api.get('/v1/chat/unread-count');return response.data.unreadCount;}};export default chatService;","map":{"version":3,"names":["api","chatService","getMessages","userId","response","get","concat","data","messages","sendMessage","receiverId","content","messageType","arguments","length","undefined","post","markAsRead","senderId","getActiveUsers","getConversations","getUnreadCount","unreadCount"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/chatService.ts"],"sourcesContent":["import api from './api';\r\n\r\nexport interface MessageUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface Message {\r\n  _id: string;\r\n  content: string;\r\n  sender: string | MessageUser;\r\n  receiver: string | MessageUser;\r\n  messageType: 'text' | 'image' | 'file';\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\nexport interface ChatUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n  isOnline: boolean;\r\n  lastSeen?: Date;\r\n}\r\n\r\nexport const chatService = {\r\n  getMessages: async (userId: string): Promise<Message[]> => {\r\n    const response = await api.get(`/v1/chat/conversation/${userId}`);\r\n    return response.data.messages;\r\n  },\r\n\r\n  sendMessage: async (receiverId: string, content: string, messageType: string = 'text'): Promise<Message> => {\r\n    const response = await api.post('/v1/chat/send', {\r\n      receiverId,\r\n      content,\r\n      messageType\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  markAsRead: async (senderId: string): Promise<void> => {\r\n    await api.post('/v1/chat/read', { senderId });\r\n  },\r\n  getActiveUsers: async (): Promise<ChatUser[]> => {\r\n    const response = await api.get('/v1/chat/users');\r\n    return response.data;\r\n  },\r\n\r\n  getConversations: async (): Promise<{\r\n    user: ChatUser;\r\n    lastMessage: Message | null;\r\n    unreadCount: number;\r\n  }[]> => {\r\n    const response = await api.get('/v1/chat/conversations');\r\n    return response.data;\r\n  },\r\n\r\n  getUnreadCount: async (): Promise<number> => {\r\n    const response = await api.get('/v1/chat/unread-count');\r\n    return response.data.unreadCount;\r\n  }\r\n};\r\n\r\nexport default chatService;"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CA0BvB,MAAO,MAAM,CAAAC,WAAW,CAAG,CACzBC,WAAW,CAAE,KAAO,CAAAC,MAAc,EAAyB,CACzD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,GAAG,0BAAAC,MAAA,CAA0BH,MAAM,CAAE,CAAC,CACjE,MAAO,CAAAC,QAAQ,CAACG,IAAI,CAACC,QAAQ,CAC/B,CAAC,CAEDC,WAAW,CAAE,cAAAA,CAAOC,UAAkB,CAAEC,OAAe,CAAqD,IAAnD,CAAAC,WAAmB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,CACnF,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACgB,IAAI,CAAC,eAAe,CAAE,CAC/CN,UAAU,CACVC,OAAO,CACPC,WACF,CAAC,CAAC,CACF,MAAO,CAAAR,QAAQ,CAACG,IAAI,CACtB,CAAC,CAEDU,UAAU,CAAE,KAAO,CAAAC,QAAgB,EAAoB,CACrD,KAAM,CAAAlB,GAAG,CAACgB,IAAI,CAAC,eAAe,CAAE,CAAEE,QAAS,CAAC,CAAC,CAC/C,CAAC,CACDC,cAAc,CAAE,KAAAA,CAAA,GAAiC,CAC/C,KAAM,CAAAf,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,GAAG,CAAC,gBAAgB,CAAC,CAChD,MAAO,CAAAD,QAAQ,CAACG,IAAI,CACtB,CAAC,CAEDa,gBAAgB,CAAE,KAAAA,CAAA,GAIV,CACN,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,GAAG,CAAC,wBAAwB,CAAC,CACxD,MAAO,CAAAD,QAAQ,CAACG,IAAI,CACtB,CAAC,CAEDc,cAAc,CAAE,KAAAA,CAAA,GAA6B,CAC3C,KAAM,CAAAjB,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,GAAG,CAAC,uBAAuB,CAAC,CACvD,MAAO,CAAAD,QAAQ,CAACG,IAAI,CAACe,WAAW,CAClC,CACF,CAAC,CAED,cAAe,CAAArB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}