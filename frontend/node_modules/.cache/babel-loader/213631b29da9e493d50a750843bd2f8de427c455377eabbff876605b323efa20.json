{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { userAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const savedUser = localStorage.getItem('user');\n      const savedToken = localStorage.getItem('token');\n      if (savedUser && savedToken) {\n        setUser(JSON.parse(savedUser));\n        setToken(savedToken);\n        setIsAuthenticated(true);\n\n        // Immediately refresh user data after initial load\n        try {\n          const userData = await userAPI.getCurrentUser();\n          setUser(userData);\n          localStorage.setItem('user', JSON.stringify(userData));\n        } catch (error) {\n          console.error('Failed to refresh initial user data:', error);\n        }\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n  const login = (userData, accessToken) => {\n    setUser(userData);\n    setToken(accessToken);\n    setIsAuthenticated(true);\n    localStorage.setItem('user', JSON.stringify(userData));\n    localStorage.setItem('token', accessToken);\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n  const updateUser = updatedUserData => {\n    if (user) {\n      const newUser = {\n        ...user,\n        ...updatedUserData\n      };\n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n    }\n  };\n  const refreshUserData = async () => {\n    if (user && token) {\n      try {\n        const userData = await userAPI.getCurrentUser();\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n      } catch (error) {\n        console.error('Failed to refresh user data:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Initial refresh right after auth state changes\n      refreshUserData();\n      const interval = setInterval(() => {\n        refreshUserData();\n      }, 15000); // Check every 15 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [isAuthenticated, user]);\n  const value = {\n    user,\n    isAuthenticated,\n    login,\n    logout,\n    updateUser,\n    token,\n    loading\n  };\n  if (loading) {\n    // Return minimal loading state to prevent flashing\n    return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"UGi0sCKWnJBHu/RWG+yMEhn+mYg=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","userAPI","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","loading","setLoading","initializeAuth","savedUser","localStorage","getItem","savedToken","JSON","parse","userData","getCurrentUser","setItem","stringify","error","console","login","accessToken","logout","removeItem","updateUser","updatedUserData","newUser","refreshUserData","interval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, AuthContextType } from '../types';\r\nimport { userAPI } from '../services/api';\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;  \r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      const savedUser = localStorage.getItem('user');\r\n      const savedToken = localStorage.getItem('token');\r\n      \r\n      if (savedUser && savedToken) {\r\n        setUser(JSON.parse(savedUser));\r\n        setToken(savedToken);\r\n        setIsAuthenticated(true);\r\n        \r\n        // Immediately refresh user data after initial load\r\n        try {\r\n          const userData = await userAPI.getCurrentUser();\r\n          setUser(userData);\r\n          localStorage.setItem('user', JSON.stringify(userData));\r\n        } catch (error) {\r\n          console.error('Failed to refresh initial user data:', error);\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const login = (userData: User, accessToken: string) => {\r\n    setUser(userData);\r\n    setToken(accessToken);\r\n    setIsAuthenticated(true);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    localStorage.setItem('token', accessToken);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  const updateUser = (updatedUserData: Partial<User>) => {\r\n    if (user) {\r\n      const newUser = { ...user, ...updatedUserData };\r\n      setUser(newUser);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n    }\r\n  };\r\n\r\n  const refreshUserData = async () => {\r\n    if (user && token) {\r\n      try {\r\n        const userData = await userAPI.getCurrentUser();\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n      } catch (error) {\r\n        console.error('Failed to refresh user data:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && user) {\r\n      // Initial refresh right after auth state changes\r\n      refreshUserData();\r\n      \r\n      const interval = setInterval(() => {\r\n        refreshUserData();\r\n      }, 15000); // Check every 15 seconds\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isAuthenticated, user]);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    updateUser,\r\n    token,\r\n    loading\r\n  };\r\n\r\n  if (loading) {\r\n    // Return minimal loading state to prevent flashing\r\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}