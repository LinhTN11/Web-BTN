{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\Components\\\\Chat\\\\MessengerChatPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Card, Typography, Input, Button, List, Avatar, Space, Divider, Badge, Row, Col, Tooltip } from 'antd';\nimport { SendOutlined, UserOutlined, MessageOutlined } from '@ant-design/icons';\nimport { useAuth } from '../../contexts/AuthContext';\nimport socketService from '../../services/socketService';\nimport { chatService } from '../../services/chatService';\nimport './MessengerChatPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst {\n  TextArea\n} = Input;\nconst MessengerChatPage = () => {\n  _s();\n  const {\n    user,\n    token\n  } = useAuth();\n  const [message, setMessage] = useState('');\n  const [messagesByConversation, setMessagesByConversation] = useState({});\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [typing, setTyping] = useState({});\n  const typingTimeoutRef = useRef({});\n  const messagesEndRef = useRef(null);\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const loadMessages = useCallback(async userId => {\n    try {\n      const messages = await chatService.getMessages(userId);\n      console.log('API getMessages for', userId, 'returned', messages);\n\n      // Filter out any invalid messages and sort by timestamp\n      const validMessages = messages.filter(msg => msg && msg.content && typeof msg.content === 'string');\n      const sortedMessages = validMessages.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n      setMessagesByConversation(prev => {\n        const newState = {\n          ...prev,\n          [userId]: sortedMessages\n        };\n        console.log('setMessagesByConversation after loadMessages:', newState);\n        return newState;\n      });\n      scrollToBottom();\n      // Mark messages as read\n      chatService.markAsRead(userId).catch(error => console.error('Error marking messages as read:', error));\n    } catch (error) {\n      console.error('Error loading messages:', error);\n    }\n  }, []);\n  const loadActiveUsers = useCallback(async () => {\n    try {\n      const users = await chatService.getActiveUsers();\n      // Filter out current user\n      const filteredUsers = users.filter(u => u._id !== (user === null || user === void 0 ? void 0 : user._id));\n      setActiveUsers(filteredUsers);\n\n      // Auto-select first user if no user is selected and there are users available\n      if (!selectedUser && filteredUsers.length > 0) {\n        setSelectedUser(filteredUsers[0]);\n      }\n    } catch (error) {\n      console.error('Error loading active users:', error);\n    }\n  }, [user === null || user === void 0 ? void 0 : user._id, selectedUser]);\n  useEffect(() => {\n    if (token && !socketConnected) {\n      console.log('Connecting socket with token');\n      const socket = socketService.connect(`Bearer ${token}`);\n      if (socket) {\n        socket.on('connect', () => {\n          console.log('Socket connected successfully');\n          setSocketConnected(true);\n          // Reload messages when reconnected\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n          loadActiveUsers();\n        });\n        socket.on('reconnect', () => {\n          console.log('Socket reconnected successfully');\n          setSocketConnected(true);\n          // Reload messages when reconnected\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n          loadActiveUsers();\n        });\n        socket.on('connect_error', error => {\n          console.error('Socket connection error:', error);\n          setSocketConnected(false);\n        });\n        socket.on('disconnect', reason => {\n          console.log('Socket disconnected:', reason);\n          // Only set disconnected for permanent disconnections\n          if (reason === 'io server disconnect' || reason === 'io client disconnect') {\n            setSocketConnected(false);\n          }\n          // For temporary disconnections, keep the connected state and let reconnect handle it\n        });\n      }\n      loadActiveUsers();\n      return () => {\n        console.log('Cleaning up socket connection');\n        if (socketService.isConnected()) {\n          socketService.disconnect();\n        }\n        setSocketConnected(false);\n      };\n    }\n  }, [token, loadActiveUsers, selectedUser, loadMessages]);\n  useEffect(() => {\n    if (socketConnected) {\n      const messageHandler = newMessage => {\n        console.log('messageHandler called:', newMessage, 'Current user:', user, 'Selected:', selectedUser);\n\n        // Extract IDs correctly regardless of the format\n        const senderId = typeof newMessage.sender === 'string' ? newMessage.sender : newMessage.sender._id;\n        const receiverId = typeof newMessage.receiver === 'string' ? newMessage.receiver : newMessage.receiver._id;\n        const userId = String(user === null || user === void 0 ? void 0 : user._id);\n\n        // Only update conversation if we're either the sender or receiver\n        if (senderId === userId || receiverId === userId) {\n          // Get the ID of the other person in the conversation\n          const conversationId = senderId === userId ? receiverId : senderId;\n          setMessagesByConversation(prev => {\n            const conversationMessages = prev[conversationId] || [];\n\n            // Check if this is confirming an optimistic message\n            const optimisticIndex = conversationMessages.findIndex(msg => msg._id.startsWith('temp_') && msg.content === newMessage.content && senderId === userId && Math.abs(new Date(msg.timestamp).getTime() - new Date(newMessage.timestamp).getTime()) < 5000 // Within 5 seconds\n            );\n            if (optimisticIndex !== -1) {\n              // Replace optimistic message with real message\n              const updatedMessages = [...conversationMessages];\n              updatedMessages[optimisticIndex] = {\n                ...newMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(newMessage._id)\n              };\n              return {\n                ...prev,\n                [conversationId]: updatedMessages.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime())\n              };\n            }\n\n            // Check if message already exists by ID\n            const exists = conversationMessages.some(msg => String(msg._id) === String(newMessage._id));\n            if (!exists) {\n              // Normalize IDs to string for consistency\n              const normalizedMessage = {\n                ...newMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(newMessage._id)\n              };\n\n              // Sort messages by timestamp\n              const updatedMessages = [...conversationMessages, normalizedMessage].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n              return {\n                ...prev,\n                [conversationId]: updatedMessages\n              };\n            }\n            return prev;\n          });\n        }\n\n        // Only scroll if the message belongs to the currently selected conversation\n        if (selectedUser && (senderId === String(selectedUser._id) || receiverId === String(selectedUser._id))) {\n          scrollToBottom();\n        }\n      };\n      const userOnlineHandler = userId => {\n        console.log('User came online:', userId);\n        setActiveUsers(prev => prev.map(user => user._id === userId ? {\n          ...user,\n          isOnline: true\n        } : user));\n      };\n      const userOfflineHandler = userId => {\n        console.log('User went offline:', userId);\n        setActiveUsers(prev => prev.map(user => user._id === userId ? {\n          ...user,\n          isOnline: false\n        } : user));\n      };\n      const typingHandler = ({\n        userId,\n        isTyping\n      }) => {\n        setTyping(prev => ({\n          ...prev,\n          [userId]: isTyping\n        }));\n      };\n      socketService.onMessage(messageHandler);\n      socketService.onUserOnline(userOnlineHandler);\n      socketService.onUserOffline(userOfflineHandler);\n      socketService.onTyping(typingHandler);\n\n      // Handle message confirmation for sender\n      const messageConfirmedHandler = confirmedMessage => {\n        console.log('messageConfirmedHandler called:', confirmedMessage, 'Current user:', user, 'Selected:', selectedUser);\n\n        // Extract IDs correctly\n        const senderId = typeof confirmedMessage.sender === 'string' ? confirmedMessage.sender : confirmedMessage.sender._id;\n        const receiverId = typeof confirmedMessage.receiver === 'string' ? confirmedMessage.receiver : confirmedMessage.receiver._id;\n        const userId = String(user === null || user === void 0 ? void 0 : user._id);\n\n        // Only handle confirmation for messages sent by current user\n        if (senderId === userId) {\n          const conversationId = receiverId;\n          setMessagesByConversation(prev => {\n            const conversationMessages = prev[conversationId] || [];\n\n            // Find and replace temporary message or add new one if not exists\n            const messageExists = conversationMessages.some(msg => String(msg._id) === String(confirmedMessage._id));\n            if (!messageExists) {\n              // If message doesn't exist, add it\n              const normalizedMessage = {\n                ...confirmedMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(confirmedMessage._id)\n              };\n\n              // Remove any temporary messages with same content\n              const filteredMessages = conversationMessages.filter(msg => !(msg.content === confirmedMessage.content && msg._id.toString().length > 10) // temp IDs are typically longer\n              );\n              const updatedMessages = [...filteredMessages, normalizedMessage].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n              return {\n                ...prev,\n                [conversationId]: updatedMessages\n              };\n            }\n            return prev;\n          });\n\n          // Scroll to bottom if this is the selected conversation\n          if (selectedUser && String(selectedUser._id) === conversationId) {\n            scrollToBottom();\n          }\n        }\n      };\n\n      // Listen for messageConfirmed event\n      if (socketService.getSocket()) {\n        var _socketService$getSoc;\n        (_socketService$getSoc = socketService.getSocket()) === null || _socketService$getSoc === void 0 ? void 0 : _socketService$getSoc.on('messageConfirmed', messageConfirmedHandler);\n      }\n      return () => {\n        socketService.off('newMessage');\n        socketService.off('messageConfirmed');\n        socketService.off('userOnline');\n        socketService.off('userOffline');\n        socketService.off('userTyping');\n        if (socketService.getSocket()) {\n          var _socketService$getSoc2;\n          (_socketService$getSoc2 = socketService.getSocket()) === null || _socketService$getSoc2 === void 0 ? void 0 : _socketService$getSoc2.off('messageConfirmed', messageConfirmedHandler);\n        }\n      };\n    }\n  }, [socketConnected, user, selectedUser]);\n  useEffect(() => {\n    if (selectedUser) {\n      // Fetch messages when selecting user\n      const fetchMessages = async () => {\n        setLoading(true);\n        try {\n          const messages = await chatService.getMessages(selectedUser._id);\n          setMessagesByConversation(prev => ({\n            ...prev,\n            [selectedUser._id]: messages\n          }));\n        } catch (error) {\n          console.error('Error fetching messages:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchMessages();\n    }\n  }, [selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id]);\n\n  // Add periodic refresh\n  useEffect(() => {\n    const refreshInterval = setInterval(async () => {\n      if (selectedUser) {\n        const messages = await chatService.getMessages(selectedUser._id);\n        setMessagesByConversation(prev => ({\n          ...prev,\n          [selectedUser._id]: messages\n        }));\n      }\n    }, 10000); // Refresh every 10 seconds\n\n    return () => clearInterval(refreshInterval);\n  }, [selectedUser]);\n\n  // Add function to refresh users list\n  const refreshUsersList = async () => {\n    try {\n      const users = await chatService.getActiveUsers();\n      setActiveUsers(users);\n    } catch (error) {\n      console.error('Error refreshing users list:', error);\n    }\n  };\n\n  // Refresh users list periodically\n  useEffect(() => {\n    refreshUsersList();\n    const interval = setInterval(refreshUsersList, 30000); // Every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Handle page visibility changes (tab switching)\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        console.log('Page became visible, checking socket connection...');\n\n        // Reconnect socket if needed\n        if (!socketService.isConnected() && token) {\n          console.log('Reconnecting socket after tab switch...');\n          const socket = socketService.connect(`Bearer ${token}`);\n          if (socket) {\n            socket.on('connect', () => {\n              console.log('Reconnected after tab switch');\n              setSocketConnected(true);\n              // Reload data when reconnected\n              loadActiveUsers();\n              if (selectedUser) {\n                loadMessages(selectedUser._id);\n              }\n            });\n          }\n        } else if (socketService.isConnected()) {\n          // Socket is connected, just refresh data\n          console.log('Socket still connected, refreshing data...');\n          loadActiveUsers();\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n        }\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [token, selectedUser, loadActiveUsers, loadMessages]);\n  const handleSendMessage = async () => {\n    if (!message.trim() || !selectedUser || !(user !== null && user !== void 0 && user._id)) return;\n\n    // Check if socket is connected\n    if (!socketService.isConnected()) {\n      console.log('Socket not connected, attempting to reconnect...');\n      const socket = socketService.connect(`Bearer ${token}`);\n      if (socket) {\n        socket.on('connect', () => {\n          console.log('Reconnected, sending message...');\n          setSocketConnected(true);\n          socketService.sendMessage(selectedUser._id, message.trim());\n        });\n      }\n      return;\n    }\n    const content = message.trim();\n    setMessage('');\n\n    // Create optimistic message with proper typing\n    const optimisticMessage = {\n      _id: `temp_${Date.now()}_${Math.random()}`,\n      content,\n      sender: {\n        _id: user._id,\n        username: user.username,\n        avatar: user.avatar\n      },\n      receiver: {\n        _id: selectedUser._id,\n        username: selectedUser.username,\n        avatar: selectedUser.avatar\n      },\n      messageType: 'text',\n      timestamp: new Date(),\n      isRead: false,\n      status: 'sending'\n    };\n\n    // Add optimistic message to UI immediately\n    setMessagesByConversation(prev => ({\n      ...prev,\n      [selectedUser._id]: [...(prev[selectedUser._id] || []), optimisticMessage]\n    }));\n\n    // Scroll to bottom immediately\n    setTimeout(() => scrollToBottom(), 10);\n    try {\n      // Clear typing status\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n      socketService.sendTypingStatus(selectedUser._id, false);\n\n      // Send through socket\n      socketService.sendMessage(selectedUser._id, content);\n\n      // Set a timeout to mark message as failed if not confirmed\n      setTimeout(() => {\n        setMessagesByConversation(prev => {\n          const conversationMessages = prev[selectedUser._id] || [];\n          const messageIndex = conversationMessages.findIndex(msg => msg._id === optimisticMessage._id);\n          if (messageIndex !== -1 && conversationMessages[messageIndex]._id.startsWith('temp_')) {\n            const updatedMessages = [...conversationMessages];\n            updatedMessages[messageIndex] = {\n              ...updatedMessages[messageIndex],\n              status: 'error'\n            };\n            return {\n              ...prev,\n              [selectedUser._id]: updatedMessages\n            };\n          }\n          return prev;\n        });\n      }, 10000);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      // Mark the optimistic message as failed\n      setMessagesByConversation(prev => {\n        const conversationMessages = prev[selectedUser._id] || [];\n        const messageIndex = conversationMessages.findIndex(msg => msg._id === optimisticMessage._id);\n        if (messageIndex !== -1) {\n          const updatedMessages = [...conversationMessages];\n          updatedMessages[messageIndex] = {\n            ...updatedMessages[messageIndex],\n            status: 'error'\n          };\n          return {\n            ...prev,\n            [selectedUser._id]: updatedMessages\n          };\n        }\n        return prev;\n      });\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const handleTyping = e => {\n    setMessage(e.target.value);\n    if (selectedUser) {\n      // Clear existing timeout\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n\n      // Send typing status\n      socketService.sendTypingStatus(selectedUser._id, true);\n\n      // Set new timeout\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\n        socketService.sendTypingStatus(selectedUser._id, false);\n      }, 2000);\n    }\n  };\n  const formatTime = date => {\n    try {\n      const messageDate = new Date(date);\n\n      // Check if date is valid\n      if (isNaN(messageDate.getTime())) {\n        return 'Invalid date';\n      }\n      const now = new Date();\n      const diffMs = now.getTime() - messageDate.getTime();\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n      if (diffMinutes < 1) {\n        return 'Vừa xong';\n      } else if (diffMinutes < 60) {\n        return `${diffMinutes} phút trước`;\n      } else if (diffHours < 24) {\n        return `${diffHours} giờ trước`;\n      } else if (diffDays < 7) {\n        return `${diffDays} ngày trước`;\n      } else {\n        return messageDate.toLocaleDateString('vi-VN');\n      }\n    } catch (error) {\n      console.error('Error formatting time:', error);\n      return 'Invalid date';\n    }\n  };\n  const formatFullDateTime = date => {\n    try {\n      const messageDate = new Date(date);\n\n      // Check if date is valid\n      if (isNaN(messageDate.getTime())) {\n        return 'Invalid date';\n      }\n      return messageDate.toLocaleString('vi-VN', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    } catch (error) {\n      console.error('Error formatting full date time:', error);\n      return 'Invalid date';\n    }\n  };\n  const currentMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\n  // Filter users based on search query\n  const filteredUsers = activeUsers.filter(chatUser => chatUser.username.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messenger-chat-page\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 16,\n      style: {\n        height: '100%'\n      },\n      children: [\"        \", /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 8,\n        md: 6,\n        lg: 6,\n        xl: 5,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Search users by name...\",\n            value: searchQuery,\n            onChange: e => setSearchQuery(e.target.value),\n            style: {\n              width: '100%'\n            },\n            allowClear: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 15\n          }, this),\n          className: \"users-card\",\n          bodyStyle: {\n            padding: 0\n          },\n          children: [\"            \", /*#__PURE__*/_jsxDEV(List, {\n            dataSource: filteredUsers,\n            renderItem: chatUser => /*#__PURE__*/_jsxDEV(List.Item, {\n              className: `user-item ${(selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id) === chatUser._id ? 'selected' : ''}`,\n              onClick: () => setSelectedUser(chatUser),\n              children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n                avatar: /*#__PURE__*/_jsxDEV(Badge, {\n                  dot: true,\n                  status: chatUser.isOnline ? 'success' : 'default',\n                  offset: [-2, 32],\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 630,\n                      columnNumber: 33\n                    }, this),\n                    src: chatUser.avatar,\n                    size: \"large\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 629,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 624,\n                  columnNumber: 23\n                }, this),\n                title: /*#__PURE__*/_jsxDEV(Text, {\n                  strong: true,\n                  children: chatUser.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 28\n                }, this),\n                description: typing[chatUser._id] ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Typing...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 25\n                }, this) : chatUser.isOnline ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Online\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 641,\n                  columnNumber: 25\n                }, this) : chatUser.lastSeen ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"secondary\",\n                  children: [\"Last seen at \", formatTime(chatUser.lastSeen)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 643,\n                  columnNumber: 25\n                }, this) : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 59\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 16,\n        md: 18,\n        lg: 18,\n        xl: 19,\n        children: selectedUser ? /*#__PURE__*/_jsxDEV(Card, {\n          className: \"chat-card\",\n          title: /*#__PURE__*/_jsxDEV(Space, {\n            children: [/*#__PURE__*/_jsxDEV(Badge, {\n              dot: true,\n              status: selectedUser.isOnline ? 'success' : 'default',\n              offset: [-2, 32],\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 29\n                }, this),\n                src: selectedUser.avatar,\n                size: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: selectedUser.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 19\n            }, this), typing[selectedUser._id] && /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              italic: true,\n              children: \"typing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 21\n            }, this), !socketConnected && /*#__PURE__*/_jsxDEV(Text, {\n              type: \"warning\",\n              style: {\n                fontSize: '12px',\n                marginLeft: '8px'\n              },\n              children: \"\\u26A0\\uFE0F Reconnecting...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 17\n          }, this),\n          style: {\n            height: 'calc(100vh - 200px)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-container\",\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              dataSource: currentMessages,\n              renderItem: msg => {\n                const senderId = typeof msg.sender === 'string' ? msg.sender : msg.sender._id;\n                const isOwnMessage = String(user === null || user === void 0 ? void 0 : user._id) === String(senderId);\n                const isOptimistic = msg._id.startsWith('temp_');\n                const messageStatus = msg.status;\n                return /*#__PURE__*/_jsxDEV(List.Item, {\n                  className: `message-item ${isOwnMessage ? 'own-message' : 'other-message'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-content\",\n                    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                      title: formatFullDateTime(msg.timestamp),\n                      placement: isOwnMessage ? 'left' : 'right',\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"message-bubble\",\n                        style: {\n                          backgroundColor: isOwnMessage ? '#1890ff' : '#e4e6eb',\n                          color: isOwnMessage ? '#ffffff' : '#000000',\n                          opacity: isOptimistic ? 0.7 : 1,\n                          // Show optimistic messages as slightly transparent\n                          transition: 'opacity 0.2s ease' // Smooth transition when message is confirmed\n                        },\n                        children: [\"                              \", /*#__PURE__*/_jsxDEV(Text, {\n                          style: {\n                            color: 'inherit'\n                          },\n                          children: msg.content\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 711,\n                          columnNumber: 60\n                        }, this), isOptimistic && messageStatus === 'sending' && /*#__PURE__*/_jsxDEV(Text, {\n                          style: {\n                            color: 'inherit',\n                            fontSize: '10px',\n                            marginLeft: '8px',\n                            opacity: 0.8\n                          },\n                          children: \"\\u23F3\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 713,\n                          columnNumber: 33\n                        }, this), isOptimistic && messageStatus === 'failed' && /*#__PURE__*/_jsxDEV(Text, {\n                          style: {\n                            color: 'inherit',\n                            fontSize: '10px',\n                            marginLeft: '8px',\n                            opacity: 0.8,\n                            cursor: 'pointer'\n                          },\n                          onClick: () => {\n                            // Retry sending the message\n                            socketService.sendMessage(selectedUser._id, msg.content);\n                            // Update status back to sending\n                            setMessagesByConversation(prev => {\n                              const conversationMessages = prev[selectedUser._id] || [];\n                              const messageIndex = conversationMessages.findIndex(m => m._id === msg._id);\n                              if (messageIndex !== -1) {\n                                const updatedMessages = [...conversationMessages];\n                                updatedMessages[messageIndex] = {\n                                  ...updatedMessages[messageIndex],\n                                  status: 'sending'\n                                };\n                                return {\n                                  ...prev,\n                                  [selectedUser._id]: updatedMessages\n                                };\n                              }\n                              return prev;\n                            });\n                          },\n                          title: \"Click to retry\",\n                          children: \"\\u274C Retry\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 723,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 703,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 699,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Text, {\n                      type: \"secondary\",\n                      className: \"message-time\",\n                      children: formatTime(new Date(msg.timestamp))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 759,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 698,\n                    columnNumber: 25\n                  }, this)\n                }, msg._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 51\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 767,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              margin: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-input-container\",\n            children: /*#__PURE__*/_jsxDEV(Space.Compact, {\n              style: {\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextArea, {\n                value: message,\n                onChange: handleTyping,\n                onKeyPress: handleKeyPress,\n                placeholder: \"Type a message...\",\n                autoSize: {\n                  minRows: 1,\n                  maxRows: 4\n                },\n                style: {\n                  resize: 'none'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"primary\",\n                icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 784,\n                  columnNumber: 27\n                }, this),\n                onClick: handleSendMessage,\n                disabled: !message.trim(),\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 782,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Card, {\n          className: \"no-chat-selected\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center',\n              padding: '60px 20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(MessageOutlined, {\n              style: {\n                fontSize: '48px',\n                color: '#d9d9d9'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 796,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Title, {\n              level: 4,\n              type: \"secondary\",\n              children: \"Select a conversation to start chatting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 797,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              children: \"Choose from your existing conversations on the left or start a new one.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 798,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 795,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 601,\n    columnNumber: 5\n  }, this);\n};\n_s(MessengerChatPage, \"AFYPw+anYLPSuTUnVCxKM9DoL7s=\", false, function () {\n  return [useAuth];\n});\n_c = MessengerChatPage;\nexport default MessengerChatPage;\nvar _c;\n$RefreshReg$(_c, \"MessengerChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Card","Typography","Input","Button","List","Avatar","Space","Divider","Badge","Row","Col","Tooltip","SendOutlined","UserOutlined","MessageOutlined","useAuth","socketService","chatService","jsxDEV","_jsxDEV","Title","Text","TextArea","MessengerChatPage","_s","user","token","message","setMessage","messagesByConversation","setMessagesByConversation","activeUsers","setActiveUsers","selectedUser","setSelectedUser","typing","setTyping","typingTimeoutRef","messagesEndRef","socketConnected","setSocketConnected","searchQuery","setSearchQuery","loading","setLoading","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","loadMessages","userId","messages","getMessages","console","log","validMessages","filter","msg","content","sortedMessages","sort","a","b","Date","timestamp","getTime","prev","newState","markAsRead","catch","error","loadActiveUsers","users","getActiveUsers","filteredUsers","u","_id","length","socket","connect","on","reason","isConnected","disconnect","messageHandler","newMessage","senderId","sender","receiverId","receiver","String","conversationId","conversationMessages","optimisticIndex","findIndex","startsWith","Math","abs","updatedMessages","exists","some","normalizedMessage","userOnlineHandler","map","isOnline","userOfflineHandler","typingHandler","isTyping","onMessage","onUserOnline","onUserOffline","onTyping","messageConfirmedHandler","confirmedMessage","messageExists","filteredMessages","toString","getSocket","_socketService$getSoc","off","_socketService$getSoc2","fetchMessages","refreshInterval","setInterval","clearInterval","refreshUsersList","interval","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener","handleSendMessage","trim","sendMessage","optimisticMessage","now","random","username","avatar","messageType","isRead","status","setTimeout","clearTimeout","sendTypingStatus","messageIndex","handleKeyPress","e","key","shiftKey","preventDefault","handleTyping","target","value","formatTime","date","messageDate","isNaN","diffMs","diffMinutes","floor","diffHours","diffDays","toLocaleDateString","formatFullDateTime","toLocaleString","weekday","year","month","day","hour","minute","second","currentMessages","chatUser","toLowerCase","includes","className","children","gutter","style","height","xs","sm","md","lg","xl","title","placeholder","onChange","width","allowClear","fileName","_jsxFileName","lineNumber","columnNumber","bodyStyle","padding","dataSource","renderItem","Item","onClick","Meta","dot","offset","icon","src","size","strong","description","type","lastSeen","italic","fontSize","marginLeft","isOwnMessage","isOptimistic","messageStatus","placement","backgroundColor","color","opacity","transition","cursor","m","ref","margin","Compact","onKeyPress","autoSize","minRows","maxRows","resize","disabled","textAlign","level","_c","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/Components/Chat/MessengerChatPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Input, \r\n  Button, \r\n  List, \r\n  Avatar, \r\n  Space,\r\n  Divider,\r\n  Badge,\r\n  Row,\r\n  Col,\r\n  Tooltip\r\n} from 'antd';\r\nimport { \r\n  SendOutlined, \r\n  UserOutlined,\r\n  MessageOutlined \r\n} from '@ant-design/icons';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport socketService from '../../services/socketService';\r\nimport { chatService, Message, ChatUser } from '../../services/chatService';\r\nimport './MessengerChatPage.css';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst MessengerChatPage: React.FC = () => {\r\n  const { user, token } = useAuth();\r\n  const [message, setMessage] = useState('');\r\n  const [messagesByConversation, setMessagesByConversation] = useState<{ [key: string]: Message[] }>({});\r\n  const [activeUsers, setActiveUsers] = useState<ChatUser[]>([]);\r\n  const [selectedUser, setSelectedUser] = useState<ChatUser | null>(null);\r\n  const [typing, setTyping] = useState<{ [key: string]: boolean }>({});\r\n  const typingTimeoutRef = useRef<{ [key: string]: NodeJS.Timeout }>({});\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n  const loadMessages = useCallback(async (userId: string) => {\r\n    try {\r\n      const messages = await chatService.getMessages(userId);\r\n      console.log('API getMessages for', userId, 'returned', messages);\r\n      \r\n      // Filter out any invalid messages and sort by timestamp\r\n      const validMessages = messages.filter(msg => \r\n        msg && msg.content && (typeof msg.content === 'string')\r\n      );\r\n      \r\n      const sortedMessages = validMessages.sort((a, b) =>\r\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n      );\r\n      \r\n      setMessagesByConversation(prev => {\r\n        const newState = {\r\n          ...prev,\r\n          [userId]: sortedMessages\r\n        };\r\n        console.log('setMessagesByConversation after loadMessages:', newState);\r\n        return newState;\r\n      });\r\n      scrollToBottom();\r\n      // Mark messages as read\r\n      chatService.markAsRead(userId)\r\n        .catch(error => console.error('Error marking messages as read:', error));\r\n    } catch (error) {\r\n      console.error('Error loading messages:', error);\r\n    }\r\n  }, []);  const loadActiveUsers = useCallback(async () => {\r\n    try {\r\n      const users = await chatService.getActiveUsers();\r\n      // Filter out current user\r\n      const filteredUsers = users.filter(u => u._id !== user?._id);\r\n      setActiveUsers(filteredUsers);\r\n      \r\n      // Auto-select first user if no user is selected and there are users available\r\n      if (!selectedUser && filteredUsers.length > 0) {\r\n        setSelectedUser(filteredUsers[0]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading active users:', error);\r\n    }\r\n  }, [user?._id, selectedUser]);useEffect(() => {\r\n    if (token && !socketConnected) {\r\n      console.log('Connecting socket with token');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      \r\n      if (socket) {        socket.on('connect', () => {\r\n          console.log('Socket connected successfully');\r\n          setSocketConnected(true);\r\n          // Reload messages when reconnected\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n          loadActiveUsers();\r\n        });\r\n\r\n        socket.on('reconnect', () => {\r\n          console.log('Socket reconnected successfully');\r\n          setSocketConnected(true);\r\n          // Reload messages when reconnected\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n          loadActiveUsers();\r\n        });\r\n\r\n        socket.on('connect_error', (error: Error) => {\r\n          console.error('Socket connection error:', error);\r\n          setSocketConnected(false);\r\n        });\r\n\r\n        socket.on('disconnect', (reason) => {\r\n          console.log('Socket disconnected:', reason);\r\n          // Only set disconnected for permanent disconnections\r\n          if (reason === 'io server disconnect' || reason === 'io client disconnect') {\r\n            setSocketConnected(false);\r\n          }\r\n          // For temporary disconnections, keep the connected state and let reconnect handle it\r\n        });\r\n      }\r\n\r\n      loadActiveUsers();\r\n\r\n      return () => {\r\n        console.log('Cleaning up socket connection');\r\n        if (socketService.isConnected()) {\r\n          socketService.disconnect();\r\n        }\r\n        setSocketConnected(false);\r\n      };\r\n    }\r\n  }, [token, loadActiveUsers, selectedUser, loadMessages]);\r\n  useEffect(() => {\r\n    if (socketConnected) {\r\n      const messageHandler = (newMessage: Message) => {\r\n        console.log('messageHandler called:', newMessage, 'Current user:', user, 'Selected:', selectedUser);\r\n\r\n        // Extract IDs correctly regardless of the format\r\n        const senderId = typeof newMessage.sender === 'string' \r\n          ? newMessage.sender \r\n          : newMessage.sender._id;\r\n        \r\n        const receiverId = typeof newMessage.receiver === 'string'\r\n          ? newMessage.receiver \r\n          : newMessage.receiver._id;\r\n        \r\n        const userId = String(user?._id);\r\n\r\n        // Only update conversation if we're either the sender or receiver\r\n        if (senderId === userId || receiverId === userId) {\r\n          // Get the ID of the other person in the conversation\r\n          const conversationId = senderId === userId ? receiverId : senderId;          setMessagesByConversation(prev => {\r\n            const conversationMessages = prev[conversationId] || [];\r\n            \r\n            // Check if this is confirming an optimistic message\r\n            const optimisticIndex = conversationMessages.findIndex(msg => \r\n              msg._id.startsWith('temp_') && \r\n              msg.content === newMessage.content && \r\n              senderId === userId &&\r\n              Math.abs(new Date(msg.timestamp).getTime() - new Date(newMessage.timestamp).getTime()) < 5000 // Within 5 seconds\r\n            );\r\n\r\n            if (optimisticIndex !== -1) {\r\n              // Replace optimistic message with real message\r\n              const updatedMessages = [...conversationMessages];\r\n              updatedMessages[optimisticIndex] = {\r\n                ...newMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(newMessage._id)\r\n              };\r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages.sort((a, b) => \r\n                  new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n                )\r\n              };\r\n            }\r\n\r\n            // Check if message already exists by ID\r\n            const exists = conversationMessages.some(msg => \r\n              String(msg._id) === String(newMessage._id)\r\n            );\r\n            \r\n            if (!exists) {\r\n              // Normalize IDs to string for consistency\r\n              const normalizedMessage = {\r\n                ...newMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(newMessage._id)\r\n              };\r\n\r\n              // Sort messages by timestamp\r\n              const updatedMessages = [...conversationMessages, normalizedMessage]\r\n                .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages\r\n              };\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n\r\n        // Only scroll if the message belongs to the currently selected conversation\r\n        if (selectedUser && (\r\n          senderId === String(selectedUser._id) || \r\n          receiverId === String(selectedUser._id)\r\n        )) {\r\n          scrollToBottom();\r\n        }\r\n      };      const userOnlineHandler = (userId: string) => {\r\n        console.log('User came online:', userId);\r\n        setActiveUsers(prev => \r\n          prev.map(user => \r\n            user._id === userId ? { ...user, isOnline: true } : user\r\n          )\r\n        );\r\n      };\r\n\r\n      const userOfflineHandler = (userId: string) => {\r\n        console.log('User went offline:', userId);\r\n        setActiveUsers(prev => \r\n          prev.map(user => \r\n            user._id === userId ? { ...user, isOnline: false } : user\r\n          )\r\n        );\r\n      };\r\n\r\n      const typingHandler = ({ userId, isTyping }: { userId: string, isTyping: boolean }) => {\r\n        setTyping(prev => ({ ...prev, [userId]: isTyping }));\r\n      };      socketService.onMessage(messageHandler);\r\n      socketService.onUserOnline(userOnlineHandler);\r\n      socketService.onUserOffline(userOfflineHandler);\r\n      socketService.onTyping(typingHandler);\r\n\r\n      // Handle message confirmation for sender\r\n      const messageConfirmedHandler = (confirmedMessage: Message) => {\r\n        console.log('messageConfirmedHandler called:', confirmedMessage, 'Current user:', user, 'Selected:', selectedUser);\r\n        \r\n        // Extract IDs correctly\r\n        const senderId = typeof confirmedMessage.sender === 'string' \r\n          ? confirmedMessage.sender \r\n          : confirmedMessage.sender._id;\r\n        \r\n        const receiverId = typeof confirmedMessage.receiver === 'string'\r\n          ? confirmedMessage.receiver \r\n          : confirmedMessage.receiver._id;\r\n        \r\n        const userId = String(user?._id);\r\n        \r\n        // Only handle confirmation for messages sent by current user\r\n        if (senderId === userId) {\r\n          const conversationId = receiverId;\r\n          \r\n          setMessagesByConversation(prev => {\r\n            const conversationMessages = prev[conversationId] || [];\r\n            \r\n            // Find and replace temporary message or add new one if not exists\r\n            const messageExists = conversationMessages.some(msg => \r\n              String(msg._id) === String(confirmedMessage._id)\r\n            );\r\n            \r\n            if (!messageExists) {\r\n              // If message doesn't exist, add it\r\n              const normalizedMessage = {\r\n                ...confirmedMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(confirmedMessage._id)\r\n              };\r\n              \r\n              // Remove any temporary messages with same content\r\n              const filteredMessages = conversationMessages.filter(msg => \r\n                !(msg.content === confirmedMessage.content && \r\n                  msg._id.toString().length > 10) // temp IDs are typically longer\r\n              );\r\n              \r\n              const updatedMessages = [...filteredMessages, normalizedMessage]\r\n                .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages\r\n              };\r\n            }\r\n            \r\n            return prev;\r\n          });\r\n          \r\n          // Scroll to bottom if this is the selected conversation\r\n          if (selectedUser && String(selectedUser._id) === conversationId) {\r\n            scrollToBottom();\r\n          }\r\n        }\r\n      };\r\n\r\n      // Listen for messageConfirmed event\r\n      if (socketService.getSocket()) {\r\n        socketService.getSocket()?.on('messageConfirmed', messageConfirmedHandler);\r\n      }\r\n\r\n      return () => {\r\n        socketService.off('newMessage');\r\n        socketService.off('messageConfirmed');\r\n        socketService.off('userOnline');\r\n        socketService.off('userOffline');\r\n        socketService.off('userTyping');\r\n        if (socketService.getSocket()) {\r\n          socketService.getSocket()?.off('messageConfirmed', messageConfirmedHandler);\r\n        }\r\n      };\r\n    }\r\n  }, [socketConnected, user, selectedUser]);\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      // Fetch messages when selecting user\r\n      const fetchMessages = async () => {\r\n        setLoading(true);\r\n        try {\r\n          const messages = await chatService.getMessages(selectedUser._id);\r\n          setMessagesByConversation(prev => ({\r\n            ...prev,\r\n            [selectedUser._id]: messages\r\n          }));\r\n        } catch (error) {\r\n          console.error('Error fetching messages:', error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchMessages();\r\n    }\r\n  }, [selectedUser?._id]);\r\n\r\n  // Add periodic refresh\r\n  useEffect(() => {\r\n    const refreshInterval = setInterval(async () => {\r\n      if (selectedUser) {\r\n        const messages = await chatService.getMessages(selectedUser._id);\r\n        setMessagesByConversation(prev => ({\r\n          ...prev,\r\n          [selectedUser._id]: messages\r\n        }));\r\n      }\r\n    }, 10000); // Refresh every 10 seconds\r\n\r\n    return () => clearInterval(refreshInterval);\r\n  }, [selectedUser]);\r\n\r\n  // Add function to refresh users list\r\n  const refreshUsersList = async () => {\r\n    try {\r\n      const users = await chatService.getActiveUsers();\r\n      setActiveUsers(users);\r\n    } catch (error) {\r\n      console.error('Error refreshing users list:', error);\r\n    }\r\n  };\r\n\r\n  // Refresh users list periodically\r\n  useEffect(() => {\r\n    refreshUsersList();\r\n    const interval = setInterval(refreshUsersList, 30000); // Every 30 seconds\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Handle page visibility changes (tab switching)\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'visible') {\r\n        console.log('Page became visible, checking socket connection...');\r\n        \r\n        // Reconnect socket if needed\r\n        if (!socketService.isConnected() && token) {\r\n          console.log('Reconnecting socket after tab switch...');\r\n          const socket = socketService.connect(`Bearer ${token}`);\r\n          if (socket) {\r\n            socket.on('connect', () => {\r\n              console.log('Reconnected after tab switch');\r\n              setSocketConnected(true);\r\n              // Reload data when reconnected\r\n              loadActiveUsers();\r\n              if (selectedUser) {\r\n                loadMessages(selectedUser._id);\r\n              }\r\n            });\r\n          }\r\n        } else if (socketService.isConnected()) {\r\n          // Socket is connected, just refresh data\r\n          console.log('Socket still connected, refreshing data...');\r\n          loadActiveUsers();\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, [token, selectedUser, loadActiveUsers, loadMessages]);const handleSendMessage = async () => {\r\n    if (!message.trim() || !selectedUser || !user?._id) return;\r\n\r\n    // Check if socket is connected\r\n    if (!socketService.isConnected()) {\r\n      console.log('Socket not connected, attempting to reconnect...');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      if (socket) {\r\n        socket.on('connect', () => {\r\n          console.log('Reconnected, sending message...');\r\n          setSocketConnected(true);\r\n          socketService.sendMessage(selectedUser._id, message.trim());\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    const content = message.trim();\r\n    setMessage('');\r\n\r\n    // Create optimistic message with proper typing\r\n    const optimisticMessage: Message = {\r\n      _id: `temp_${Date.now()}_${Math.random()}`,\r\n      content,\r\n      sender: {\r\n        _id: user._id,\r\n        username: user.username,\r\n        avatar: user.avatar\r\n      },\r\n      receiver: {\r\n        _id: selectedUser._id,\r\n        username: selectedUser.username,\r\n        avatar: selectedUser.avatar\r\n      },\r\n      messageType: 'text',\r\n      timestamp: new Date(),\r\n      isRead: false,\r\n      status: 'sending'\r\n    };\r\n\r\n    // Add optimistic message to UI immediately\r\n    setMessagesByConversation(prev => ({\r\n      ...prev,\r\n      [selectedUser._id]: [...(prev[selectedUser._id] || []), optimisticMessage]\r\n    }));\r\n\r\n    // Scroll to bottom immediately\r\n    setTimeout(() => scrollToBottom(), 10);\r\n\r\n    try {\r\n      // Clear typing status\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n      socketService.sendTypingStatus(selectedUser._id, false);\r\n\r\n      // Send through socket\r\n      socketService.sendMessage(selectedUser._id, content);\r\n\r\n      // Set a timeout to mark message as failed if not confirmed\r\n      setTimeout(() => {\r\n        setMessagesByConversation(prev => {\r\n          const conversationMessages = prev[selectedUser._id] || [];\r\n          const messageIndex = conversationMessages.findIndex(msg => msg._id === optimisticMessage._id);\r\n\r\n          if (messageIndex !== -1 && conversationMessages[messageIndex]._id.startsWith('temp_')) {\r\n            const updatedMessages = [...conversationMessages];\r\n            updatedMessages[messageIndex] = {\r\n              ...updatedMessages[messageIndex],\r\n              status: 'error'\r\n            };\r\n            return {\r\n              ...prev,\r\n              [selectedUser._id]: updatedMessages\r\n            };\r\n          }\r\n          return prev;\r\n        });\r\n      }, 10000);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      // Mark the optimistic message as failed\r\n      setMessagesByConversation(prev => {\r\n        const conversationMessages = prev[selectedUser._id] || [];\r\n        const messageIndex = conversationMessages.findIndex(msg => msg._id === optimisticMessage._id);\r\n\r\n        if (messageIndex !== -1) {\r\n          const updatedMessages = [...conversationMessages];\r\n          updatedMessages[messageIndex] = {\r\n            ...updatedMessages[messageIndex],\r\n            status: 'error'\r\n          };\r\n          return {\r\n            ...prev,\r\n            [selectedUser._id]: updatedMessages\r\n          };\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleTyping = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessage(e.target.value);\r\n    \r\n    if (selectedUser) {\r\n      // Clear existing timeout\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n\r\n      // Send typing status\r\n      socketService.sendTypingStatus(selectedUser._id, true);\r\n\r\n      // Set new timeout\r\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\r\n        socketService.sendTypingStatus(selectedUser._id, false);\r\n      }, 2000);\r\n    }\r\n  };\r\n  const formatTime = (date: Date | string) => {\r\n    try {\r\n      const messageDate = new Date(date);\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(messageDate.getTime())) {\r\n        return 'Invalid date';\r\n      }\r\n\r\n      const now = new Date();\r\n      const diffMs = now.getTime() - messageDate.getTime();\r\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\r\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\r\n\r\n      if (diffMinutes < 1) {\r\n        return 'Vừa xong';\r\n      } else if (diffMinutes < 60) {\r\n        return `${diffMinutes} phút trước`;\r\n      } else if (diffHours < 24) {\r\n        return `${diffHours} giờ trước`;\r\n      } else if (diffDays < 7) {\r\n        return `${diffDays} ngày trước`;\r\n      } else {\r\n        return messageDate.toLocaleDateString('vi-VN');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error formatting time:', error);\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n\r\n  const formatFullDateTime = (date: Date | string) => {\r\n    try {\r\n      const messageDate = new Date(date);\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(messageDate.getTime())) {\r\n        return 'Invalid date';\r\n      }\r\n\r\n      return messageDate.toLocaleString('vi-VN', {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long', \r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n      });\r\n    } catch (error) {\r\n      console.error('Error formatting full date time:', error);\r\n      return 'Invalid date';\r\n    }  };\r\n  const currentMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\r\n  // Filter users based on search query\r\n  const filteredUsers = activeUsers.filter(chatUser => \r\n    chatUser.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"messenger-chat-page\">\r\n      <Row gutter={16} style={{ height: '100%' }}>        <Col xs={24} sm={8} md={6} lg={6} xl={5}>\r\n          <Card \r\n            title={\r\n              <Input\r\n                placeholder=\"Search users by name...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                style={{ width: '100%' }}\r\n                allowClear\r\n              />\r\n            }\r\n            className=\"users-card\"\r\n            bodyStyle={{ padding: 0 }}\r\n          >            <List\r\n              dataSource={filteredUsers}\r\n              renderItem={(chatUser) => (\r\n                <List.Item\r\n                  className={`user-item ${selectedUser?._id === chatUser._id ? 'selected' : ''}`}\r\n                  onClick={() => setSelectedUser(chatUser)}\r\n                >\r\n                  <List.Item.Meta\r\n                    avatar={\r\n                      <Badge \r\n                        dot \r\n                        status={chatUser.isOnline ? 'success' : 'default'}\r\n                        offset={[-2, 32]}\r\n                      >\r\n                        <Avatar \r\n                          icon={<UserOutlined />} \r\n                          src={chatUser.avatar}\r\n                          size=\"large\"\r\n                        />\r\n                      </Badge>\r\n                    }\r\n                    title={<Text strong>{chatUser.username}</Text>}\r\n                    description={\r\n                      typing[chatUser._id] ? (\r\n                        <Text type=\"success\">Typing...</Text>\r\n                      ) : chatUser.isOnline ? (\r\n                        <Text type=\"success\">Online</Text>\r\n                      ) : chatUser.lastSeen ? (\r\n                        <Text type=\"secondary\">\r\n                          Last seen at {formatTime(chatUser.lastSeen)}\r\n                        </Text>\r\n                      ) : null\r\n                    }\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col xs={24} sm={16} md={18} lg={18} xl={19}>\r\n          {selectedUser ? (\r\n            <Card\r\n              className=\"chat-card\"              title={\r\n                <Space>\r\n                  <Badge \r\n                    dot \r\n                    status={selectedUser.isOnline ? 'success' : 'default'}\r\n                    offset={[-2, 32]}\r\n                  >\r\n                    <Avatar \r\n                      icon={<UserOutlined />} \r\n                      src={selectedUser.avatar}\r\n                      size=\"large\"\r\n                    />\r\n                  </Badge>\r\n                  <span>{selectedUser.username}</span>\r\n                  {typing[selectedUser._id] && (\r\n                    <Text type=\"secondary\" italic>typing...</Text>\r\n                  )}\r\n                  {!socketConnected && (\r\n                    <Text type=\"warning\" style={{ fontSize: '12px', marginLeft: '8px' }}>\r\n                      ⚠️ Reconnecting...\r\n                    </Text>\r\n                  )}\r\n                </Space>\r\n              }\r\n              style={{\r\n                height: 'calc(100vh - 200px)'\r\n              }}\r\n            >\r\n              <div className=\"messages-container\">\r\n                <List\r\n                  dataSource={currentMessages}                  renderItem={(msg) => {\r\n                    const senderId = typeof msg.sender === 'string' ? msg.sender : msg.sender._id;\r\n                    const isOwnMessage = String(user?._id) === String(senderId);\r\n                    const isOptimistic = msg._id.startsWith('temp_');\r\n                    const messageStatus = (msg as any).status;\r\n                    \r\n                    return (                      <List.Item\r\n                        key={msg._id}\r\n                        className={`message-item ${isOwnMessage ? 'own-message' : 'other-message'}`}\r\n                      >\r\n                        <div className=\"message-content\">\r\n                          <Tooltip \r\n                            title={formatFullDateTime(msg.timestamp)}\r\n                            placement={isOwnMessage ? 'left' : 'right'}\r\n                          >\r\n                            <div \r\n                              className=\"message-bubble\"\r\n                              style={{\r\n                                backgroundColor: isOwnMessage ? '#1890ff' : '#e4e6eb',\r\n                                color: isOwnMessage ? '#ffffff' : '#000000',\r\n                                opacity: isOptimistic ? 0.7 : 1, // Show optimistic messages as slightly transparent\r\n                                transition: 'opacity 0.2s ease' // Smooth transition when message is confirmed\r\n                              }}\r\n                            >                              <Text style={{ color: 'inherit' }}>{msg.content}</Text>\r\n                              {isOptimistic && messageStatus === 'sending' && (\r\n                                <Text style={{ \r\n                                  color: 'inherit', \r\n                                  fontSize: '10px', \r\n                                  marginLeft: '8px',\r\n                                  opacity: 0.8 \r\n                                }}>\r\n                                  ⏳\r\n                                </Text>\r\n                              )}\r\n                              {isOptimistic && messageStatus === 'failed' && (\r\n                                <Text \r\n                                  style={{ \r\n                                    color: 'inherit', \r\n                                    fontSize: '10px', \r\n                                    marginLeft: '8px',\r\n                                    opacity: 0.8,\r\n                                    cursor: 'pointer'\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    // Retry sending the message\r\n                                    socketService.sendMessage(selectedUser._id, msg.content);\r\n                                    // Update status back to sending\r\n                                    setMessagesByConversation(prev => {\r\n                                      const conversationMessages = prev[selectedUser._id] || [];\r\n                                      const messageIndex = conversationMessages.findIndex(m => m._id === msg._id);\r\n                                      if (messageIndex !== -1) {\r\n                                        const updatedMessages = [...conversationMessages];\r\n                                        updatedMessages[messageIndex] = {\r\n                                          ...updatedMessages[messageIndex],\r\n                                          status: 'sending'\r\n                                        } as Message & { status?: string };\r\n                                        return {\r\n                                          ...prev,\r\n                                          [selectedUser._id]: updatedMessages\r\n                                        };\r\n                                      }\r\n                                      return prev;\r\n                                    });\r\n                                  }}\r\n                                  title=\"Click to retry\"\r\n                                >\r\n                                  ❌ Retry\r\n                                </Text>\r\n                              )}\r\n                            </div>\r\n                          </Tooltip>\r\n                          <Text type=\"secondary\" className=\"message-time\">\r\n                            {formatTime(new Date(msg.timestamp))}\r\n                          </Text>\r\n                        </div>\r\n                      </List.Item>\r\n                    );\r\n                  }}\r\n                />\r\n                <div ref={messagesEndRef} />\r\n              </div>\r\n\r\n              <Divider style={{ margin: 0 }} />\r\n\r\n              <div className=\"message-input-container\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                  <TextArea\r\n                    value={message}\r\n                    onChange={handleTyping}\r\n                    onKeyPress={handleKeyPress}\r\n                    placeholder=\"Type a message...\"\r\n                    autoSize={{ minRows: 1, maxRows: 4 }}\r\n                    style={{ resize: 'none' }}\r\n                  />\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<SendOutlined />}\r\n                    onClick={handleSendMessage}\r\n                    disabled={!message.trim()}\r\n                  >\r\n                    Send\r\n                  </Button>\r\n                </Space.Compact>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <Card className=\"no-chat-selected\">\r\n              <div style={{ textAlign: 'center', padding: '60px 20px' }}>\r\n                <MessageOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\r\n                <Title level={4} type=\"secondary\">Select a conversation to start chatting</Title>\r\n                <Text type=\"secondary\">\r\n                  Choose from your existing conversations on the left or start a new one.\r\n                </Text>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessengerChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}