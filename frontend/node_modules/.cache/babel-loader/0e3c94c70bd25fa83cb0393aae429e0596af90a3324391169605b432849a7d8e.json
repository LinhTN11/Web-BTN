{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { userAPI, authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [adminData, setAdminData] = useState({\n    users: [],\n    lastFetched: 0\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAdminDataLoading, setIsAdminDataLoading] = useState(false);\n  const refreshUserData = async () => {\n    try {\n      const currentUser = await userAPI.getCurrentUser();\n      if (currentUser) {\n        setUser(currentUser);\n        localStorage.setItem('user', JSON.stringify(currentUser));\n      }\n    } catch (error) {\n      console.error('Error refreshing user data:', error);\n    }\n  };\n  const updateUser = updatedUserData => {\n    if (user) {\n      const newUser = {\n        ...user,\n        ...updatedUserData\n      };\n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const savedUser = localStorage.getItem('user');\n        const savedToken = localStorage.getItem('token');\n        if (savedUser && savedToken) {\n          const parsedUser = JSON.parse(savedUser);\n          setUser(parsedUser);\n          setToken(savedToken);\n          setIsAuthenticated(true);\n\n          // Refresh user data\n          await refreshUserData();\n\n          // If admin, preload admin data\n          if (parsedUser.role === 'admin') {\n            await preloadAdminData();\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Optimize admin data loading\n  const preloadAdminData = async () => {\n    if (isAdminDataLoading) return adminData.users;\n    try {\n      setIsAdminDataLoading(true);\n      const now = Date.now();\n      // Increase cache duration to reduce unnecessary reloads\n      if (now - adminData.lastFetched < CACHE_DURATION && adminData.users.length > 0) {\n        return adminData.users;\n      }\n      const users = await userAPI.getAllUsers();\n      if (Array.isArray(users)) {\n        setAdminData({\n          users,\n          lastFetched: now\n        });\n        return users;\n      }\n      return adminData.users;\n    } catch (error) {\n      console.error('Error preloading admin data:', error);\n      return adminData.users;\n    } finally {\n      setIsAdminDataLoading(false);\n    }\n  };\n  const login = async (response, accessToken) => {\n    try {\n      if (!response.user || !accessToken) {\n        throw new Error('Invalid response data');\n      }\n\n      // Set auth state immediately\n      setUser(response.user);\n      setToken(accessToken);\n      setIsAuthenticated(true);\n\n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(response.user));\n      localStorage.setItem('token', accessToken);\n\n      // Load admin data in background if needed\n      if (response.user.role === 'admin') {\n        preloadAdminData().catch(console.error); // Don't await, let it load in background\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  };\n\n  // Auto refresh token before expiry\n  useEffect(() => {\n    if (!isAuthenticated || !token) return;\n    const refreshTokenInterval = setInterval(async () => {\n      try {\n        const response = await authAPI.refreshToken();\n        if (response !== null && response !== void 0 && response.accessToken) {\n          setToken(response.accessToken);\n          localStorage.setItem('token', response.accessToken);\n        }\n      } catch (error) {\n        var _error$response, _error$response2;\n        console.error('Error refreshing token:', error);\n        // Only logout if refresh fails with 401/403\n        if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n          logout();\n        }\n      }\n    }, 25000); // Refresh every 25 seconds (considering 30s token expiry)\n\n    return () => clearInterval(refreshTokenInterval);\n  }, [isAuthenticated, token]);\n  const logout = () => {\n    try {\n      authAPI.logout();\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      setUser(null);\n      setToken(null);\n      setIsAuthenticated(false);\n      setAdminData({\n        users: [],\n        lastFetched: 0\n      });\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n    }\n  };\n  const getUsers = () => adminData.users;\n  const refreshUsers = async () => {\n    return await preloadAdminData();\n  };\n  const clearCache = () => {\n    setAdminData({\n      users: [],\n      lastFetched: 0\n    });\n  };\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    login,\n    logout,\n    updateUser,\n    refreshUserData,\n    getUsers,\n    refreshUsers,\n    clearCache\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"LhDI2UGIf/uBsnTlTd+X+eCA36o=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","userAPI","authAPI","jsxDEV","_jsxDEV","CACHE_DURATION","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","adminData","setAdminData","users","lastFetched","isLoading","setIsLoading","isAdminDataLoading","setIsAdminDataLoading","refreshUserData","currentUser","getCurrentUser","localStorage","setItem","JSON","stringify","error","console","updateUser","updatedUserData","newUser","initializeAuth","savedUser","getItem","savedToken","parsedUser","parse","role","preloadAdminData","removeItem","now","Date","length","getAllUsers","Array","isArray","login","response","accessToken","Error","catch","refreshTokenInterval","setInterval","refreshToken","_error$response","_error$response2","status","logout","clearInterval","getUsers","refreshUsers","clearCache","value","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, AuthContextType } from '../types';\r\nimport { userAPI, authAPI } from '../services/api';\r\n\r\ninterface AdminData {\r\n  users: User[];\r\n  lastFetched: number;\r\n}\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [adminData, setAdminData] = useState<AdminData>({ users: [], lastFetched: 0 });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isAdminDataLoading, setIsAdminDataLoading] = useState(false);\r\n\r\n  const refreshUserData = async () => {\r\n    try {\r\n      const currentUser = await userAPI.getCurrentUser();\r\n      if (currentUser) {\r\n        setUser(currentUser);\r\n        localStorage.setItem('user', JSON.stringify(currentUser));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing user data:', error);\r\n    }\r\n  };\r\n\r\n  const updateUser = (updatedUserData: Partial<User>) => {\r\n    if (user) {\r\n      const newUser = { ...user, ...updatedUserData };\r\n      setUser(newUser);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n    }\r\n  };\r\n\r\n  // Initialize auth state\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      try {\r\n        const savedUser = localStorage.getItem('user');\r\n        const savedToken = localStorage.getItem('token');\r\n        \r\n        if (savedUser && savedToken) {\r\n          const parsedUser = JSON.parse(savedUser);\r\n          setUser(parsedUser);\r\n          setToken(savedToken);\r\n          setIsAuthenticated(true);\r\n\r\n          // Refresh user data\r\n          await refreshUserData();\r\n          \r\n          // If admin, preload admin data\r\n          if (parsedUser.role === 'admin') {\r\n            await preloadAdminData();\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing auth:', error);\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Optimize admin data loading\r\n  const preloadAdminData = async () => {\r\n    if (isAdminDataLoading) return adminData.users;\r\n    \r\n    try {\r\n      setIsAdminDataLoading(true);\r\n      const now = Date.now();\r\n      // Increase cache duration to reduce unnecessary reloads\r\n      if (now - adminData.lastFetched < CACHE_DURATION && adminData.users.length > 0) {\r\n        return adminData.users;\r\n      }\r\n\r\n      const users = await userAPI.getAllUsers();\r\n      if (Array.isArray(users)) {\r\n        setAdminData({\r\n          users,\r\n          lastFetched: now\r\n        });\r\n        return users;\r\n      }\r\n      return adminData.users;\r\n    } catch (error) {\r\n      console.error('Error preloading admin data:', error);\r\n      return adminData.users;\r\n    } finally {\r\n      setIsAdminDataLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (response: any, accessToken: string) => {\r\n    try {\r\n      if (!response.user || !accessToken) {\r\n        throw new Error('Invalid response data');\r\n      }\r\n\r\n      // Set auth state immediately\r\n      setUser(response.user);\r\n      setToken(accessToken);\r\n      setIsAuthenticated(true);\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem('user', JSON.stringify(response.user));\r\n      localStorage.setItem('token', accessToken);\r\n\r\n      // Load admin data in background if needed\r\n      if (response.user.role === 'admin') {\r\n        preloadAdminData().catch(console.error); // Don't await, let it load in background\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Auto refresh token before expiry\r\n  useEffect(() => {\r\n    if (!isAuthenticated || !token) return;\r\n\r\n    const refreshTokenInterval = setInterval(async () => {\r\n      try {\r\n        const response = await authAPI.refreshToken();\r\n        if (response?.accessToken) {\r\n          setToken(response.accessToken);\r\n          localStorage.setItem('token', response.accessToken);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error refreshing token:', error);\r\n        // Only logout if refresh fails with 401/403\r\n        if (error.response?.status === 401 || error.response?.status === 403) {\r\n          logout();\r\n        }\r\n      }\r\n    }, 25000); // Refresh every 25 seconds (considering 30s token expiry)\r\n\r\n    return () => clearInterval(refreshTokenInterval);\r\n  }, [isAuthenticated, token]);\r\n\r\n  const logout = () => {\r\n    try {\r\n      authAPI.logout();\r\n    } catch (error) {\r\n      console.error('Error during logout:', error);\r\n    } finally {\r\n      setUser(null);\r\n      setToken(null);\r\n      setIsAuthenticated(false);\r\n      setAdminData({ users: [], lastFetched: 0 });\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('token');\r\n    }\r\n  };\r\n\r\n  const getUsers = () => adminData.users;\r\n\r\n  const refreshUsers = async () => {\r\n    return await preloadAdminData();\r\n  };\r\n\r\n  const clearCache = () => {\r\n    setAdminData({ users: [], lastFetched: 0 });\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    updateUser,\r\n    refreshUserData,\r\n    getUsers,\r\n    refreshUsers,\r\n    clearCache\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAExF,SAASC,OAAO,EAAEC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnD,MAAMC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEtC,MAAMC,WAAW,gBAAGT,aAAa,CAA8BU,SAAS,CAAC;AAMzE,OAAO,MAAMC,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACgB,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAY;IAAEoB,KAAK,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAE,CAAC,CAAC;EACpF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACwB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAEnE,MAAM0B,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMC,WAAW,GAAG,MAAMzB,OAAO,CAAC0B,cAAc,CAAC,CAAC;MAClD,IAAID,WAAW,EAAE;QACfd,OAAO,CAACc,WAAW,CAAC;QACpBE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,MAAME,UAAU,GAAIC,eAA8B,IAAK;IACrD,IAAIxB,IAAI,EAAE;MACR,MAAMyB,OAAO,GAAG;QAAE,GAAGzB,IAAI;QAAE,GAAGwB;MAAgB,CAAC;MAC/CvB,OAAO,CAACwB,OAAO,CAAC;MAChBR,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACK,OAAO,CAAC,CAAC;IACvD;EACF,CAAC;;EAED;EACApC,SAAS,CAAC,MAAM;IACd,MAAMqC,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,SAAS,GAAGV,YAAY,CAACW,OAAO,CAAC,MAAM,CAAC;QAC9C,MAAMC,UAAU,GAAGZ,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;QAEhD,IAAID,SAAS,IAAIE,UAAU,EAAE;UAC3B,MAAMC,UAAU,GAAGX,IAAI,CAACY,KAAK,CAACJ,SAAS,CAAC;UACxC1B,OAAO,CAAC6B,UAAU,CAAC;UACnB3B,QAAQ,CAAC0B,UAAU,CAAC;UACpBxB,kBAAkB,CAAC,IAAI,CAAC;;UAExB;UACA,MAAMS,eAAe,CAAC,CAAC;;UAEvB;UACA,IAAIgB,UAAU,CAACE,IAAI,KAAK,OAAO,EAAE;YAC/B,MAAMC,gBAAgB,CAAC,CAAC;UAC1B;QACF;MACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDJ,YAAY,CAACiB,UAAU,CAAC,MAAM,CAAC;QAC/BjB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;MAClC,CAAC,SAAS;QACRvB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDe,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAIrB,kBAAkB,EAAE,OAAON,SAAS,CAACE,KAAK;IAE9C,IAAI;MACFK,qBAAqB,CAAC,IAAI,CAAC;MAC3B,MAAMsB,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MACtB;MACA,IAAIA,GAAG,GAAG7B,SAAS,CAACG,WAAW,GAAGf,cAAc,IAAIY,SAAS,CAACE,KAAK,CAAC6B,MAAM,GAAG,CAAC,EAAE;QAC9E,OAAO/B,SAAS,CAACE,KAAK;MACxB;MAEA,MAAMA,KAAK,GAAG,MAAMlB,OAAO,CAACgD,WAAW,CAAC,CAAC;MACzC,IAAIC,KAAK,CAACC,OAAO,CAAChC,KAAK,CAAC,EAAE;QACxBD,YAAY,CAAC;UACXC,KAAK;UACLC,WAAW,EAAE0B;QACf,CAAC,CAAC;QACF,OAAO3B,KAAK;MACd;MACA,OAAOF,SAAS,CAACE,KAAK;IACxB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAOf,SAAS,CAACE,KAAK;IACxB,CAAC,SAAS;MACRK,qBAAqB,CAAC,KAAK,CAAC;IAC9B;EACF,CAAC;EAED,MAAM4B,KAAK,GAAG,MAAAA,CAAOC,QAAa,EAAEC,WAAmB,KAAK;IAC1D,IAAI;MACF,IAAI,CAACD,QAAQ,CAAC1C,IAAI,IAAI,CAAC2C,WAAW,EAAE;QAClC,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;;MAEA;MACA3C,OAAO,CAACyC,QAAQ,CAAC1C,IAAI,CAAC;MACtBG,QAAQ,CAACwC,WAAW,CAAC;MACrBtC,kBAAkB,CAAC,IAAI,CAAC;;MAExB;MACAY,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACsB,QAAQ,CAAC1C,IAAI,CAAC,CAAC;MAC3DiB,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEyB,WAAW,CAAC;;MAE1C;MACA,IAAID,QAAQ,CAAC1C,IAAI,CAACgC,IAAI,KAAK,OAAO,EAAE;QAClCC,gBAAgB,CAAC,CAAC,CAACY,KAAK,CAACvB,OAAO,CAACD,KAAK,CAAC,CAAC,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACAhC,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,eAAe,IAAI,CAACF,KAAK,EAAE;IAEhC,MAAM4C,oBAAoB,GAAGC,WAAW,CAAC,YAAY;MACnD,IAAI;QACF,MAAML,QAAQ,GAAG,MAAMnD,OAAO,CAACyD,YAAY,CAAC,CAAC;QAC7C,IAAIN,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEC,WAAW,EAAE;UACzBxC,QAAQ,CAACuC,QAAQ,CAACC,WAAW,CAAC;UAC9B1B,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEwB,QAAQ,CAACC,WAAW,CAAC;QACrD;MACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;QAAA,IAAA4B,eAAA,EAAAC,gBAAA;QACd5B,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;QACA,IAAI,EAAA4B,eAAA,GAAA5B,KAAK,CAACqB,QAAQ,cAAAO,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,EAAAD,gBAAA,GAAA7B,KAAK,CAACqB,QAAQ,cAAAQ,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;UACpEC,MAAM,CAAC,CAAC;QACV;MACF;IACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX,OAAO,MAAMC,aAAa,CAACP,oBAAoB,CAAC;EAClD,CAAC,EAAE,CAAC1C,eAAe,EAAEF,KAAK,CAAC,CAAC;EAE5B,MAAMkD,MAAM,GAAGA,CAAA,KAAM;IACnB,IAAI;MACF7D,OAAO,CAAC6D,MAAM,CAAC,CAAC;IAClB,CAAC,CAAC,OAAO/B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,SAAS;MACRpB,OAAO,CAAC,IAAI,CAAC;MACbE,QAAQ,CAAC,IAAI,CAAC;MACdE,kBAAkB,CAAC,KAAK,CAAC;MACzBE,YAAY,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAE,CAAC,CAAC;MAC3CQ,YAAY,CAACiB,UAAU,CAAC,MAAM,CAAC;MAC/BjB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;IAClC;EACF,CAAC;EAED,MAAMoB,QAAQ,GAAGA,CAAA,KAAMhD,SAAS,CAACE,KAAK;EAEtC,MAAM+C,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,OAAO,MAAMtB,gBAAgB,CAAC,CAAC;EACjC,CAAC;EAED,MAAMuB,UAAU,GAAGA,CAAA,KAAM;IACvBjD,YAAY,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEC,WAAW,EAAE;IAAE,CAAC,CAAC;EAC7C,CAAC;EAED,MAAMgD,KAAsB,GAAG;IAC7BzD,IAAI;IACJE,KAAK;IACLE,eAAe;IACfqC,KAAK;IACLW,MAAM;IACN7B,UAAU;IACVT,eAAe;IACfwC,QAAQ;IACRC,YAAY;IACZC;EACF,CAAC;EAED,IAAI9C,SAAS,EAAE;IACb,oBAAOjB,OAAA;MAAAK,QAAA,EAAK;IAAU;MAAA4D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEpE,OAAA,CAACE,WAAW,CAACmE,QAAQ;IAACL,KAAK,EAAEA,KAAM;IAAA3D,QAAA,EAChCA;EAAQ;IAAA4D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC9D,EAAA,CAzLWF,YAAyC;AAAAkE,EAAA,GAAzClE,YAAyC;AA2LtD,OAAO,MAAMmE,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG/E,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAIuE,OAAO,KAAKtE,SAAS,EAAE;IACzB,MAAM,IAAIgD,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOsB,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAerE,WAAW;AAAC,IAAAoE,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}