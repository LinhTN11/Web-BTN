{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.messageCallbacks = [];\n    this.userOnlineCallbacks = [];\n    this.userOfflineCallbacks = [];\n    this.typingCallbacks = [];\n    this.heartbeatInterval = null;\n    this.reconnectInterval = null;\n    this.currentToken = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 50;\n  }\n  connect(token) {\n    this.currentToken = token;\n    if (!this.socket || this.socket.disconnected) {\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\n        auth: {\n          token\n        },\n        transports: ['websocket', 'polling'],\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionDelayMax: 5000,\n        reconnectionAttempts: this.maxReconnectAttempts,\n        forceNew: true,\n        timeout: 10000,\n        closeOnBeforeunload: false\n      });\n      this.socket.on('connect', () => {\n        console.log('✅ Socket connected successfully');\n        this.reconnectAttempts = 0;\n        this.clearReconnectInterval();\n        this.startHeartbeat();\n      });\n      this.socket.on('reconnect', attemptNumber => {\n        console.log('✅ Socket reconnected after', attemptNumber, 'attempts');\n        this.reconnectAttempts = 0;\n        this.clearReconnectInterval();\n        this.startHeartbeat();\n      });\n      this.socket.on('reconnect_attempt', attemptNumber => {\n        console.log('🔄 Reconnection attempt:', attemptNumber);\n        this.reconnectAttempts = attemptNumber;\n      });\n      this.socket.on('connect_error', error => {\n        console.error('❌ Socket connection error:', error);\n\n        // If error is related to authentication, try to refresh token\n        if (error.message.includes('Authentication error') || error.message.includes('Invalid token')) {\n          console.log('🔑 Authentication error detected, attempting token refresh...');\n          this.handleAuthError();\n        }\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('🔌 Socket disconnected:', reason);\n        this.stopHeartbeat();\n\n        // Handle different disconnect reasons\n        if (reason === 'io server disconnect' || reason === 'io client disconnect') {\n          console.log('⚠️ Permanent disconnect detected');\n        } else {\n          console.log('🔄 Temporary disconnect, will attempt reconnect...');\n          this.startReconnectAttempts();\n        }\n      });\n      this.socket.on('reconnect_failed', () => {\n        console.error('❌ Socket failed to reconnect after all attempts');\n        this.startReconnectAttempts();\n      });\n      this.socket.on('reconnect_error', error => {\n        console.error('❌ Socket reconnection error:', error);\n        if (error.message.includes('Authentication error') || error.message.includes('Invalid token')) {\n          this.handleAuthError();\n        }\n      });\n\n      // Message events\n      this.socket.on('newMessage', message => {\n        console.log('📨 Received new message:', message);\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageConfirmed', message => {\n        console.log('✅ Message confirmed:', message);\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageError', error => {\n        console.error('❌ Message error:', error);\n      });\n\n      // User status events\n      this.socket.on('userOnline', userId => {\n        this.userOnlineCallbacks.forEach(callback => callback(userId));\n      });\n      this.socket.on('userOffline', userId => {\n        this.userOfflineCallbacks.forEach(callback => callback(userId));\n      });\n\n      // Typing events\n      this.socket.on('userTyping', data => {\n        this.typingCallbacks.forEach(callback => callback(data));\n      });\n    }\n    return this.socket;\n  }\n  disconnect() {\n    this.stopHeartbeat();\n    this.clearReconnectInterval();\n    if (this.socket) {\n      this.socket.removeAllListeners();\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  forceReconnect(token) {\n    console.log('🔄 Force reconnecting socket...');\n    this.disconnect();\n    return this.connect(token);\n  }\n  isConnected() {\n    return this.socket && this.socket.connected;\n  }\n  startHeartbeat() {\n    this.stopHeartbeat();\n    // Send heartbeat every 15 seconds to keep connection alive\n    this.heartbeatInterval = setInterval(() => {\n      if (this.socket && this.socket.connected) {\n        this.socket.emit('heartbeat');\n        console.log('💓 Heartbeat sent');\n      }\n    }, 15000);\n  }\n  stopHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n  clearReconnectInterval() {\n    if (this.reconnectInterval) {\n      clearInterval(this.reconnectInterval);\n      this.reconnectInterval = null;\n    }\n  }\n  startReconnectAttempts() {\n    if (this.reconnectInterval) return; // Already trying to reconnect\n\n    this.reconnectInterval = setInterval(async () => {\n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n        console.log('⚠️ Max reconnect attempts reached, trying token refresh...');\n        await this.handleAuthError();\n        return;\n      }\n      if (!this.isConnected() && this.currentToken) {\n        console.log(`🔄 Manual reconnect attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts}`);\n        this.reconnectAttempts++;\n        this.forceReconnect(this.currentToken);\n      } else if (this.isConnected()) {\n        console.log('✅ Socket reconnected successfully');\n        this.clearReconnectInterval();\n        this.reconnectAttempts = 0;\n      }\n    }, 5000);\n  }\n  async handleAuthError() {\n    try {\n      console.log('🔑 Attempting to refresh token...');\n\n      // Try to refresh token using localStorage directly\n      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/v1/auth/refresh`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const newToken = data.accessToken;\n\n        // Update localStorage\n        localStorage.setItem('token', newToken);\n        this.currentToken = newToken;\n        console.log('✅ Token refreshed, reconnecting socket...');\n        this.forceReconnect(newToken);\n      } else {\n        console.error('❌ Token refresh failed, redirecting to login...');\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n    } catch (error) {\n      console.error('❌ Error during token refresh:', error);\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n  }\n\n  // Method to update token when it's refreshed externally\n  updateToken(newToken) {\n    if (this.currentToken !== newToken) {\n      console.log('🔑 Updating socket token...');\n      this.currentToken = newToken;\n      if (this.isConnected()) {\n        this.forceReconnect(newToken);\n      }\n    }\n  }\n  sendMessage(receiverId, content, messageType = 'text') {\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('sendMessage', {\n        receiverId,\n        content,\n        messageType\n      });\n    } else {\n      console.warn('⚠️ Socket not connected, cannot send message');\n    }\n  }\n  onMessage(callback) {\n    this.messageCallbacks.push(callback);\n    return () => this.removeMessageCallback(callback);\n  }\n  onUserOnline(callback) {\n    this.userOnlineCallbacks.push(callback);\n    return () => this.removeUserOnlineCallback(callback);\n  }\n  onUserOffline(callback) {\n    this.userOfflineCallbacks.push(callback);\n    return () => this.removeUserOfflineCallback(callback);\n  }\n\n  // Keep for backward compatibility\n  onUserStatus(callback) {\n    return this.onUserOnline(callback);\n  }\n  onTyping(callback) {\n    this.typingCallbacks.push(callback);\n    return () => this.removeTypingCallback(callback);\n  }\n  sendTypingStatus(receiverId, isTyping) {\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('typing', {\n        receiverId,\n        isTyping\n      });\n    }\n  }\n  markAsRead(senderId) {\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('markAsRead', {\n        senderId\n      });\n    }\n  }\n  off(event) {\n    if (this.socket) {\n      this.socket.off(event);\n    }\n  }\n  getSocket() {\n    return this.socket;\n  }\n  removeMessageCallback(callback) {\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\n  }\n  removeUserOnlineCallback(callback) {\n    this.userOnlineCallbacks = this.userOnlineCallbacks.filter(cb => cb !== callback);\n  }\n  removeUserOfflineCallback(callback) {\n    this.userOfflineCallbacks = this.userOfflineCallbacks.filter(cb => cb !== callback);\n  }\n  removeTypingCallback(callback) {\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","messageCallbacks","userOnlineCallbacks","userOfflineCallbacks","typingCallbacks","heartbeatInterval","reconnectInterval","currentToken","reconnectAttempts","maxReconnectAttempts","connect","token","disconnected","process","env","REACT_APP_API_URL","auth","transports","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","forceNew","timeout","closeOnBeforeunload","on","console","log","clearReconnectInterval","startHeartbeat","attemptNumber","error","message","includes","handleAuthError","reason","stopHeartbeat","startReconnectAttempts","forEach","callback","userId","data","disconnect","removeAllListeners","forceReconnect","isConnected","connected","setInterval","emit","clearInterval","response","fetch","method","credentials","headers","ok","json","newToken","accessToken","localStorage","setItem","removeItem","window","location","href","updateToken","sendMessage","receiverId","content","messageType","warn","onMessage","push","removeMessageCallback","onUserOnline","removeUserOnlineCallback","onUserOffline","removeUserOfflineCallback","onUserStatus","onTyping","removeTypingCallback","sendTypingStatus","isTyping","markAsRead","senderId","off","event","getSocket","filter","cb","socketService"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nimport { Message, ChatUser } from './chatService';\r\n\r\ntype MessageCallback = (message: Message) => void;\r\ntype UserOnlineCallback = (userId: string) => void;\r\ntype UserOfflineCallback = (userId: string) => void;\r\ntype TypingCallback = (data: { userId: string, isTyping: boolean }) => void;\r\n\r\nclass SocketService {\r\n  private socket: Socket | null = null;\r\n  private messageCallbacks: MessageCallback[] = [];\r\n  private userOnlineCallbacks: UserOnlineCallback[] = [];\r\n  private userOfflineCallbacks: UserOfflineCallback[] = [];\r\n  private typingCallbacks: TypingCallback[] = [];\r\n  private heartbeatInterval: NodeJS.Timeout | null = null;\r\n  private reconnectInterval: NodeJS.Timeout | null = null;\r\n  private currentToken: string | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 50;\r\n\r\n  connect(token: string) {\r\n    this.currentToken = token;\r\n    \r\n    if (!this.socket || this.socket.disconnected) {\r\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\r\n        auth: { token },\r\n        transports: ['websocket', 'polling'],\r\n        reconnection: true,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        reconnectionAttempts: this.maxReconnectAttempts,\r\n        forceNew: true,\r\n        timeout: 10000,\r\n        closeOnBeforeunload: false\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('✅ Socket connected successfully');\r\n        this.reconnectAttempts = 0;\r\n        this.clearReconnectInterval();\r\n        this.startHeartbeat();\r\n      });\r\n\r\n      this.socket.on('reconnect', (attemptNumber) => {\r\n        console.log('✅ Socket reconnected after', attemptNumber, 'attempts');\r\n        this.reconnectAttempts = 0;\r\n        this.clearReconnectInterval();\r\n        this.startHeartbeat();\r\n      });\r\n\r\n      this.socket.on('reconnect_attempt', (attemptNumber) => {\r\n        console.log('🔄 Reconnection attempt:', attemptNumber);\r\n        this.reconnectAttempts = attemptNumber;\r\n      });\r\n\r\n      this.socket.on('connect_error', (error: Error) => {\r\n        console.error('❌ Socket connection error:', error);\r\n        \r\n        // If error is related to authentication, try to refresh token\r\n        if (error.message.includes('Authentication error') || error.message.includes('Invalid token')) {\r\n          console.log('🔑 Authentication error detected, attempting token refresh...');\r\n          this.handleAuthError();\r\n        }\r\n      });\r\n\r\n      this.socket.on('disconnect', (reason) => {\r\n        console.log('🔌 Socket disconnected:', reason);\r\n        this.stopHeartbeat();\r\n        \r\n        // Handle different disconnect reasons\r\n        if (reason === 'io server disconnect' || reason === 'io client disconnect') {\r\n          console.log('⚠️ Permanent disconnect detected');\r\n        } else {\r\n          console.log('🔄 Temporary disconnect, will attempt reconnect...');\r\n          this.startReconnectAttempts();\r\n        }\r\n      });\r\n\r\n      this.socket.on('reconnect_failed', () => {\r\n        console.error('❌ Socket failed to reconnect after all attempts');\r\n        this.startReconnectAttempts();\r\n      });\r\n\r\n      this.socket.on('reconnect_error', (error) => {\r\n        console.error('❌ Socket reconnection error:', error);\r\n        \r\n        if (error.message.includes('Authentication error') || error.message.includes('Invalid token')) {\r\n          this.handleAuthError();\r\n        }\r\n      });\r\n\r\n      // Message events\r\n      this.socket.on('newMessage', (message: Message) => {\r\n        console.log('📨 Received new message:', message);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageConfirmed', (message: Message) => {\r\n        console.log('✅ Message confirmed:', message);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageError', (error: { error: string }) => {\r\n        console.error('❌ Message error:', error);\r\n      });\r\n\r\n      // User status events\r\n      this.socket.on('userOnline', (userId: string) => {\r\n        this.userOnlineCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      this.socket.on('userOffline', (userId: string) => {\r\n        this.userOfflineCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      // Typing events\r\n      this.socket.on('userTyping', (data: { userId: string, isTyping: boolean }) => {\r\n        this.typingCallbacks.forEach(callback => callback(data));\r\n      });\r\n    }\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    this.stopHeartbeat();\r\n    this.clearReconnectInterval();\r\n    if (this.socket) {\r\n      this.socket.removeAllListeners();\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  forceReconnect(token: string) {\r\n    console.log('🔄 Force reconnecting socket...');\r\n    this.disconnect();\r\n    return this.connect(token);\r\n  }\r\n\r\n  isConnected() {\r\n    return this.socket && this.socket.connected;\r\n  }\r\n\r\n  private startHeartbeat() {\r\n    this.stopHeartbeat();\r\n    // Send heartbeat every 15 seconds to keep connection alive\r\n    this.heartbeatInterval = setInterval(() => {\r\n      if (this.socket && this.socket.connected) {\r\n        this.socket.emit('heartbeat');\r\n        console.log('💓 Heartbeat sent');\r\n      }\r\n    }, 15000);\r\n  }\r\n\r\n  private stopHeartbeat() {\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval);\r\n      this.heartbeatInterval = null;\r\n    }\r\n  }\r\n\r\n  private clearReconnectInterval() {\r\n    if (this.reconnectInterval) {\r\n      clearInterval(this.reconnectInterval);\r\n      this.reconnectInterval = null;\r\n    }\r\n  }\r\n\r\n  private startReconnectAttempts() {\r\n    if (this.reconnectInterval) return; // Already trying to reconnect\r\n\r\n    this.reconnectInterval = setInterval(async () => {\r\n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n        console.log('⚠️ Max reconnect attempts reached, trying token refresh...');\r\n        await this.handleAuthError();\r\n        return;\r\n      }\r\n\r\n      if (!this.isConnected() && this.currentToken) {\r\n        console.log(`🔄 Manual reconnect attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts}`);\r\n        this.reconnectAttempts++;\r\n        this.forceReconnect(this.currentToken);\r\n      } else if (this.isConnected()) {\r\n        console.log('✅ Socket reconnected successfully');\r\n        this.clearReconnectInterval();\r\n        this.reconnectAttempts = 0;\r\n      }\r\n    }, 5000);\r\n  }\r\n\r\n  private async handleAuthError() {\r\n    try {\r\n      console.log('🔑 Attempting to refresh token...');\r\n      \r\n      // Try to refresh token using localStorage directly\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/v1/auth/refresh`, {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const newToken = data.accessToken;\r\n        \r\n        // Update localStorage\r\n        localStorage.setItem('token', newToken);\r\n        this.currentToken = newToken;\r\n        \r\n        console.log('✅ Token refreshed, reconnecting socket...');\r\n        this.forceReconnect(newToken);\r\n      } else {\r\n        console.error('❌ Token refresh failed, redirecting to login...');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error during token refresh:', error);\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n  }\r\n\r\n  // Method to update token when it's refreshed externally\r\n  updateToken(newToken: string) {\r\n    if (this.currentToken !== newToken) {\r\n      console.log('🔑 Updating socket token...');\r\n      this.currentToken = newToken;\r\n      if (this.isConnected()) {\r\n        this.forceReconnect(newToken);\r\n      }\r\n    }\r\n  }\r\n\r\n  sendMessage(receiverId: string, content: string, messageType: string = 'text') {\r\n    if (this.socket && this.socket.connected) {\r\n      this.socket.emit('sendMessage', { receiverId, content, messageType });\r\n    } else {\r\n      console.warn('⚠️ Socket not connected, cannot send message');\r\n    }\r\n  }\r\n\r\n  onMessage(callback: MessageCallback) {\r\n    this.messageCallbacks.push(callback);\r\n    return () => this.removeMessageCallback(callback);\r\n  }\r\n\r\n  onUserOnline(callback: UserOnlineCallback) {\r\n    this.userOnlineCallbacks.push(callback);\r\n    return () => this.removeUserOnlineCallback(callback);\r\n  }\r\n\r\n  onUserOffline(callback: UserOfflineCallback) {\r\n    this.userOfflineCallbacks.push(callback);\r\n    return () => this.removeUserOfflineCallback(callback);\r\n  }\r\n\r\n  // Keep for backward compatibility\r\n  onUserStatus(callback: UserOnlineCallback) {\r\n    return this.onUserOnline(callback);\r\n  }\r\n\r\n  onTyping(callback: TypingCallback) {\r\n    this.typingCallbacks.push(callback);\r\n    return () => this.removeTypingCallback(callback);\r\n  }\r\n\r\n  sendTypingStatus(receiverId: string, isTyping: boolean) {\r\n    if (this.socket && this.socket.connected) {\r\n      this.socket.emit('typing', { receiverId, isTyping });\r\n    }\r\n  }\r\n\r\n  markAsRead(senderId: string) {\r\n    if (this.socket && this.socket.connected) {\r\n      this.socket.emit('markAsRead', { senderId });\r\n    }\r\n  }\r\n\r\n  off(event: string) {\r\n    if (this.socket) {\r\n      this.socket.off(event);\r\n    }\r\n  }\r\n\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n\r\n  private removeMessageCallback(callback: MessageCallback) {\r\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserOnlineCallback(callback: UserOnlineCallback) {\r\n    this.userOnlineCallbacks = this.userOnlineCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserOfflineCallback(callback: UserOfflineCallback) {\r\n    this.userOfflineCallbacks = this.userOfflineCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeTypingCallback(callback: TypingCallback) {\r\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\r\n  }\r\n}\r\n\r\nexport const socketService = new SocketService();\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}