{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { userAPI, authAPI } from '../services/api';\nimport socketService from '../services/socketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const savedUser = localStorage.getItem('user');\n    const savedToken = localStorage.getItem('token');\n    if (savedUser && savedToken) {\n      setUser(JSON.parse(savedUser));\n      setToken(savedToken);\n      setIsAuthenticated(true);\n\n      // Update socket service with existing token\n      socketService.updateToken(savedToken);\n    }\n  }, []);\n  const login = (userData, accessToken) => {\n    setUser(userData);\n    setToken(accessToken);\n    setIsAuthenticated(true);\n    localStorage.setItem('user', JSON.stringify(userData));\n    localStorage.setItem('token', accessToken);\n\n    // Update socket service with new token\n    socketService.updateToken(accessToken);\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n\n    // Disconnect socket service\n    socketService.disconnect();\n  };\n  const updateUser = updatedUserData => {\n    if (user) {\n      const newUser = {\n        ...user,\n        ...updatedUserData\n      };\n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n    }\n  };\n  const refreshUserData = useCallback(async () => {\n    if (user && token) {\n      try {\n        // Send heartbeat to keep user online\n        await authAPI.heartbeat();\n        const userData = await userAPI.getCurrentUser();\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n      } catch (error) {\n        console.error('Failed to refresh user data:', error);\n        // If heartbeat fails, user might be offline - don't force logout yet\n      }\n    }\n  }, [user, token]); // Auto-refresh token before it expires\n  const refreshTokenPeriodically = useCallback(async () => {\n    if (token) {\n      try {\n        const response = await authAPI.refreshToken();\n        const newToken = response.accessToken;\n        setToken(newToken);\n        localStorage.setItem('token', newToken);\n\n        // Update socket service with new token\n        socketService.updateToken(newToken);\n        console.log('🔄 Token auto-refreshed and socket updated');\n      } catch (error) {\n        console.error('❌ Failed to refresh token:', error);\n        logout();\n      }\n    }\n  }, [token]); // Check for user data updates and send heartbeat every 30 seconds\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      const interval = setInterval(() => {\n        refreshUserData();\n      }, 30000); // Check every 30 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [isAuthenticated, user, refreshUserData]); // Added user to dependencies\n  // Auto-refresh token every 20 hours (before it expires)\n  useEffect(() => {\n    if (isAuthenticated && token) {\n      const interval = setInterval(() => {\n        refreshTokenPeriodically();\n      }, 20 * 60 * 60 * 1000); // Refresh every 20 hours\n\n      return () => clearInterval(interval);\n    }\n  }, [isAuthenticated, token, refreshTokenPeriodically]);\n  const value = {\n    user,\n    isAuthenticated,\n    login,\n    logout,\n    updateUser,\n    token\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"t2gOCNCPFX5zVMqpR4jNiYmiknA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","userAPI","authAPI","socketService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","savedUser","localStorage","getItem","savedToken","JSON","parse","updateToken","login","userData","accessToken","setItem","stringify","logout","removeItem","disconnect","updateUser","updatedUserData","newUser","refreshUserData","heartbeat","getCurrentUser","error","console","refreshTokenPeriodically","response","refreshToken","newToken","log","interval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\r\nimport { User, AuthContextType } from '../types';\r\nimport { userAPI, authAPI } from '../services/api';\r\nimport socketService from '../services/socketService';\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  useEffect(() => {\r\n    // Check if user is logged in on app start\r\n    const savedUser = localStorage.getItem('user');\r\n    const savedToken = localStorage.getItem('token');\r\n    \r\n    if (savedUser && savedToken) {\r\n      setUser(JSON.parse(savedUser));\r\n      setToken(savedToken);\r\n      setIsAuthenticated(true);\r\n      \r\n      // Update socket service with existing token\r\n      socketService.updateToken(savedToken);\r\n    }\r\n  }, []);\r\n  const login = (userData: User, accessToken: string) => {\r\n    setUser(userData);\r\n    setToken(accessToken);\r\n    setIsAuthenticated(true);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    localStorage.setItem('token', accessToken);\r\n    \r\n    // Update socket service with new token\r\n    socketService.updateToken(accessToken);\r\n  };  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    \r\n    // Disconnect socket service\r\n    socketService.disconnect();\r\n  };\r\n  const updateUser = (updatedUserData: Partial<User>) => {\r\n    if (user) {\r\n      const newUser = { ...user, ...updatedUserData };\r\n      setUser(newUser);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n    }\r\n  };  const refreshUserData = useCallback(async () => {\r\n    if (user && token) {\r\n      try {\r\n        // Send heartbeat to keep user online\r\n        await authAPI.heartbeat();\r\n        \r\n        const userData = await userAPI.getCurrentUser();\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n      } catch (error) {\r\n        console.error('Failed to refresh user data:', error);\r\n        // If heartbeat fails, user might be offline - don't force logout yet\r\n      }\r\n    }\r\n  }, [user, token]);  // Auto-refresh token before it expires\r\n  const refreshTokenPeriodically = useCallback(async () => {\r\n    if (token) {\r\n      try {\r\n        const response = await authAPI.refreshToken();\r\n        const newToken = response.accessToken;\r\n        setToken(newToken);\r\n        localStorage.setItem('token', newToken);\r\n        \r\n        // Update socket service with new token\r\n        socketService.updateToken(newToken);\r\n        \r\n        console.log('🔄 Token auto-refreshed and socket updated');\r\n      } catch (error) {\r\n        console.error('❌ Failed to refresh token:', error);\r\n        logout();\r\n      }\r\n    }\r\n  }, [token]);  // Check for user data updates and send heartbeat every 30 seconds\r\n  useEffect(() => {\r\n    if (isAuthenticated && user) {\r\n      const interval = setInterval(() => {\r\n        refreshUserData();\r\n      }, 30000); // Check every 30 seconds\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isAuthenticated, user, refreshUserData]); // Added user to dependencies\r\n  // Auto-refresh token every 20 hours (before it expires)\r\n  useEffect(() => {\r\n    if (isAuthenticated && token) {\r\n      const interval = setInterval(() => {\r\n        refreshTokenPeriodically();\r\n      }, 20 * 60 * 60 * 1000); // Refresh every 20 hours\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isAuthenticated, token, refreshTokenPeriodically]);\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    updateUser,\r\n    token\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}