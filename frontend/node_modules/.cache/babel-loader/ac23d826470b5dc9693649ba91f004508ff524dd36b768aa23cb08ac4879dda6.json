{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { userAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [adminData, setAdminData] = useState({\n    users: [],\n    lastFetched: 0\n  });\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const savedUser = localStorage.getItem('user');\n    const savedToken = localStorage.getItem('token');\n    if (savedUser && savedToken) {\n      const parsedUser = JSON.parse(savedUser);\n      setUser(parsedUser);\n      setToken(savedToken);\n      setIsAuthenticated(true);\n\n      // If user is admin, preload data\n      if (parsedUser.role === 'admin') {\n        preloadAdminData();\n      }\n    }\n  }, []);\n  const preloadAdminData = async () => {\n    try {\n      // Check if cache is still valid\n      const now = Date.now();\n      if (now - adminData.lastFetched < CACHE_DURATION && adminData.users.length > 0) {\n        return;\n      }\n      const usersData = await userAPI.getAllUsers();\n      setAdminData({\n        users: usersData,\n        lastFetched: now\n      });\n    } catch (error) {\n      console.error('Error preloading admin data:', error);\n    }\n  };\n  const login = async (response, accessToken) => {\n    try {\n      // Extract user data from response\n      const userData = response.user || response;\n\n      // Ensure we have all required user fields\n      if (!userData._id || !userData.username) {\n        throw new Error('Dữ liệu người dùng không hợp lệ');\n      }\n\n      // Update state atomically\n      const updates = async () => {\n        setUser(userData);\n        setToken(accessToken);\n        setIsAuthenticated(true);\n\n        // Update localStorage\n        localStorage.setItem('user', JSON.stringify(userData));\n        localStorage.setItem('token', accessToken);\n\n        // Load admin data if needed\n        if (userData.role === 'admin') {\n          await preloadAdminData();\n        }\n      };\n      await updates();\n\n      // Refresh user data to ensure we have latest info\n      await refreshUserData();\n    } catch (error) {\n      console.error('Error during login:', error);\n      // Clean up if there's an error\n      setUser(null);\n      setToken(null);\n      setIsAuthenticated(false);\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      throw error;\n    }\n  };\n  const logout = () => {\n    // Clear state immediately\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n    setAdminData({\n      users: [],\n      lastFetched: 0\n    });\n\n    // Clear localStorage in background\n    Promise.all([localStorage.removeItem('user'), localStorage.removeItem('token')]).catch(console.error);\n  };\n  const updateUser = updatedUserData => {\n    if (user) {\n      const newUser = {\n        ...user,\n        ...updatedUserData\n      };\n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n    }\n  };\n  const refreshUserData = async () => {\n    if (user && token) {\n      try {\n        const userData = await userAPI.getCurrentUser();\n        updateUser(userData);\n        // Clear admin data cache when refreshing\n        setAdminData({\n          users: [],\n          lastFetched: 0\n        });\n        if (userData.role === 'admin') {\n          await preloadAdminData();\n        }\n      } catch (error) {\n        console.error('Error refreshing user data:', error);\n      }\n    }\n  };\n\n  // Add new function to clear cache\n  const clearCache = () => {\n    setAdminData({\n      users: [],\n      lastFetched: 0\n    });\n  };\n  const getUsers = () => {\n    return adminData.users;\n  };\n  const refreshUsers = async () => {\n    if ((user === null || user === void 0 ? void 0 : user.role) === 'admin') {\n      await preloadAdminData();\n    }\n  };\n\n  // Modify value object to include clearCache\n  const value = {\n    user,\n    isAuthenticated,\n    login,\n    logout,\n    updateUser,\n    token,\n    refreshUserData,\n    getUsers,\n    refreshUsers,\n    clearCache\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"liOwm4KWqIFsfrgFxemdOKFeXms=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","userAPI","jsxDEV","_jsxDEV","CACHE_DURATION","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","adminData","setAdminData","users","lastFetched","savedUser","localStorage","getItem","savedToken","parsedUser","JSON","parse","role","preloadAdminData","now","Date","length","usersData","getAllUsers","error","console","login","response","accessToken","userData","_id","username","Error","updates","setItem","stringify","refreshUserData","removeItem","logout","Promise","all","catch","updateUser","updatedUserData","newUser","getCurrentUser","clearCache","getUsers","refreshUsers","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, AuthContextType } from '../types';\r\nimport { userAPI } from '../services/api';\r\n\r\ninterface AdminData {\r\n  users: User[];\r\n  lastFetched: number;\r\n}\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [adminData, setAdminData] = useState<AdminData>({ users: [], lastFetched: 0 });\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on app start\r\n    const savedUser = localStorage.getItem('user');\r\n    const savedToken = localStorage.getItem('token');\r\n    \r\n    if (savedUser && savedToken) {\r\n      const parsedUser = JSON.parse(savedUser);\r\n      setUser(parsedUser);\r\n      setToken(savedToken);\r\n      setIsAuthenticated(true);\r\n\r\n      // If user is admin, preload data\r\n      if (parsedUser.role === 'admin') {\r\n        preloadAdminData();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const preloadAdminData = async () => {\r\n    try {\r\n      // Check if cache is still valid\r\n      const now = Date.now();\r\n      if (now - adminData.lastFetched < CACHE_DURATION && adminData.users.length > 0) {\r\n        return;\r\n      }\r\n\r\n      const usersData = await userAPI.getAllUsers();\r\n      setAdminData({\r\n        users: usersData,\r\n        lastFetched: now\r\n      });\r\n    } catch (error) {\r\n      console.error('Error preloading admin data:', error);\r\n    }\r\n  };\r\n  const login = async (response: any, accessToken: string) => {\r\n    try {\r\n      // Extract user data from response\r\n      const userData = response.user || response;\r\n      \r\n      // Ensure we have all required user fields\r\n      if (!userData._id || !userData.username) {\r\n        throw new Error('Dữ liệu người dùng không hợp lệ');\r\n      }\r\n\r\n      // Update state atomically\r\n      const updates = async () => {\r\n        setUser(userData);\r\n        setToken(accessToken);\r\n        setIsAuthenticated(true);\r\n\r\n        // Update localStorage\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        localStorage.setItem('token', accessToken);\r\n\r\n        // Load admin data if needed\r\n        if (userData.role === 'admin') {\r\n          await preloadAdminData();\r\n        }\r\n      };\r\n\r\n      await updates();\r\n\r\n      // Refresh user data to ensure we have latest info\r\n      await refreshUserData();\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      // Clean up if there's an error\r\n      setUser(null);\r\n      setToken(null);\r\n      setIsAuthenticated(false);\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('token');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear state immediately\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setAdminData({ users: [], lastFetched: 0 });\r\n\r\n    // Clear localStorage in background\r\n    Promise.all([\r\n      localStorage.removeItem('user'),\r\n      localStorage.removeItem('token')\r\n    ]).catch(console.error);\r\n  };\r\n\r\n  const updateUser = (updatedUserData: Partial<User>) => {\r\n    if (user) {\r\n      const newUser = { ...user, ...updatedUserData };\r\n      setUser(newUser);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n    }\r\n  };\r\n\r\n  const refreshUserData = async () => {\r\n    if (user && token) {\r\n      try {\r\n        const userData = await userAPI.getCurrentUser();\r\n        updateUser(userData);\r\n        // Clear admin data cache when refreshing\r\n        setAdminData({ users: [], lastFetched: 0 });\r\n        if (userData.role === 'admin') {\r\n          await preloadAdminData();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error refreshing user data:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Add new function to clear cache\r\n  const clearCache = () => {\r\n    setAdminData({ users: [], lastFetched: 0 });\r\n  };\r\n\r\n  const getUsers = () => {\r\n    return adminData.users;\r\n  };\r\n\r\n  const refreshUsers = async () => {\r\n    if (user?.role === 'admin') {\r\n      await preloadAdminData();\r\n    }\r\n  };\r\n\r\n  // Modify value object to include clearCache\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    updateUser,\r\n    token,\r\n    refreshUserData,\r\n    getUsers,\r\n    refreshUsers,\r\n    clearCache,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}