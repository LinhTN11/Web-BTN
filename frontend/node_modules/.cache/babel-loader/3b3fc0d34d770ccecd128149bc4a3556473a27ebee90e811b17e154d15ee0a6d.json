{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { userAPI, authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [adminData, setAdminData] = useState({\n    users: [],\n    lastFetched: 0\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const refreshUserData = async () => {\n    try {\n      const currentUser = await userAPI.getCurrentUser();\n      if (currentUser) {\n        setUser(currentUser);\n        localStorage.setItem('user', JSON.stringify(currentUser));\n      }\n    } catch (error) {\n      console.error('Error refreshing user data:', error);\n    }\n  };\n  const updateUser = updatedUserData => {\n    if (user) {\n      const newUser = {\n        ...user,\n        ...updatedUserData\n      };\n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n    }\n  };\n\n  // Initialize auth state\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const savedUser = localStorage.getItem('user');\n        const savedToken = localStorage.getItem('token');\n        if (savedUser && savedToken) {\n          const parsedUser = JSON.parse(savedUser);\n          setUser(parsedUser);\n          setToken(savedToken);\n          setIsAuthenticated(true);\n\n          // Refresh user data\n          await refreshUserData();\n\n          // If admin, preload admin data\n          if (parsedUser.role === 'admin') {\n            await preloadAdminData();\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const preloadAdminData = async () => {\n    try {\n      const now = Date.now();\n      if (now - adminData.lastFetched < CACHE_DURATION && adminData.users.length > 0) {\n        return adminData.users;\n      }\n      const users = await userAPI.getAllUsers();\n      if (Array.isArray(users)) {\n        setAdminData({\n          users,\n          lastFetched: now\n        });\n        return users;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error preloading admin data:', error);\n      throw error;\n    }\n  };\n  const login = async (response, accessToken) => {\n    try {\n      if (!response.user || !accessToken) {\n        throw new Error('Invalid response data');\n      }\n\n      // Set auth state\n      setUser(response.user);\n      setToken(accessToken);\n      setIsAuthenticated(true);\n\n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(response.user));\n      localStorage.setItem('token', accessToken);\n\n      // If admin, preload data\n      if (response.user.role === 'admin') {\n        await preloadAdminData();\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    try {\n      authAPI.logout();\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      setUser(null);\n      setToken(null);\n      setIsAuthenticated(false);\n      setAdminData({\n        users: [],\n        lastFetched: 0\n      });\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n    }\n  };\n  const getUsers = () => adminData.users;\n  const refreshUsers = async () => {\n    return await preloadAdminData();\n  };\n  const clearCache = () => {\n    setAdminData({\n      users: [],\n      lastFetched: 0\n    });\n  };\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    login,\n    logout,\n    updateUser,\n    refreshUserData,\n    getUsers,\n    refreshUsers,\n    clearCache\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"7qdjf9Z2HTj1mCT32VH3RMlMg/Q=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","userAPI","authAPI","jsxDEV","_jsxDEV","CACHE_DURATION","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","adminData","setAdminData","users","lastFetched","isLoading","setIsLoading","refreshUserData","currentUser","getCurrentUser","localStorage","setItem","JSON","stringify","error","console","updateUser","updatedUserData","newUser","initializeAuth","savedUser","getItem","savedToken","parsedUser","parse","role","preloadAdminData","removeItem","now","Date","length","getAllUsers","Array","isArray","login","response","accessToken","Error","logout","getUsers","refreshUsers","clearCache","value","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, AuthContextType } from '../types';\r\nimport { userAPI, authAPI } from '../services/api';\r\n\r\ninterface AdminData {\r\n  users: User[];\r\n  lastFetched: number;\r\n}\r\n\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [adminData, setAdminData] = useState<AdminData>({ users: [], lastFetched: 0 });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const refreshUserData = async () => {\r\n    try {\r\n      const currentUser = await userAPI.getCurrentUser();\r\n      if (currentUser) {\r\n        setUser(currentUser);\r\n        localStorage.setItem('user', JSON.stringify(currentUser));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing user data:', error);\r\n    }\r\n  };\r\n\r\n  const updateUser = (updatedUserData: Partial<User>) => {\r\n    if (user) {\r\n      const newUser = { ...user, ...updatedUserData };\r\n      setUser(newUser);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n    }\r\n  };\r\n\r\n  // Initialize auth state\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      try {\r\n        const savedUser = localStorage.getItem('user');\r\n        const savedToken = localStorage.getItem('token');\r\n        \r\n        if (savedUser && savedToken) {\r\n          const parsedUser = JSON.parse(savedUser);\r\n          setUser(parsedUser);\r\n          setToken(savedToken);\r\n          setIsAuthenticated(true);\r\n\r\n          // Refresh user data\r\n          await refreshUserData();\r\n          \r\n          // If admin, preload admin data\r\n          if (parsedUser.role === 'admin') {\r\n            await preloadAdminData();\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing auth:', error);\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const preloadAdminData = async () => {\r\n    try {\r\n      const now = Date.now();\r\n      if (now - adminData.lastFetched < CACHE_DURATION && adminData.users.length > 0) {\r\n        return adminData.users;\r\n      }\r\n\r\n      const users = await userAPI.getAllUsers();\r\n      if (Array.isArray(users)) {\r\n        setAdminData({\r\n          users,\r\n          lastFetched: now\r\n        });\r\n        return users;\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error preloading admin data:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const login = async (response: any, accessToken: string) => {\r\n    try {\r\n      if (!response.user || !accessToken) {\r\n        throw new Error('Invalid response data');\r\n      }\r\n\r\n      // Set auth state\r\n      setUser(response.user);\r\n      setToken(accessToken);\r\n      setIsAuthenticated(true);\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem('user', JSON.stringify(response.user));\r\n      localStorage.setItem('token', accessToken);\r\n\r\n      // If admin, preload data\r\n      if (response.user.role === 'admin') {\r\n        await preloadAdminData();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    try {\r\n      authAPI.logout();\r\n    } catch (error) {\r\n      console.error('Error during logout:', error);\r\n    } finally {\r\n      setUser(null);\r\n      setToken(null);\r\n      setIsAuthenticated(false);\r\n      setAdminData({ users: [], lastFetched: 0 });\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('token');\r\n    }\r\n  };\r\n\r\n  const getUsers = () => adminData.users;\r\n\r\n  const refreshUsers = async () => {\r\n    return await preloadAdminData();\r\n  };\r\n\r\n  const clearCache = () => {\r\n    setAdminData({ users: [], lastFetched: 0 });\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    updateUser,\r\n    refreshUserData,\r\n    getUsers,\r\n    refreshUsers,\r\n    clearCache\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}