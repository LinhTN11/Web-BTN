{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.messageCallbacks = [];\n    this.userStatusCallbacks = [];\n    this.typingCallbacks = [];\n  }\n  connect(token) {\n    if (!this.socket) {\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\n        auth: {\n          token\n        },\n        transports: ['websocket']\n      });\n      this.socket.on('connect', () => {\n        console.log('Socket connected');\n      });\n      this.socket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n      }); // Message events\n      this.socket.on('newMessage', message => {\n        console.log('Received new message:', message);\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageConfirmed', message => {\n        console.log('Message confirmed:', message);\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageError', error => {\n        console.error('Message error:', error);\n      });\n\n      // User status events\n      this.socket.on('userOnline', userId => {\n        this.userStatusCallbacks.forEach(callback => callback(userId));\n      });\n      this.socket.on('userOffline', userId => {\n        this.userStatusCallbacks.forEach(callback => callback(userId));\n      });\n\n      // Typing events\n      this.socket.on('userTyping', data => {\n        this.typingCallbacks.forEach(callback => callback(data));\n      });\n    }\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  sendMessage(receiverId, content, messageType = 'text') {\n    if (this.socket) {\n      this.socket.emit('sendMessage', {\n        receiverId,\n        content,\n        messageType\n      });\n    }\n  }\n  onMessage(callback) {\n    this.messageCallbacks.push(callback);\n    return () => this.removeMessageCallback(callback);\n  }\n  onUserStatus(callback) {\n    this.userStatusCallbacks.push(callback);\n    return () => this.removeUserStatusCallback(callback);\n  }\n  onTyping(callback) {\n    this.typingCallbacks.push(callback);\n    return () => this.removeTypingCallback(callback);\n  }\n  sendTypingStatus(receiverId, isTyping) {\n    if (this.socket) {\n      this.socket.emit('typing', {\n        receiverId,\n        isTyping\n      });\n    }\n  }\n  markAsRead(senderId) {\n    if (this.socket) {\n      this.socket.emit('markAsRead', {\n        senderId\n      });\n    }\n  }\n  off(event) {\n    if (this.socket) {\n      this.socket.off(event);\n    }\n  }\n  getSocket() {\n    return this.socket;\n  }\n  removeMessageCallback(callback) {\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\n  }\n  removeUserStatusCallback(callback) {\n    this.userStatusCallbacks = this.userStatusCallbacks.filter(cb => cb !== callback);\n  }\n  removeTypingCallback(callback) {\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","messageCallbacks","userStatusCallbacks","typingCallbacks","connect","token","process","env","REACT_APP_API_URL","auth","transports","on","console","log","error","message","forEach","callback","userId","data","disconnect","sendMessage","receiverId","content","messageType","emit","onMessage","push","removeMessageCallback","onUserStatus","removeUserStatusCallback","onTyping","removeTypingCallback","sendTypingStatus","isTyping","markAsRead","senderId","off","event","getSocket","filter","cb","socketService"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nimport { Message, ChatUser } from './chatService';\r\n\r\ntype MessageCallback = (message: Message) => void;\r\ntype UserStatusCallback = (userId: string) => void;\r\ntype TypingCallback = (data: { userId: string, isTyping: boolean }) => void;\r\n\r\nclass SocketService {\r\n  private socket: Socket | null = null;\r\n  private messageCallbacks: MessageCallback[] = [];\r\n  private userStatusCallbacks: UserStatusCallback[] = [];\r\n  private typingCallbacks: TypingCallback[] = [];\r\n\r\n  connect(token: string) {\r\n    if (!this.socket) {\r\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\r\n        auth: { token },\r\n        transports: ['websocket']\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Socket connected');\r\n      });\r\n\r\n      this.socket.on('connect_error', (error: Error) => {\r\n        console.error('Socket connection error:', error);\r\n      });      // Message events\r\n      this.socket.on('newMessage', (message: Message) => {\r\n        console.log('Received new message:', message);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageConfirmed', (message: Message) => {\r\n        console.log('Message confirmed:', message);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageError', (error: { error: string }) => {\r\n        console.error('Message error:', error);\r\n      });\r\n\r\n      // User status events\r\n      this.socket.on('userOnline', (userId: string) => {\r\n        this.userStatusCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      this.socket.on('userOffline', (userId: string) => {\r\n        this.userStatusCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      // Typing events\r\n      this.socket.on('userTyping', (data: { userId: string, isTyping: boolean }) => {\r\n        this.typingCallbacks.forEach(callback => callback(data));\r\n      });\r\n    }\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  sendMessage(receiverId: string, content: string, messageType: string = 'text') {\r\n    if (this.socket) {\r\n      this.socket.emit('sendMessage', { receiverId, content, messageType });\r\n    }\r\n  }\r\n\r\n  onMessage(callback: MessageCallback) {\r\n    this.messageCallbacks.push(callback);\r\n    return () => this.removeMessageCallback(callback);\r\n  }\r\n\r\n  onUserStatus(callback: UserStatusCallback) {\r\n    this.userStatusCallbacks.push(callback);\r\n    return () => this.removeUserStatusCallback(callback);\r\n  }\r\n\r\n  onTyping(callback: TypingCallback) {\r\n    this.typingCallbacks.push(callback);\r\n    return () => this.removeTypingCallback(callback);\r\n  }\r\n\r\n  sendTypingStatus(receiverId: string, isTyping: boolean) {\r\n    if (this.socket) {\r\n      this.socket.emit('typing', { receiverId, isTyping });\r\n    }\r\n  }\r\n\r\n  markAsRead(senderId: string) {\r\n    if (this.socket) {\r\n      this.socket.emit('markAsRead', { senderId });\r\n    }\r\n  }\r\n\r\n  off(event: string) {\r\n    if (this.socket) {\r\n      this.socket.off(event);\r\n    }\r\n  }\r\n\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n\r\n  private removeMessageCallback(callback: MessageCallback) {\r\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserStatusCallback(callback: UserStatusCallback) {\r\n    this.userStatusCallbacks = this.userStatusCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeTypingCallback(callback: TypingCallback) {\r\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\r\n  }\r\n}\r\n\r\nexport const socketService = new SocketService();\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}