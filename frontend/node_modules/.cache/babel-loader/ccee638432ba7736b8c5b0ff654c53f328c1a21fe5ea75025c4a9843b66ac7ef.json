{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\Components\\\\Chat\\\\MessengerChatPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Card, Typography, Input, Button, List, Avatar, Space, Divider, Badge, Row, Col, Tooltip } from 'antd';\nimport { SendOutlined, UserOutlined, MessageOutlined } from '@ant-design/icons';\nimport { useAuth } from '../../contexts/AuthContext';\nimport socketService from '../../services/socketService';\nimport { chatService } from '../../services/chatService';\nimport './MessengerChatPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst {\n  TextArea\n} = Input;\nconst MessengerChatPage = () => {\n  _s();\n  const {\n    user,\n    token\n  } = useAuth();\n  const [message, setMessage] = useState('');\n  const [messagesByConversation, setMessagesByConversation] = useState({});\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [typing, setTyping] = useState({});\n  const typingTimeoutRef = useRef({});\n  const messagesEndRef = useRef(null);\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const loadMessages = useCallback(async userId => {\n    try {\n      const messages = await chatService.getMessages(userId);\n      console.log('API getMessages for', userId, 'returned', messages);\n\n      // Ensure messages is an array\n      const messagesArray = Array.isArray(messages) ? messages : [];\n\n      // Sort messages by timestamp\n      const sortedMessages = messagesArray.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n      setMessagesByConversation(prev => {\n        const newState = {\n          ...prev,\n          [userId]: sortedMessages\n        };\n        console.log('setMessagesByConversation after loadMessages:', newState);\n        return newState;\n      });\n      scrollToBottom();\n      // Mark messages as read\n      chatService.markAsRead(userId).catch(error => console.error('Error marking messages as read:', error));\n    } catch (error) {\n      console.error('Error loading messages:', error);\n      // Set empty array on error\n      setMessagesByConversation(prev => ({\n        ...prev,\n        [userId]: []\n      }));\n    }\n  }, []);\n  const loadActiveUsers = useCallback(async () => {\n    try {\n      const users = await chatService.getActiveUsers();\n      console.log('loadActiveUsers API response:', users);\n\n      // Ensure users is an array and filter out current user\n      const usersArray = Array.isArray(users) ? users : [];\n      const filteredUsers = usersArray.filter(u => u._id !== (user === null || user === void 0 ? void 0 : user._id));\n      setActiveUsers(filteredUsers);\n\n      // Auto-select first user if no user is selected and there are users available\n      if (!selectedUser && filteredUsers.length > 0) {\n        setSelectedUser(filteredUsers[0]);\n      }\n    } catch (error) {\n      console.error('Error loading active users:', error);\n      setActiveUsers([]); // Ensure we always have an array\n    }\n  }, [user === null || user === void 0 ? void 0 : user._id, selectedUser]);\n  useEffect(() => {\n    if (token && !socketConnected) {\n      console.log('Connecting socket with token');\n      const socket = socketService.connect(`Bearer ${token}`);\n      if (socket) {\n        socket.on('connect', () => {\n          console.log('Socket connected successfully');\n          setSocketConnected(true);\n          // Reload messages when reconnected\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n          loadActiveUsers();\n        });\n        socket.on('reconnect', () => {\n          console.log('Socket reconnected successfully');\n          setSocketConnected(true);\n          // Reload messages when reconnected\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n          loadActiveUsers();\n        });\n        socket.on('connect_error', error => {\n          console.error('Socket connection error:', error);\n          setSocketConnected(false);\n        });\n        socket.on('disconnect', reason => {\n          console.log('Socket disconnected:', reason);\n          // Only set disconnected for permanent disconnections\n          if (reason === 'io server disconnect' || reason === 'io client disconnect') {\n            setSocketConnected(false);\n          }\n          // For temporary disconnections, keep the connected state and let reconnect handle it\n        });\n      }\n      loadActiveUsers();\n      return () => {\n        console.log('Cleaning up socket connection');\n        if (socketService.isConnected()) {\n          socketService.disconnect();\n        }\n        setSocketConnected(false);\n      };\n    }\n  }, [token, loadActiveUsers, selectedUser, loadMessages]);\n  useEffect(() => {\n    if (socketConnected) {\n      const messageHandler = newMessage => {\n        console.log('messageHandler called:', newMessage, 'Current user:', user, 'Selected:', selectedUser);\n\n        // Extract IDs correctly regardless of the format\n        const senderId = typeof newMessage.sender === 'string' ? newMessage.sender : newMessage.sender._id;\n        const receiverId = typeof newMessage.receiver === 'string' ? newMessage.receiver : newMessage.receiver._id;\n        const userId = String(user === null || user === void 0 ? void 0 : user._id); // Only update conversation if we're either the sender or receiver\n        if (senderId === userId || receiverId === userId) {\n          // Get the ID of the other person in the conversation\n          const conversationId = senderId === userId ? receiverId : senderId;\n          setMessagesByConversation(prev => {\n            const conversationMessages = prev[conversationId] || [];\n\n            // Check if this is confirming an optimistic message\n            const optimisticIndex = conversationMessages.findIndex(msg => msg._id.startsWith('temp_') && msg.content === newMessage.content && senderId === userId && Math.abs(new Date(msg.timestamp).getTime() - new Date(newMessage.timestamp).getTime()) < 5000 // Within 5 seconds\n            );\n            if (optimisticIndex !== -1) {\n              // Replace optimistic message with real message\n              const updatedMessages = [...conversationMessages];\n              updatedMessages[optimisticIndex] = {\n                ...newMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(newMessage._id)\n              };\n              return {\n                ...prev,\n                [conversationId]: updatedMessages.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime())\n              };\n            }\n\n            // Check if message already exists by ID\n            const exists = conversationMessages.some(msg => String(msg._id) === String(newMessage._id));\n            if (!exists) {\n              // Normalize IDs to string for consistency\n              const normalizedMessage = {\n                ...newMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(newMessage._id)\n              };\n\n              // Sort messages by timestamp\n              const updatedMessages = [...conversationMessages, normalizedMessage].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n              return {\n                ...prev,\n                [conversationId]: updatedMessages\n              };\n            }\n            return prev;\n          });\n        }\n\n        // Only scroll if the message belongs to the currently selected conversation\n        if (selectedUser && (senderId === String(selectedUser._id) || receiverId === String(selectedUser._id))) {\n          scrollToBottom();\n        }\n      };\n      const userOnlineHandler = userId => {\n        console.log('User came online:', userId);\n        setActiveUsers(prev => prev.map(user => user._id === userId ? {\n          ...user,\n          isOnline: true\n        } : user));\n      };\n      const userOfflineHandler = userId => {\n        console.log('User went offline:', userId);\n        setActiveUsers(prev => prev.map(user => user._id === userId ? {\n          ...user,\n          isOnline: false\n        } : user));\n      };\n      const typingHandler = ({\n        userId,\n        isTyping\n      }) => {\n        setTyping(prev => ({\n          ...prev,\n          [userId]: isTyping\n        }));\n      };\n      socketService.onMessage(messageHandler);\n      socketService.onUserOnline(userOnlineHandler);\n      socketService.onUserOffline(userOfflineHandler);\n      socketService.onTyping(typingHandler);\n\n      // Handle message confirmation for sender\n      const messageConfirmedHandler = confirmedMessage => {\n        console.log('messageConfirmedHandler called:', confirmedMessage, 'Current user:', user, 'Selected:', selectedUser);\n\n        // Extract IDs correctly\n        const senderId = typeof confirmedMessage.sender === 'string' ? confirmedMessage.sender : confirmedMessage.sender._id;\n        const receiverId = typeof confirmedMessage.receiver === 'string' ? confirmedMessage.receiver : confirmedMessage.receiver._id;\n        const userId = String(user === null || user === void 0 ? void 0 : user._id);\n\n        // Only handle confirmation for messages sent by current user\n        if (senderId === userId) {\n          const conversationId = receiverId;\n          setMessagesByConversation(prev => {\n            const conversationMessages = prev[conversationId] || [];\n\n            // Find and replace temporary message or add new one if not exists\n            const messageExists = conversationMessages.some(msg => String(msg._id) === String(confirmedMessage._id));\n            if (!messageExists) {\n              // If message doesn't exist, add it\n              const normalizedMessage = {\n                ...confirmedMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(confirmedMessage._id)\n              };\n\n              // Remove any temporary messages with same content\n              const filteredMessages = conversationMessages.filter(msg => !(msg.content === confirmedMessage.content && msg._id.toString().length > 10) // temp IDs are typically longer\n              );\n              const updatedMessages = [...filteredMessages, normalizedMessage].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n              return {\n                ...prev,\n                [conversationId]: updatedMessages\n              };\n            }\n            return prev;\n          });\n\n          // Scroll to bottom if this is the selected conversation\n          if (selectedUser && String(selectedUser._id) === conversationId) {\n            scrollToBottom();\n          }\n        }\n      };\n\n      // Listen for messageConfirmed event\n      if (socketService.getSocket()) {\n        var _socketService$getSoc;\n        (_socketService$getSoc = socketService.getSocket()) === null || _socketService$getSoc === void 0 ? void 0 : _socketService$getSoc.on('messageConfirmed', messageConfirmedHandler);\n      }\n      return () => {\n        socketService.off('newMessage');\n        socketService.off('messageConfirmed');\n        socketService.off('userOnline');\n        socketService.off('userOffline');\n        socketService.off('userTyping');\n        if (socketService.getSocket()) {\n          var _socketService$getSoc2;\n          (_socketService$getSoc2 = socketService.getSocket()) === null || _socketService$getSoc2 === void 0 ? void 0 : _socketService$getSoc2.off('messageConfirmed', messageConfirmedHandler);\n        }\n      };\n    }\n  }, [socketConnected, user, selectedUser]);\n  useEffect(() => {\n    if (selectedUser) {\n      loadMessages(selectedUser._id);\n    }\n  }, [selectedUser, loadMessages]);\n\n  // Handle page visibility changes (tab switching)\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        console.log('Page became visible, checking socket connection...');\n\n        // Reconnect socket if needed\n        if (!socketService.isConnected() && token) {\n          console.log('Reconnecting socket after tab switch...');\n          const socket = socketService.connect(`Bearer ${token}`);\n          if (socket) {\n            socket.on('connect', () => {\n              console.log('Reconnected after tab switch');\n              setSocketConnected(true);\n              // Reload data when reconnected\n              loadActiveUsers();\n              if (selectedUser) {\n                loadMessages(selectedUser._id);\n              }\n            });\n          }\n        } else if (socketService.isConnected()) {\n          // Socket is connected, just refresh data\n          console.log('Socket still connected, refreshing data...');\n          loadActiveUsers();\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n        }\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [token, selectedUser, loadActiveUsers, loadMessages]);\n  const handleSendMessage = async () => {\n    if (!message.trim() || !selectedUser || !(user !== null && user !== void 0 && user._id)) return;\n\n    // Check if socket is connected\n    if (!socketService.isConnected()) {\n      console.log('Socket not connected, attempting to reconnect...');\n      const socket = socketService.connect(`Bearer ${token}`);\n      if (socket) {\n        socket.on('connect', () => {\n          console.log('Reconnected, sending message...');\n          setSocketConnected(true);\n          // Send the message after reconnection\n          socketService.sendMessage(selectedUser._id, message.trim());\n        });\n      }\n      return;\n    }\n    const content = message.trim();\n    setMessage('');\n\n    // Optimistic update - add message immediately to UI\n    const optimisticMessage = {\n      _id: `temp_${Date.now()}_${Math.random()}`,\n      // Temporary ID\n      sender: user._id,\n      receiver: selectedUser._id,\n      content: content,\n      timestamp: new Date(),\n      read: false,\n      messageType: 'text',\n      status: 'sending' // Add status to track message state\n    };\n\n    // Add optimistic message to UI immediately\n    setMessagesByConversation(prev => {\n      const conversationMessages = prev[selectedUser._id] || [];\n      return {\n        ...prev,\n        [selectedUser._id]: [...conversationMessages, optimisticMessage]\n      };\n    });\n\n    // Scroll to bottom immediately\n    setTimeout(() => scrollToBottom(), 10);\n    try {\n      // Clear typing status\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n      socketService.sendTypingStatus(selectedUser._id, false);\n\n      // Send through socket\n      socketService.sendMessage(selectedUser._id, content);\n\n      // Set a timeout to mark message as failed if not confirmed within 10 seconds\n      setTimeout(() => {\n        setMessagesByConversation(prev => {\n          const conversationMessages = prev[selectedUser._id] || [];\n          const messageIndex = conversationMessages.findIndex(msg => msg._id === optimisticMessage._id);\n          if (messageIndex !== -1 && conversationMessages[messageIndex]._id.startsWith('temp_')) {\n            // Message still has temp ID, mark as failed\n            const updatedMessages = [...conversationMessages];\n            updatedMessages[messageIndex] = {\n              ...updatedMessages[messageIndex],\n              status: 'failed'\n            };\n            return {\n              ...prev,\n              [selectedUser._id]: updatedMessages\n            };\n          }\n          return prev;\n        });\n      }, 10000);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      // Mark the optimistic message as failed\n      setMessagesByConversation(prev => {\n        const conversationMessages = prev[selectedUser._id] || [];\n        const messageIndex = conversationMessages.findIndex(msg => msg._id === optimisticMessage._id);\n        if (messageIndex !== -1) {\n          const updatedMessages = [...conversationMessages];\n          updatedMessages[messageIndex] = {\n            ...updatedMessages[messageIndex],\n            status: 'failed'\n          };\n          return {\n            ...prev,\n            [selectedUser._id]: updatedMessages\n          };\n        }\n        return prev;\n      });\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const handleTyping = e => {\n    setMessage(e.target.value);\n    if (selectedUser) {\n      // Clear existing timeout\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n\n      // Send typing status\n      socketService.sendTypingStatus(selectedUser._id, true);\n\n      // Set new timeout\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\n        socketService.sendTypingStatus(selectedUser._id, false);\n      }, 2000);\n    }\n  };\n  const formatTime = date => {\n    try {\n      // Handle both Date objects and string timestamps\n      const messageDate = date instanceof Date ? date : new Date(date);\n\n      // Check if date is valid\n      if (isNaN(messageDate.getTime())) {\n        return 'Invalid date';\n      }\n      const now = new Date();\n      const diffMs = now.getTime() - messageDate.getTime();\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n      if (diffMinutes < 1) {\n        return 'Vừa xong';\n      } else if (diffMinutes < 60) {\n        return `${diffMinutes} phút trước`;\n      } else if (diffHours < 24) {\n        return `${diffHours} giờ trước`;\n      } else if (diffDays < 7) {\n        return `${diffDays} ngày trước`;\n      } else {\n        return messageDate.toLocaleDateString('vi-VN');\n      }\n    } catch (error) {\n      console.error('Error formatting time:', error);\n      return 'Invalid date';\n    }\n  };\n  const formatFullDateTime = date => {\n    try {\n      // Handle both Date objects and string timestamps\n      const messageDate = date instanceof Date ? date : new Date(date);\n\n      // Check if date is valid\n      if (isNaN(messageDate.getTime())) {\n        return 'Invalid date';\n      }\n      return messageDate.toLocaleString('vi-VN', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    } catch (error) {\n      console.error('Error formatting full date time:', error);\n      return 'Invalid date';\n    }\n  };\n  const currentMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\n  // Filter users based on search query\n  const filteredUsers = activeUsers.filter(chatUser => chatUser.username.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messenger-chat-page\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 16,\n      style: {\n        height: '100%'\n      },\n      children: [\"        \", /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 8,\n        md: 6,\n        lg: 6,\n        xl: 5,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Search users by name...\",\n            value: searchQuery,\n            onChange: e => setSearchQuery(e.target.value),\n            style: {\n              width: '100%'\n            },\n            allowClear: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this),\n          className: \"users-card\",\n          bodyStyle: {\n            padding: 0\n          },\n          children: [\"            \", /*#__PURE__*/_jsxDEV(List, {\n            dataSource: filteredUsers,\n            renderItem: chatUser => /*#__PURE__*/_jsxDEV(List.Item, {\n              className: `user-item ${(selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id) === chatUser._id ? 'selected' : ''}`,\n              onClick: () => setSelectedUser(chatUser),\n              children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n                avatar: /*#__PURE__*/_jsxDEV(Badge, {\n                  dot: true,\n                  status: chatUser.isOnline ? 'success' : 'default',\n                  offset: [-2, 32],\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 593,\n                      columnNumber: 33\n                    }, this),\n                    src: chatUser.avatar,\n                    size: \"large\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 592,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 587,\n                  columnNumber: 23\n                }, this),\n                title: /*#__PURE__*/_jsxDEV(Text, {\n                  strong: true,\n                  children: chatUser.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 599,\n                  columnNumber: 28\n                }, this),\n                description: typing[chatUser._id] ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Typing...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 601,\n                  columnNumber: 25\n                }, this) : chatUser.isOnline ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Online\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 603,\n                  columnNumber: 25\n                }, this) : chatUser.lastSeen ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"secondary\",\n                  children: [\"Last seen at \", formatTime(chatUser.lastSeen)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 605,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"secondary\",\n                  children: \"Offline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 609,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 59\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 16,\n        md: 18,\n        lg: 18,\n        xl: 19,\n        children: selectedUser ? /*#__PURE__*/_jsxDEV(Card, {\n          className: \"chat-card\",\n          title: /*#__PURE__*/_jsxDEV(Space, {\n            children: [/*#__PURE__*/_jsxDEV(Badge, {\n              dot: true,\n              status: selectedUser.isOnline ? 'success' : 'default',\n              offset: [-2, 32],\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 630,\n                  columnNumber: 29\n                }, this),\n                src: selectedUser.avatar,\n                size: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 624,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: selectedUser.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 19\n            }, this), typing[selectedUser._id] && /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              italic: true,\n              children: \"typing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 21\n            }, this), !socketConnected && /*#__PURE__*/_jsxDEV(Text, {\n              type: \"warning\",\n              style: {\n                fontSize: '12px',\n                marginLeft: '8px'\n              },\n              children: \"\\u26A0\\uFE0F Reconnecting...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 17\n          }, this),\n          style: {\n            height: 'calc(100vh - 200px)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-container\",\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              dataSource: currentMessages,\n              renderItem: msg => {\n                const senderId = typeof msg.sender === 'string' ? msg.sender : msg.sender._id;\n                const isOwnMessage = String(user === null || user === void 0 ? void 0 : user._id) === String(senderId);\n                const isOptimistic = msg._id.startsWith('temp_');\n                const messageStatus = msg.status;\n                return /*#__PURE__*/_jsxDEV(List.Item, {\n                  className: `message-item ${isOwnMessage ? 'own-message' : 'other-message'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-content\",\n                    children: [\"                          \", /*#__PURE__*/_jsxDEV(Tooltip, {\n                      title: formatFullDateTime(msg.timestamp),\n                      placement: isOwnMessage ? 'left' : 'right',\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"message-bubble\",\n                        style: {\n                          backgroundColor: isOwnMessage ? '#1890ff' : '#e4e6eb',\n                          color: isOwnMessage ? '#ffffff' : '#000000',\n                          opacity: isOptimistic ? 0.7 : 1,\n                          // Show optimistic messages as slightly transparent\n                          transition: 'opacity 0.2s ease' // Smooth transition when message is confirmed\n                        },\n                        children: [\"                              \", /*#__PURE__*/_jsxDEV(Text, {\n                          style: {\n                            color: 'inherit'\n                          },\n                          children: msg.content\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 674,\n                          columnNumber: 60\n                        }, this), isOptimistic && messageStatus === 'sending' && /*#__PURE__*/_jsxDEV(Text, {\n                          style: {\n                            color: 'inherit',\n                            fontSize: '10px',\n                            marginLeft: '8px',\n                            opacity: 0.8\n                          },\n                          children: \"\\u23F3\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 676,\n                          columnNumber: 33\n                        }, this), isOptimistic && messageStatus === 'failed' && /*#__PURE__*/_jsxDEV(Text, {\n                          style: {\n                            color: 'inherit',\n                            fontSize: '10px',\n                            marginLeft: '8px',\n                            opacity: 0.8,\n                            cursor: 'pointer'\n                          },\n                          onClick: () => {\n                            // Retry sending the message\n                            socketService.sendMessage(selectedUser._id, msg.content);\n                            // Update status back to sending\n                            setMessagesByConversation(prev => {\n                              const conversationMessages = prev[selectedUser._id] || [];\n                              const messageIndex = conversationMessages.findIndex(m => m._id === msg._id);\n                              if (messageIndex !== -1) {\n                                const updatedMessages = [...conversationMessages];\n                                updatedMessages[messageIndex] = {\n                                  ...updatedMessages[messageIndex],\n                                  status: 'sending'\n                                };\n                                return {\n                                  ...prev,\n                                  [selectedUser._id]: updatedMessages\n                                };\n                              }\n                              return prev;\n                            });\n                          },\n                          title: \"Click to retry\",\n                          children: \"\\u274C Retry\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 686,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 666,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 662,\n                      columnNumber: 84\n                    }, this), \"                          \", /*#__PURE__*/_jsxDEV(Text, {\n                      type: \"secondary\",\n                      className: \"message-time\",\n                      children: formatTime(msg.timestamp)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 721,\n                      columnNumber: 63\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 662,\n                    columnNumber: 25\n                  }, this)\n                }, msg._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 658,\n                  columnNumber: 51\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              margin: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-input-container\",\n            children: /*#__PURE__*/_jsxDEV(Space.Compact, {\n              style: {\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextArea, {\n                value: message,\n                onChange: handleTyping,\n                onKeyPress: handleKeyPress,\n                placeholder: \"Type a message...\",\n                autoSize: {\n                  minRows: 1,\n                  maxRows: 4\n                },\n                style: {\n                  resize: 'none'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 736,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"primary\",\n                icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 746,\n                  columnNumber: 27\n                }, this),\n                onClick: handleSendMessage,\n                disabled: !message.trim(),\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 744,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Card, {\n          className: \"no-chat-selected\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center',\n              padding: '60px 20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(MessageOutlined, {\n              style: {\n                fontSize: '48px',\n                color: '#d9d9d9'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 758,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Title, {\n              level: 4,\n              type: \"secondary\",\n              children: \"Select a conversation to start chatting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 759,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              children: \"Choose from your existing conversations on the left or start a new one.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 564,\n    columnNumber: 5\n  }, this);\n};\n_s(MessengerChatPage, \"MfEOCAP+m+A654GT/qnuBswqIAU=\", false, function () {\n  return [useAuth];\n});\n_c = MessengerChatPage;\nexport default MessengerChatPage;\nvar _c;\n$RefreshReg$(_c, \"MessengerChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Card","Typography","Input","Button","List","Avatar","Space","Divider","Badge","Row","Col","Tooltip","SendOutlined","UserOutlined","MessageOutlined","useAuth","socketService","chatService","jsxDEV","_jsxDEV","Title","Text","TextArea","MessengerChatPage","_s","user","token","message","setMessage","messagesByConversation","setMessagesByConversation","activeUsers","setActiveUsers","selectedUser","setSelectedUser","typing","setTyping","typingTimeoutRef","messagesEndRef","socketConnected","setSocketConnected","searchQuery","setSearchQuery","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","loadMessages","userId","messages","getMessages","console","log","messagesArray","Array","isArray","sortedMessages","sort","a","b","Date","timestamp","getTime","prev","newState","markAsRead","catch","error","loadActiveUsers","users","getActiveUsers","usersArray","filteredUsers","filter","u","_id","length","socket","connect","on","reason","isConnected","disconnect","messageHandler","newMessage","senderId","sender","receiverId","receiver","String","conversationId","conversationMessages","optimisticIndex","findIndex","msg","startsWith","content","Math","abs","updatedMessages","exists","some","normalizedMessage","userOnlineHandler","map","isOnline","userOfflineHandler","typingHandler","isTyping","onMessage","onUserOnline","onUserOffline","onTyping","messageConfirmedHandler","confirmedMessage","messageExists","filteredMessages","toString","getSocket","_socketService$getSoc","off","_socketService$getSoc2","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener","handleSendMessage","trim","sendMessage","optimisticMessage","now","random","read","messageType","status","setTimeout","clearTimeout","sendTypingStatus","messageIndex","handleKeyPress","e","key","shiftKey","preventDefault","handleTyping","target","value","formatTime","date","messageDate","isNaN","diffMs","diffMinutes","floor","diffHours","diffDays","toLocaleDateString","formatFullDateTime","toLocaleString","weekday","year","month","day","hour","minute","second","currentMessages","chatUser","username","toLowerCase","includes","className","children","gutter","style","height","xs","sm","md","lg","xl","title","placeholder","onChange","width","allowClear","fileName","_jsxFileName","lineNumber","columnNumber","bodyStyle","padding","dataSource","renderItem","Item","onClick","Meta","avatar","dot","offset","icon","src","size","strong","description","type","lastSeen","italic","fontSize","marginLeft","isOwnMessage","isOptimistic","messageStatus","placement","backgroundColor","color","opacity","transition","cursor","m","ref","margin","Compact","onKeyPress","autoSize","minRows","maxRows","resize","disabled","textAlign","level","_c","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/Components/Chat/MessengerChatPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Input, \r\n  Button, \r\n  List, \r\n  Avatar, \r\n  Space,\r\n  Divider,\r\n  Badge,\r\n  Row,\r\n  Col,\r\n  Tooltip\r\n} from 'antd';\r\nimport { \r\n  SendOutlined, \r\n  UserOutlined,\r\n  MessageOutlined \r\n} from '@ant-design/icons';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport socketService from '../../services/socketService';\r\nimport { chatService, Message, ChatUser } from '../../services/chatService';\r\nimport './MessengerChatPage.css';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst MessengerChatPage: React.FC = () => {\r\n  const { user, token } = useAuth();\r\n  const [message, setMessage] = useState('');\r\n  const [messagesByConversation, setMessagesByConversation] = useState<{ [key: string]: Message[] }>({});\r\n  const [activeUsers, setActiveUsers] = useState<ChatUser[]>([]);\r\n  const [selectedUser, setSelectedUser] = useState<ChatUser | null>(null);\r\n  const [typing, setTyping] = useState<{ [key: string]: boolean }>({});\r\n  const typingTimeoutRef = useRef<{ [key: string]: NodeJS.Timeout }>({});\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n  const loadMessages = useCallback(async (userId: string) => {\r\n    try {\r\n      const messages = await chatService.getMessages(userId);\r\n      console.log('API getMessages for', userId, 'returned', messages);\r\n      \r\n      // Ensure messages is an array\r\n      const messagesArray = Array.isArray(messages) ? messages : [];\r\n      \r\n      // Sort messages by timestamp\r\n      const sortedMessages = messagesArray.sort((a, b) => \r\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n      );\r\n      setMessagesByConversation(prev => {\r\n        const newState = {\r\n          ...prev,\r\n          [userId]: sortedMessages\r\n        };\r\n        console.log('setMessagesByConversation after loadMessages:', newState);\r\n        return newState;\r\n      });\r\n      scrollToBottom();\r\n      // Mark messages as read\r\n      chatService.markAsRead(userId)\r\n        .catch(error => console.error('Error marking messages as read:', error));\r\n    } catch (error) {\r\n      console.error('Error loading messages:', error);\r\n      // Set empty array on error\r\n      setMessagesByConversation(prev => ({\r\n        ...prev,\r\n        [userId]: []\r\n      }));\r\n    }\r\n  }, []);const loadActiveUsers = useCallback(async () => {\r\n    try {\r\n      const users = await chatService.getActiveUsers();\r\n      console.log('loadActiveUsers API response:', users);\r\n      \r\n      // Ensure users is an array and filter out current user\r\n      const usersArray = Array.isArray(users) ? users : [];\r\n      const filteredUsers = usersArray.filter(u => u._id !== user?._id);\r\n      setActiveUsers(filteredUsers);\r\n      \r\n      // Auto-select first user if no user is selected and there are users available\r\n      if (!selectedUser && filteredUsers.length > 0) {\r\n        setSelectedUser(filteredUsers[0]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading active users:', error);\r\n      setActiveUsers([]); // Ensure we always have an array\r\n    }\r\n  }, [user?._id, selectedUser]);useEffect(() => {\r\n    if (token && !socketConnected) {\r\n      console.log('Connecting socket with token');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      \r\n      if (socket) {        socket.on('connect', () => {\r\n          console.log('Socket connected successfully');\r\n          setSocketConnected(true);\r\n          // Reload messages when reconnected\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n          loadActiveUsers();\r\n        });\r\n\r\n        socket.on('reconnect', () => {\r\n          console.log('Socket reconnected successfully');\r\n          setSocketConnected(true);\r\n          // Reload messages when reconnected\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n          loadActiveUsers();\r\n        });\r\n\r\n        socket.on('connect_error', (error: Error) => {\r\n          console.error('Socket connection error:', error);\r\n          setSocketConnected(false);\r\n        });\r\n\r\n        socket.on('disconnect', (reason) => {\r\n          console.log('Socket disconnected:', reason);\r\n          // Only set disconnected for permanent disconnections\r\n          if (reason === 'io server disconnect' || reason === 'io client disconnect') {\r\n            setSocketConnected(false);\r\n          }\r\n          // For temporary disconnections, keep the connected state and let reconnect handle it\r\n        });\r\n      }\r\n\r\n      loadActiveUsers();\r\n\r\n      return () => {\r\n        console.log('Cleaning up socket connection');\r\n        if (socketService.isConnected()) {\r\n          socketService.disconnect();\r\n        }\r\n        setSocketConnected(false);\r\n      };\r\n    }\r\n  }, [token, loadActiveUsers, selectedUser, loadMessages]);\r\n  useEffect(() => {\r\n    if (socketConnected) {\r\n      const messageHandler = (newMessage: Message) => {\r\n        console.log('messageHandler called:', newMessage, 'Current user:', user, 'Selected:', selectedUser);\r\n\r\n        // Extract IDs correctly regardless of the format\r\n        const senderId = typeof newMessage.sender === 'string' \r\n          ? newMessage.sender \r\n          : newMessage.sender._id;\r\n        \r\n        const receiverId = typeof newMessage.receiver === 'string'\r\n          ? newMessage.receiver \r\n          : newMessage.receiver._id;\r\n        \r\n        const userId = String(user?._id);        // Only update conversation if we're either the sender or receiver\r\n        if (senderId === userId || receiverId === userId) {\r\n          // Get the ID of the other person in the conversation\r\n          const conversationId = senderId === userId ? receiverId : senderId;\r\n          \r\n          setMessagesByConversation(prev => {\r\n            const conversationMessages = prev[conversationId] || [];\r\n            \r\n            // Check if this is confirming an optimistic message\r\n            const optimisticIndex = conversationMessages.findIndex(msg => \r\n              msg._id.startsWith('temp_') && \r\n              msg.content === newMessage.content && \r\n              senderId === userId &&\r\n              Math.abs(new Date(msg.timestamp).getTime() - new Date(newMessage.timestamp).getTime()) < 5000 // Within 5 seconds\r\n            );\r\n\r\n            if (optimisticIndex !== -1) {\r\n              // Replace optimistic message with real message\r\n              const updatedMessages = [...conversationMessages];\r\n              updatedMessages[optimisticIndex] = {\r\n                ...newMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(newMessage._id)\r\n              };\r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages.sort((a, b) => \r\n                  new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n                )\r\n              };\r\n            }\r\n\r\n            // Check if message already exists by ID\r\n            const exists = conversationMessages.some(msg => \r\n              String(msg._id) === String(newMessage._id)\r\n            );\r\n            \r\n            if (!exists) {\r\n              // Normalize IDs to string for consistency\r\n              const normalizedMessage = {\r\n                ...newMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(newMessage._id)\r\n              };\r\n\r\n              // Sort messages by timestamp\r\n              const updatedMessages = [...conversationMessages, normalizedMessage]\r\n                .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages\r\n              };\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n\r\n        // Only scroll if the message belongs to the currently selected conversation\r\n        if (selectedUser && (\r\n          senderId === String(selectedUser._id) || \r\n          receiverId === String(selectedUser._id)\r\n        )) {\r\n          scrollToBottom();\r\n        }\r\n      };      const userOnlineHandler = (userId: string) => {\r\n        console.log('User came online:', userId);\r\n        setActiveUsers(prev => \r\n          prev.map(user => \r\n            user._id === userId ? { ...user, isOnline: true } : user\r\n          )\r\n        );\r\n      };\r\n\r\n      const userOfflineHandler = (userId: string) => {\r\n        console.log('User went offline:', userId);\r\n        setActiveUsers(prev => \r\n          prev.map(user => \r\n            user._id === userId ? { ...user, isOnline: false } : user\r\n          )\r\n        );\r\n      };\r\n\r\n      const typingHandler = ({ userId, isTyping }: { userId: string, isTyping: boolean }) => {\r\n        setTyping(prev => ({ ...prev, [userId]: isTyping }));\r\n      };      socketService.onMessage(messageHandler);\r\n      socketService.onUserOnline(userOnlineHandler);\r\n      socketService.onUserOffline(userOfflineHandler);\r\n      socketService.onTyping(typingHandler);\r\n\r\n      // Handle message confirmation for sender\r\n      const messageConfirmedHandler = (confirmedMessage: Message) => {\r\n        console.log('messageConfirmedHandler called:', confirmedMessage, 'Current user:', user, 'Selected:', selectedUser);\r\n        \r\n        // Extract IDs correctly\r\n        const senderId = typeof confirmedMessage.sender === 'string' \r\n          ? confirmedMessage.sender \r\n          : confirmedMessage.sender._id;\r\n        \r\n        const receiverId = typeof confirmedMessage.receiver === 'string'\r\n          ? confirmedMessage.receiver \r\n          : confirmedMessage.receiver._id;\r\n        \r\n        const userId = String(user?._id);\r\n        \r\n        // Only handle confirmation for messages sent by current user\r\n        if (senderId === userId) {\r\n          const conversationId = receiverId;\r\n          \r\n          setMessagesByConversation(prev => {\r\n            const conversationMessages = prev[conversationId] || [];\r\n            \r\n            // Find and replace temporary message or add new one if not exists\r\n            const messageExists = conversationMessages.some(msg => \r\n              String(msg._id) === String(confirmedMessage._id)\r\n            );\r\n            \r\n            if (!messageExists) {\r\n              // If message doesn't exist, add it\r\n              const normalizedMessage = {\r\n                ...confirmedMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(confirmedMessage._id)\r\n              };\r\n              \r\n              // Remove any temporary messages with same content\r\n              const filteredMessages = conversationMessages.filter(msg => \r\n                !(msg.content === confirmedMessage.content && \r\n                  msg._id.toString().length > 10) // temp IDs are typically longer\r\n              );\r\n              \r\n              const updatedMessages = [...filteredMessages, normalizedMessage]\r\n                .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages\r\n              };\r\n            }\r\n            \r\n            return prev;\r\n          });\r\n          \r\n          // Scroll to bottom if this is the selected conversation\r\n          if (selectedUser && String(selectedUser._id) === conversationId) {\r\n            scrollToBottom();\r\n          }\r\n        }\r\n      };\r\n\r\n      // Listen for messageConfirmed event\r\n      if (socketService.getSocket()) {\r\n        socketService.getSocket()?.on('messageConfirmed', messageConfirmedHandler);\r\n      }\r\n\r\n      return () => {\r\n        socketService.off('newMessage');\r\n        socketService.off('messageConfirmed');\r\n        socketService.off('userOnline');\r\n        socketService.off('userOffline');\r\n        socketService.off('userTyping');\r\n        if (socketService.getSocket()) {\r\n          socketService.getSocket()?.off('messageConfirmed', messageConfirmedHandler);\r\n        }\r\n      };\r\n    }\r\n  }, [socketConnected, user, selectedUser]);\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      loadMessages(selectedUser._id);\r\n    }\r\n  }, [selectedUser, loadMessages]);\r\n\r\n  // Handle page visibility changes (tab switching)\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'visible') {\r\n        console.log('Page became visible, checking socket connection...');\r\n        \r\n        // Reconnect socket if needed\r\n        if (!socketService.isConnected() && token) {\r\n          console.log('Reconnecting socket after tab switch...');\r\n          const socket = socketService.connect(`Bearer ${token}`);\r\n          if (socket) {\r\n            socket.on('connect', () => {\r\n              console.log('Reconnected after tab switch');\r\n              setSocketConnected(true);\r\n              // Reload data when reconnected\r\n              loadActiveUsers();\r\n              if (selectedUser) {\r\n                loadMessages(selectedUser._id);\r\n              }\r\n            });\r\n          }\r\n        } else if (socketService.isConnected()) {\r\n          // Socket is connected, just refresh data\r\n          console.log('Socket still connected, refreshing data...');\r\n          loadActiveUsers();\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, [token, selectedUser, loadActiveUsers, loadMessages]);const handleSendMessage = async () => {\r\n    if (!message.trim() || !selectedUser || !user?._id) return;\r\n\r\n    // Check if socket is connected\r\n    if (!socketService.isConnected()) {\r\n      console.log('Socket not connected, attempting to reconnect...');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      if (socket) {\r\n        socket.on('connect', () => {\r\n          console.log('Reconnected, sending message...');\r\n          setSocketConnected(true);\r\n          // Send the message after reconnection\r\n          socketService.sendMessage(selectedUser._id, message.trim());\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    const content = message.trim();\r\n    setMessage('');\r\n\r\n    // Optimistic update - add message immediately to UI\r\n    const optimisticMessage: Message & { status?: string } = {\r\n      _id: `temp_${Date.now()}_${Math.random()}`, // Temporary ID\r\n      sender: user._id,\r\n      receiver: selectedUser._id,\r\n      content: content,\r\n      timestamp: new Date(),\r\n      read: false,\r\n      messageType: 'text',\r\n      status: 'sending' // Add status to track message state\r\n    };\r\n\r\n    // Add optimistic message to UI immediately\r\n    setMessagesByConversation(prev => {\r\n      const conversationMessages = prev[selectedUser._id] || [];\r\n      return {\r\n        ...prev,\r\n        [selectedUser._id]: [...conversationMessages, optimisticMessage]\r\n      };\r\n    });\r\n\r\n    // Scroll to bottom immediately\r\n    setTimeout(() => scrollToBottom(), 10);\r\n\r\n    try {\r\n      // Clear typing status\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n      socketService.sendTypingStatus(selectedUser._id, false);\r\n\r\n      // Send through socket\r\n      socketService.sendMessage(selectedUser._id, content);\r\n\r\n      // Set a timeout to mark message as failed if not confirmed within 10 seconds\r\n      setTimeout(() => {\r\n        setMessagesByConversation(prev => {\r\n          const conversationMessages = prev[selectedUser._id] || [];\r\n          const messageIndex = conversationMessages.findIndex(msg => \r\n            msg._id === optimisticMessage._id\r\n          );\r\n          \r\n          if (messageIndex !== -1 && conversationMessages[messageIndex]._id.startsWith('temp_')) {\r\n            // Message still has temp ID, mark as failed\r\n            const updatedMessages = [...conversationMessages];\r\n            updatedMessages[messageIndex] = {\r\n              ...updatedMessages[messageIndex],\r\n              status: 'failed'\r\n            } as Message & { status?: string };\r\n            \r\n            return {\r\n              ...prev,\r\n              [selectedUser._id]: updatedMessages\r\n            };\r\n          }\r\n          return prev;\r\n        });\r\n      }, 10000);\r\n        \r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      // Mark the optimistic message as failed\r\n      setMessagesByConversation(prev => {\r\n        const conversationMessages = prev[selectedUser._id] || [];\r\n        const messageIndex = conversationMessages.findIndex(msg => \r\n          msg._id === optimisticMessage._id\r\n        );\r\n        \r\n        if (messageIndex !== -1) {\r\n          const updatedMessages = [...conversationMessages];\r\n          updatedMessages[messageIndex] = {\r\n            ...updatedMessages[messageIndex],\r\n            status: 'failed'\r\n          } as Message & { status?: string };\r\n          \r\n          return {\r\n            ...prev,\r\n            [selectedUser._id]: updatedMessages\r\n          };\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleTyping = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessage(e.target.value);\r\n    \r\n    if (selectedUser) {\r\n      // Clear existing timeout\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n\r\n      // Send typing status\r\n      socketService.sendTypingStatus(selectedUser._id, true);\r\n\r\n      // Set new timeout\r\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\r\n        socketService.sendTypingStatus(selectedUser._id, false);\r\n      }, 2000);\r\n    }\r\n  };  const formatTime = (date: Date | string) => {\r\n    try {\r\n      // Handle both Date objects and string timestamps\r\n      const messageDate = date instanceof Date ? date : new Date(date);\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(messageDate.getTime())) {\r\n        return 'Invalid date';\r\n      }\r\n\r\n      const now = new Date();\r\n      const diffMs = now.getTime() - messageDate.getTime();\r\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\r\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\r\n\r\n      if (diffMinutes < 1) {\r\n        return 'Vừa xong';\r\n      } else if (diffMinutes < 60) {\r\n        return `${diffMinutes} phút trước`;\r\n      } else if (diffHours < 24) {\r\n        return `${diffHours} giờ trước`;\r\n      } else if (diffDays < 7) {\r\n        return `${diffDays} ngày trước`;\r\n      } else {\r\n        return messageDate.toLocaleDateString('vi-VN');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error formatting time:', error);\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n  const formatFullDateTime = (date: Date | string) => {\r\n    try {\r\n      // Handle both Date objects and string timestamps\r\n      const messageDate = date instanceof Date ? date : new Date(date);\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(messageDate.getTime())) {\r\n        return 'Invalid date';\r\n      }\r\n\r\n      return messageDate.toLocaleString('vi-VN', {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long', \r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n      });\r\n    } catch (error) {\r\n      console.error('Error formatting full date time:', error);\r\n      return 'Invalid date';\r\n    }};\r\n  const currentMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\r\n  // Filter users based on search query\r\n  const filteredUsers = activeUsers.filter(chatUser => \r\n    chatUser.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"messenger-chat-page\">\r\n      <Row gutter={16} style={{ height: '100%' }}>        <Col xs={24} sm={8} md={6} lg={6} xl={5}>\r\n          <Card \r\n            title={\r\n              <Input\r\n                placeholder=\"Search users by name...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                style={{ width: '100%' }}\r\n                allowClear\r\n              />\r\n            }\r\n            className=\"users-card\"\r\n            bodyStyle={{ padding: 0 }}\r\n          >            <List\r\n              dataSource={filteredUsers}\r\n              renderItem={(chatUser) => (\r\n                <List.Item\r\n                  className={`user-item ${selectedUser?._id === chatUser._id ? 'selected' : ''}`}\r\n                  onClick={() => setSelectedUser(chatUser)}\r\n                >\r\n                  <List.Item.Meta\r\n                    avatar={\r\n                      <Badge \r\n                        dot \r\n                        status={chatUser.isOnline ? 'success' : 'default'}\r\n                        offset={[-2, 32]}\r\n                      >\r\n                        <Avatar \r\n                          icon={<UserOutlined />} \r\n                          src={chatUser.avatar}\r\n                          size=\"large\"\r\n                        />\r\n                      </Badge>\r\n                    }\r\n                    title={<Text strong>{chatUser.username}</Text>}                    description={\r\n                      typing[chatUser._id] ? (\r\n                        <Text type=\"success\">Typing...</Text>\r\n                      ) : chatUser.isOnline ? (\r\n                        <Text type=\"success\">Online</Text>\r\n                      ) : chatUser.lastSeen ? (\r\n                        <Text type=\"secondary\">\r\n                          Last seen at {formatTime(chatUser.lastSeen)}\r\n                        </Text>\r\n                      ) : (\r\n                        <Text type=\"secondary\">Offline</Text>\r\n                      )\r\n                    }\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col xs={24} sm={16} md={18} lg={18} xl={19}>\r\n          {selectedUser ? (\r\n            <Card\r\n              className=\"chat-card\"              title={\r\n                <Space>\r\n                  <Badge \r\n                    dot \r\n                    status={selectedUser.isOnline ? 'success' : 'default'}\r\n                    offset={[-2, 32]}\r\n                  >\r\n                    <Avatar \r\n                      icon={<UserOutlined />} \r\n                      src={selectedUser.avatar}\r\n                      size=\"large\"\r\n                    />\r\n                  </Badge>\r\n                  <span>{selectedUser.username}</span>\r\n                  {typing[selectedUser._id] && (\r\n                    <Text type=\"secondary\" italic>typing...</Text>\r\n                  )}\r\n                  {!socketConnected && (\r\n                    <Text type=\"warning\" style={{ fontSize: '12px', marginLeft: '8px' }}>\r\n                      ⚠️ Reconnecting...\r\n                    </Text>\r\n                  )}\r\n                </Space>\r\n              }\r\n              style={{\r\n                height: 'calc(100vh - 200px)'\r\n              }}\r\n            >\r\n              <div className=\"messages-container\">\r\n                <List\r\n                  dataSource={currentMessages}                  renderItem={(msg) => {\r\n                    const senderId = typeof msg.sender === 'string' ? msg.sender : msg.sender._id;\r\n                    const isOwnMessage = String(user?._id) === String(senderId);\r\n                    const isOptimistic = msg._id.startsWith('temp_');\r\n                    const messageStatus = (msg as any).status;\r\n                    \r\n                    return (                      <List.Item\r\n                        key={msg._id}\r\n                        className={`message-item ${isOwnMessage ? 'own-message' : 'other-message'}`}\r\n                      >\r\n                        <div className=\"message-content\">                          <Tooltip \r\n                            title={formatFullDateTime(msg.timestamp)}\r\n                            placement={isOwnMessage ? 'left' : 'right'}\r\n                          >\r\n                            <div \r\n                              className=\"message-bubble\"\r\n                              style={{\r\n                                backgroundColor: isOwnMessage ? '#1890ff' : '#e4e6eb',\r\n                                color: isOwnMessage ? '#ffffff' : '#000000',\r\n                                opacity: isOptimistic ? 0.7 : 1, // Show optimistic messages as slightly transparent\r\n                                transition: 'opacity 0.2s ease' // Smooth transition when message is confirmed\r\n                              }}\r\n                            >                              <Text style={{ color: 'inherit' }}>{msg.content}</Text>\r\n                              {isOptimistic && messageStatus === 'sending' && (\r\n                                <Text style={{ \r\n                                  color: 'inherit', \r\n                                  fontSize: '10px', \r\n                                  marginLeft: '8px',\r\n                                  opacity: 0.8 \r\n                                }}>\r\n                                  ⏳\r\n                                </Text>\r\n                              )}\r\n                              {isOptimistic && messageStatus === 'failed' && (\r\n                                <Text \r\n                                  style={{ \r\n                                    color: 'inherit', \r\n                                    fontSize: '10px', \r\n                                    marginLeft: '8px',\r\n                                    opacity: 0.8,\r\n                                    cursor: 'pointer'\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    // Retry sending the message\r\n                                    socketService.sendMessage(selectedUser._id, msg.content);\r\n                                    // Update status back to sending\r\n                                    setMessagesByConversation(prev => {\r\n                                      const conversationMessages = prev[selectedUser._id] || [];\r\n                                      const messageIndex = conversationMessages.findIndex(m => m._id === msg._id);\r\n                                      if (messageIndex !== -1) {\r\n                                        const updatedMessages = [...conversationMessages];\r\n                                        updatedMessages[messageIndex] = {\r\n                                          ...updatedMessages[messageIndex],\r\n                                          status: 'sending'\r\n                                        } as Message & { status?: string };\r\n                                        return {\r\n                                          ...prev,\r\n                                          [selectedUser._id]: updatedMessages\r\n                                        };\r\n                                      }\r\n                                      return prev;\r\n                                    });\r\n                                  }}\r\n                                  title=\"Click to retry\"\r\n                                >\r\n                                  ❌ Retry\r\n                                </Text>\r\n                              )}\r\n                            </div>\r\n                          </Tooltip>                          <Text type=\"secondary\" className=\"message-time\">\r\n                            {formatTime(msg.timestamp)}\r\n                          </Text>\r\n                        </div>\r\n                      </List.Item>\r\n                    );\r\n                  }}\r\n                />\r\n                <div ref={messagesEndRef} />\r\n              </div>\r\n\r\n              <Divider style={{ margin: 0 }} />\r\n\r\n              <div className=\"message-input-container\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                  <TextArea\r\n                    value={message}\r\n                    onChange={handleTyping}\r\n                    onKeyPress={handleKeyPress}\r\n                    placeholder=\"Type a message...\"\r\n                    autoSize={{ minRows: 1, maxRows: 4 }}\r\n                    style={{ resize: 'none' }}\r\n                  />\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<SendOutlined />}\r\n                    onClick={handleSendMessage}\r\n                    disabled={!message.trim()}\r\n                  >\r\n                    Send\r\n                  </Button>\r\n                </Space.Compact>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <Card className=\"no-chat-selected\">\r\n              <div style={{ textAlign: 'center', padding: '60px 20px' }}>\r\n                <MessageOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\r\n                <Title level={4} type=\"secondary\">Select a conversation to start chatting</Title>\r\n                <Text type=\"secondary\">\r\n                  Choose from your existing conversations on the left or start a new one.\r\n                </Text>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessengerChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}