{"ast":null,"code":"import api from './api';\nexport const chatService = {\n  getMessages: async userId => {\n    try {\n      var _response$data$data;\n      const response = await api.get(`/v1/chat/conversation/${userId}`);\n      // Ensure we're getting the correct data structure\n      const messages = Array.isArray(response.data) ? response.data : ((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.messages) || response.data.messages || [];\n\n      // Ensure each message has the correct structure\n      return messages.map(msg => ({\n        _id: msg._id || '',\n        content: msg.content || '',\n        sender: typeof msg.sender === 'object' ? msg.sender : {\n          _id: msg.sender,\n          username: 'Unknown'\n        },\n        receiver: typeof msg.receiver === 'object' ? msg.receiver : {\n          _id: msg.receiver,\n          username: 'Unknown'\n        },\n        messageType: msg.messageType || 'text',\n        timestamp: new Date(msg.timestamp),\n        read: Boolean(msg.read)\n      }));\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      return [];\n    }\n  },\n  sendMessage: async (receiverId, content, messageType = 'text') => {\n    const response = await api.post('/v1/chat/send', {\n      receiverId,\n      content,\n      messageType\n    });\n    return response.data;\n  },\n  markAsRead: async senderId => {\n    await api.post('/v1/chat/read', {\n      senderId\n    });\n  },\n  getActiveUsers: async () => {\n    try {\n      const response = await api.get('/v1/chat/users');\n      return response.data.data.users;\n    } catch (error) {\n      console.error('Error fetching active users:', error);\n      return [];\n    }\n  },\n  getConversations: async () => {\n    const response = await api.get('/v1/chat/conversations');\n    return response.data;\n  },\n  getUnreadCount: async () => {\n    const response = await api.get('/v1/chat/unread-count');\n    return response.data.unreadCount;\n  },\n  // Add new function to get user by ID\n  getUserById: async userId => {\n    try {\n      const response = await api.get(`/v1/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n  }\n};\nexport default chatService;","map":{"version":3,"names":["api","chatService","getMessages","userId","_response$data$data","response","get","messages","Array","isArray","data","map","msg","_id","content","sender","username","receiver","messageType","timestamp","Date","read","Boolean","error","console","sendMessage","receiverId","post","markAsRead","senderId","getActiveUsers","users","getConversations","getUnreadCount","unreadCount","getUserById"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/chatService.ts"],"sourcesContent":["import api from './api';\r\n\r\nexport interface MessageUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface Message {\r\n  _id: string;\r\n  content: string;\r\n  sender: string | MessageUser;\r\n  receiver: string | MessageUser;\r\n  messageType: 'text' | 'image' | 'file';\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\nexport interface ChatUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n  isOnline: boolean;\r\n  lastSeen?: Date;\r\n}\r\n\r\nexport const chatService = {  getMessages: async (userId: string): Promise<Message[]> => {\r\n    try {\r\n      const response = await api.get(`/v1/chat/conversation/${userId}`);\r\n      // Ensure we're getting the correct data structure\r\n      const messages = Array.isArray(response.data) ? response.data : \r\n                      (response.data.data?.messages || response.data.messages || []);\r\n      \r\n      // Ensure each message has the correct structure\r\n      return messages.map((msg: any) => ({\r\n        _id: msg._id || '',\r\n        content: msg.content || '',\r\n        sender: typeof msg.sender === 'object' ? msg.sender : { _id: msg.sender, username: 'Unknown' },\r\n        receiver: typeof msg.receiver === 'object' ? msg.receiver : { _id: msg.receiver, username: 'Unknown' },\r\n        messageType: msg.messageType || 'text',\r\n        timestamp: new Date(msg.timestamp),\r\n        read: Boolean(msg.read)\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  sendMessage: async (receiverId: string, content: string, messageType: string = 'text'): Promise<Message> => {\r\n    const response = await api.post('/v1/chat/send', {\r\n      receiverId,\r\n      content,\r\n      messageType\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  markAsRead: async (senderId: string): Promise<void> => {\r\n    await api.post('/v1/chat/read', { senderId });\r\n  },\r\n  getActiveUsers: async (): Promise<ChatUser[]> => {\r\n    try {\r\n      const response = await api.get('/v1/chat/users');\r\n      return response.data.data.users;\r\n    } catch (error) {\r\n      console.error('Error fetching active users:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  getConversations: async (): Promise<{\r\n    user: ChatUser;\r\n    lastMessage: Message | null;\r\n    unreadCount: number;\r\n  }[]> => {\r\n    const response = await api.get('/v1/chat/conversations');\r\n    return response.data;\r\n  },\r\n\r\n  getUnreadCount: async (): Promise<number> => {\r\n    const response = await api.get('/v1/chat/unread-count');\r\n    return response.data.unreadCount;\r\n  },\r\n\r\n  // Add new function to get user by ID\r\n  getUserById: async (userId: string): Promise<ChatUser | null> => {\r\n    try {\r\n      const response = await api.get(`/v1/user/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nexport default chatService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}