{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.messageCallbacks = [];\n    this.userOnlineCallbacks = [];\n    this.userOfflineCallbacks = [];\n    this.typingCallbacks = [];\n    this.heartbeatInterval = null;\n  }\n  connect(token) {\n    if (!this.socket || this.socket.disconnected) {\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\n        auth: {\n          token\n        },\n        transports: ['websocket', 'polling'],\n        // Allow fallback to polling for faster connection\n        reconnection: true,\n        reconnectionDelay: 100,\n        // Reduced from 500ms to 100ms\n        reconnectionDelayMax: 1000,\n        // Reduced from 2000ms to 1000ms\n        reconnectionAttempts: 50,\n        // Increased from 20 to 50\n        forceNew: true,\n        timeout: 5000,\n        // Reduced from 10000ms to 5000ms\n        // Handle tab switching better\n        closeOnBeforeunload: false,\n        // Reduce ping timeout for faster detection of disconnections\n        pingTimeout: 20000,\n        // 20 seconds instead of default 60\n        pingInterval: 10000 // 10 seconds instead of default 25\n      });\n      this.socket.on('connect', () => {\n        console.log('Socket connected');\n        // Start heartbeat when connected\n        this.startHeartbeat();\n      });\n      this.socket.on('reconnect', attemptNumber => {\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\n        // Restart heartbeat on reconnect\n        this.startHeartbeat();\n      });\n      this.socket.on('reconnect_attempt', attemptNumber => {\n        console.log('Reconnection attempt:', attemptNumber);\n      });\n      this.socket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        // Don't immediately show as disconnected for certain reasons that might be temporary\n        if (reason === 'transport close' || reason === 'transport error' || reason === 'ping timeout') {\n          console.log('Temporary disconnect, socket will try to reconnect...');\n          // Don't set disconnected state immediately - wait for reconnection attempts\n        } else {\n          console.log('Permanent disconnect:', reason);\n        }\n      });\n      this.socket.on('reconnect_failed', () => {\n        console.error('Socket failed to reconnect after all attempts');\n      });\n      this.socket.on('reconnect_error', error => {\n        console.error('Socket reconnection error:', error);\n      });\n\n      // Message events\n      this.socket.on('newMessage', message => {\n        console.log('Received new message:', message);\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageConfirmed', message => {\n        console.log('Message confirmed:', message);\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageError', error => {\n        console.error('Message error:', error);\n      }); // User status events\n      this.socket.on('userOnline', userId => {\n        this.userOnlineCallbacks.forEach(callback => callback(userId));\n      });\n      this.socket.on('userOffline', userId => {\n        this.userOfflineCallbacks.forEach(callback => callback(userId));\n      });\n\n      // Typing events\n      this.socket.on('userTyping', data => {\n        this.typingCallbacks.forEach(callback => callback(data));\n      });\n    }\n    return this.socket;\n  }\n  disconnect() {\n    this.stopHeartbeat();\n    if (this.socket) {\n      this.socket.removeAllListeners();\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  forceReconnect(token) {\n    console.log('Force reconnecting socket...');\n    this.disconnect();\n    return this.connect(token);\n  }\n  isConnected() {\n    return this.socket && this.socket.connected;\n  }\n  startHeartbeat() {\n    this.stopHeartbeat();\n    // Send heartbeat every 30 seconds to keep connection alive\n    this.heartbeatInterval = setInterval(() => {\n      if (this.socket && this.socket.connected) {\n        this.socket.emit('heartbeat');\n        console.log('Heartbeat sent');\n      }\n    }, 30000);\n  }\n  stopHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n  sendMessage(receiverId, content, messageType = 'text') {\n    if (this.socket) {\n      this.socket.emit('sendMessage', {\n        receiverId,\n        content,\n        messageType\n      });\n    }\n  }\n  onMessage(callback) {\n    this.messageCallbacks.push(callback);\n    return () => this.removeMessageCallback(callback);\n  }\n  onUserOnline(callback) {\n    this.userOnlineCallbacks.push(callback);\n    return () => this.removeUserOnlineCallback(callback);\n  }\n  onUserOffline(callback) {\n    this.userOfflineCallbacks.push(callback);\n    return () => this.removeUserOfflineCallback(callback);\n  }\n\n  // Keep for backward compatibility\n  onUserStatus(callback) {\n    return this.onUserOnline(callback);\n  }\n  onTyping(callback) {\n    this.typingCallbacks.push(callback);\n    return () => this.removeTypingCallback(callback);\n  }\n  sendTypingStatus(receiverId, isTyping) {\n    if (this.socket) {\n      this.socket.emit('typing', {\n        receiverId,\n        isTyping\n      });\n    }\n  }\n  markAsRead(senderId) {\n    if (this.socket) {\n      this.socket.emit('markAsRead', {\n        senderId\n      });\n    }\n  }\n  off(event) {\n    if (this.socket) {\n      this.socket.off(event);\n    }\n  }\n  getSocket() {\n    return this.socket;\n  }\n  removeMessageCallback(callback) {\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\n  }\n  removeUserOnlineCallback(callback) {\n    this.userOnlineCallbacks = this.userOnlineCallbacks.filter(cb => cb !== callback);\n  }\n  removeUserOfflineCallback(callback) {\n    this.userOfflineCallbacks = this.userOfflineCallbacks.filter(cb => cb !== callback);\n  }\n  removeTypingCallback(callback) {\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","messageCallbacks","userOnlineCallbacks","userOfflineCallbacks","typingCallbacks","heartbeatInterval","connect","token","disconnected","process","env","REACT_APP_API_URL","auth","transports","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","forceNew","timeout","closeOnBeforeunload","pingTimeout","pingInterval","on","console","log","startHeartbeat","attemptNumber","error","reason","message","forEach","callback","userId","data","disconnect","stopHeartbeat","removeAllListeners","forceReconnect","isConnected","connected","setInterval","emit","clearInterval","sendMessage","receiverId","content","messageType","onMessage","push","removeMessageCallback","onUserOnline","removeUserOnlineCallback","onUserOffline","removeUserOfflineCallback","onUserStatus","onTyping","removeTypingCallback","sendTypingStatus","isTyping","markAsRead","senderId","off","event","getSocket","filter","cb","socketService"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nimport { Message, ChatUser } from './chatService';\r\n\r\ntype MessageCallback = (message: Message) => void;\r\ntype UserOnlineCallback = (userId: string) => void;\r\ntype UserOfflineCallback = (userId: string) => void;\r\ntype TypingCallback = (data: { userId: string, isTyping: boolean }) => void;\r\n\r\nclass SocketService {\r\n  private socket: Socket | null = null;\r\n  private messageCallbacks: MessageCallback[] = [];\r\n  private userOnlineCallbacks: UserOnlineCallback[] = [];\r\n  private userOfflineCallbacks: UserOfflineCallback[] = [];\r\n  private typingCallbacks: TypingCallback[] = [];\r\n  private heartbeatInterval: NodeJS.Timeout | null = null;  connect(token: string) {\r\n    if (!this.socket || this.socket.disconnected) {\r\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\r\n        auth: { token },\r\n        transports: ['websocket', 'polling'], // Allow fallback to polling for faster connection\r\n        reconnection: true,\r\n        reconnectionDelay: 100, // Reduced from 500ms to 100ms\r\n        reconnectionDelayMax: 1000, // Reduced from 2000ms to 1000ms\r\n        reconnectionAttempts: 50, // Increased from 20 to 50\r\n        forceNew: true,\r\n        timeout: 5000, // Reduced from 10000ms to 5000ms\r\n        // Handle tab switching better\r\n        closeOnBeforeunload: false,\r\n        // Reduce ping timeout for faster detection of disconnections\r\n        pingTimeout: 20000, // 20 seconds instead of default 60\r\n        pingInterval: 10000 // 10 seconds instead of default 25\r\n      });this.socket.on('connect', () => {\r\n        console.log('Socket connected');\r\n        // Start heartbeat when connected\r\n        this.startHeartbeat();\r\n      });\r\n\r\n      this.socket.on('reconnect', (attemptNumber) => {\r\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\r\n        // Restart heartbeat on reconnect\r\n        this.startHeartbeat();\r\n      });\r\n\r\n      this.socket.on('reconnect_attempt', (attemptNumber) => {\r\n        console.log('Reconnection attempt:', attemptNumber);\r\n      });\r\n\r\n      this.socket.on('connect_error', (error: Error) => {\r\n        console.error('Socket connection error:', error);\r\n      });      this.socket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        // Don't immediately show as disconnected for certain reasons that might be temporary\r\n        if (reason === 'transport close' || \r\n            reason === 'transport error' || \r\n            reason === 'ping timeout') {\r\n          console.log('Temporary disconnect, socket will try to reconnect...');\r\n          // Don't set disconnected state immediately - wait for reconnection attempts\r\n        } else {\r\n          console.log('Permanent disconnect:', reason);\r\n        }\r\n      });      this.socket.on('reconnect_failed', () => {\r\n        console.error('Socket failed to reconnect after all attempts');\r\n      });\r\n\r\n      this.socket.on('reconnect_error', (error) => {\r\n        console.error('Socket reconnection error:', error);\r\n      });\r\n\r\n      // Message events\r\n      this.socket.on('newMessage', (message: Message) => {\r\n        console.log('Received new message:', message);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageConfirmed', (message: Message) => {\r\n        console.log('Message confirmed:', message);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageError', (error: { error: string }) => {\r\n        console.error('Message error:', error);\r\n      });      // User status events\r\n      this.socket.on('userOnline', (userId: string) => {\r\n        this.userOnlineCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      this.socket.on('userOffline', (userId: string) => {\r\n        this.userOfflineCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      // Typing events\r\n      this.socket.on('userTyping', (data: { userId: string, isTyping: boolean }) => {\r\n        this.typingCallbacks.forEach(callback => callback(data));\r\n      });\r\n    }\r\n    return this.socket;\r\n  }  disconnect() {\r\n    this.stopHeartbeat();\r\n    if (this.socket) {\r\n      this.socket.removeAllListeners();\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  forceReconnect(token: string) {\r\n    console.log('Force reconnecting socket...');\r\n    this.disconnect();\r\n    return this.connect(token);\r\n  }\r\n\r\n  isConnected() {\r\n    return this.socket && this.socket.connected;\r\n  }\r\n\r\n  private startHeartbeat() {\r\n    this.stopHeartbeat();\r\n    // Send heartbeat every 30 seconds to keep connection alive\r\n    this.heartbeatInterval = setInterval(() => {\r\n      if (this.socket && this.socket.connected) {\r\n        this.socket.emit('heartbeat');\r\n        console.log('Heartbeat sent');\r\n      }\r\n    }, 30000);\r\n  }\r\n\r\n  private stopHeartbeat() {\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval);\r\n      this.heartbeatInterval = null;\r\n    }\r\n  }\r\n\r\n  sendMessage(receiverId: string, content: string, messageType: string = 'text') {\r\n    if (this.socket) {\r\n      this.socket.emit('sendMessage', { receiverId, content, messageType });\r\n    }\r\n  }\r\n  onMessage(callback: MessageCallback) {\r\n    this.messageCallbacks.push(callback);\r\n    return () => this.removeMessageCallback(callback);\r\n  }\r\n\r\n  onUserOnline(callback: UserOnlineCallback) {\r\n    this.userOnlineCallbacks.push(callback);\r\n    return () => this.removeUserOnlineCallback(callback);\r\n  }\r\n\r\n  onUserOffline(callback: UserOfflineCallback) {\r\n    this.userOfflineCallbacks.push(callback);\r\n    return () => this.removeUserOfflineCallback(callback);\r\n  }\r\n\r\n  // Keep for backward compatibility\r\n  onUserStatus(callback: UserOnlineCallback) {\r\n    return this.onUserOnline(callback);\r\n  }\r\n\r\n  onTyping(callback: TypingCallback) {\r\n    this.typingCallbacks.push(callback);\r\n    return () => this.removeTypingCallback(callback);\r\n  }\r\n\r\n  sendTypingStatus(receiverId: string, isTyping: boolean) {\r\n    if (this.socket) {\r\n      this.socket.emit('typing', { receiverId, isTyping });\r\n    }\r\n  }\r\n\r\n  markAsRead(senderId: string) {\r\n    if (this.socket) {\r\n      this.socket.emit('markAsRead', { senderId });\r\n    }\r\n  }\r\n\r\n  off(event: string) {\r\n    if (this.socket) {\r\n      this.socket.off(event);\r\n    }\r\n  }\r\n\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n  private removeMessageCallback(callback: MessageCallback) {\r\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserOnlineCallback(callback: UserOnlineCallback) {\r\n    this.userOnlineCallbacks = this.userOnlineCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserOfflineCallback(callback: UserOfflineCallback) {\r\n    this.userOfflineCallbacks = this.userOfflineCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeTypingCallback(callback: TypingCallback) {\r\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\r\n  }\r\n}\r\n\r\nexport const socketService = new SocketService();\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}