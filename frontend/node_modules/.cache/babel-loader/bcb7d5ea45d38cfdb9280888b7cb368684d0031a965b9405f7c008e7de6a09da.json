{"ast":null,"code":"import api from './api';\nexport const chatService = {\n  getMessages: async userId => {\n    try {\n      var _response$data$data;\n      const response = await api.get(`/v1/chat/conversation/${userId}`);\n      // Ensure we're getting the correct data structure\n      const messages = Array.isArray(response.data) ? response.data : ((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.messages) || response.data.messages || [];\n\n      // Ensure each message has the correct structure\n      return messages.map(msg => ({\n        _id: msg._id || '',\n        content: typeof msg.content === 'string' ? msg.content : String(msg.content || ''),\n        sender: typeof msg.sender === 'object' ? {\n          _id: msg.sender._id || '',\n          username: msg.sender.username || 'Unknown',\n          avatar: msg.sender.avatar\n        } : {\n          _id: String(msg.sender || ''),\n          username: 'Unknown'\n        },\n        receiver: typeof msg.receiver === 'object' ? {\n          _id: msg.receiver._id || '',\n          username: msg.receiver.username || 'Unknown',\n          avatar: msg.receiver.avatar\n        } : {\n          _id: String(msg.receiver || ''),\n          username: 'Unknown'\n        },\n        messageType: msg.messageType === 'image' ? 'image' : 'text',\n        timestamp: new Date(msg.timestamp || Date.now()),\n        isRead: Boolean(msg.isRead || msg.read),\n        readAt: msg.readAt ? new Date(msg.readAt) : undefined,\n        status: msg.status\n      }));\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      return [];\n    }\n  },\n  sendMessage: async (receiverId, content, messageType = 'text') => {\n    const response = await api.post('/v1/chat/send', {\n      receiverId,\n      content,\n      messageType\n    });\n    return response.data;\n  },\n  markAsRead: async senderId => {\n    await api.post('/v1/chat/read', {\n      senderId\n    });\n  },\n  getActiveUsers: async () => {\n    try {\n      var _response$data$data2;\n      const response = await api.get('/v1/chat/users');\n      // Handle different response structures\n      const users = Array.isArray(response.data) ? response.data : ((_response$data$data2 = response.data.data) === null || _response$data$data2 === void 0 ? void 0 : _response$data$data2.users) || response.data.users || [];\n      return users.map(user => ({\n        _id: user._id || '',\n        username: user.username || 'Unknown',\n        avatar: user.avatar,\n        isOnline: !!user.isOnline,\n        lastSeen: user.lastSeen ? new Date(user.lastSeen) : undefined\n      }));\n    } catch (error) {\n      console.error('Error fetching active users:', error);\n      return [];\n    }\n  },\n  getConversations: async () => {\n    const response = await api.get('/v1/chat/conversations');\n    return response.data;\n  },\n  getUnreadCount: async () => {\n    const response = await api.get('/v1/chat/unread-count');\n    return response.data.unreadCount;\n  },\n  // Add new function to get user by ID\n  getUserById: async userId => {\n    try {\n      const response = await api.get(`/v1/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n  }\n};\nexport default chatService;","map":{"version":3,"names":["api","chatService","getMessages","userId","_response$data$data","response","get","messages","Array","isArray","data","map","msg","_id","content","String","sender","username","avatar","receiver","messageType","timestamp","Date","now","isRead","Boolean","read","readAt","undefined","status","error","console","sendMessage","receiverId","post","markAsRead","senderId","getActiveUsers","_response$data$data2","users","user","isOnline","lastSeen","getConversations","getUnreadCount","unreadCount","getUserById"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/chatService.ts"],"sourcesContent":["import api from './api';\r\nimport { Message as BaseMessage, User, MessageUser } from '../types';\r\n\r\nexport interface Message extends BaseMessage {\r\n  // Any additional chat-specific message properties can go here\r\n  status?: 'sending' | 'sent' | 'error';\r\n}\r\n\r\nexport interface ChatUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n  isOnline: boolean;\r\n  lastSeen?: Date;\r\n}\r\n\r\nexport const chatService = {  getMessages: async (userId: string): Promise<Message[]> => {\r\n    try {\r\n      const response = await api.get(`/v1/chat/conversation/${userId}`);\r\n      // Ensure we're getting the correct data structure\r\n      const messages = Array.isArray(response.data) ? response.data : \r\n                      (response.data.data?.messages || response.data.messages || []);\r\n      \r\n      // Ensure each message has the correct structure\r\n      return messages.map((msg: any): Message => ({\r\n        _id: msg._id || '',\r\n        content: typeof msg.content === 'string' ? msg.content : String(msg.content || ''),\r\n        sender: typeof msg.sender === 'object' \r\n          ? {\r\n              _id: msg.sender._id || '',\r\n              username: msg.sender.username || 'Unknown',\r\n              avatar: msg.sender.avatar\r\n            }\r\n          : { _id: String(msg.sender || ''), username: 'Unknown' },\r\n        receiver: typeof msg.receiver === 'object'\r\n          ? {\r\n              _id: msg.receiver._id || '',\r\n              username: msg.receiver.username || 'Unknown',\r\n              avatar: msg.receiver.avatar\r\n            }\r\n          : { _id: String(msg.receiver || ''), username: 'Unknown' },\r\n        messageType: msg.messageType === 'image' ? 'image' : 'text',\r\n        timestamp: new Date(msg.timestamp || Date.now()),\r\n        isRead: Boolean(msg.isRead || msg.read),\r\n        readAt: msg.readAt ? new Date(msg.readAt) : undefined,\r\n        status: msg.status\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  sendMessage: async (receiverId: string, content: string, messageType: string = 'text'): Promise<Message> => {\r\n    const response = await api.post('/v1/chat/send', {\r\n      receiverId,\r\n      content,\r\n      messageType\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  markAsRead: async (senderId: string): Promise<void> => {\r\n    await api.post('/v1/chat/read', { senderId });\r\n  },\r\n  getActiveUsers: async (): Promise<ChatUser[]> => {\r\n    try {\r\n      const response = await api.get('/v1/chat/users');\r\n      // Handle different response structures\r\n      const users = Array.isArray(response.data) ? response.data : \r\n                   (response.data.data?.users || response.data.users || []);\r\n      \r\n      return users.map((user: any): ChatUser => ({\r\n        _id: user._id || '',\r\n        username: user.username || 'Unknown',\r\n        avatar: user.avatar,\r\n        isOnline: !!user.isOnline,\r\n        lastSeen: user.lastSeen ? new Date(user.lastSeen) : undefined\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching active users:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  getConversations: async (): Promise<{\r\n    user: ChatUser;\r\n    lastMessage: Message | null;\r\n    unreadCount: number;\r\n  }[]> => {\r\n    const response = await api.get('/v1/chat/conversations');\r\n    return response.data;\r\n  },\r\n\r\n  getUnreadCount: async (): Promise<number> => {\r\n    const response = await api.get('/v1/chat/unread-count');\r\n    return response.data.unreadCount;\r\n  },\r\n\r\n  // Add new function to get user by ID\r\n  getUserById: async (userId: string): Promise<ChatUser | null> => {\r\n    try {\r\n      const response = await api.get(`/v1/user/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nexport default chatService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}