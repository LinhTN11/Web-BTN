{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration with auto-refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      console.log('🔄 Token expired, attempting refresh...');\n      const response = await authAPI.refreshToken();\n      const newToken = response.accessToken;\n      localStorage.setItem('token', newToken);\n      originalRequest.headers.Authorization = `Bearer ${newToken}`;\n      console.log('✅ Token refreshed successfully');\n      return api(originalRequest);\n    } catch (refreshError) {\n      console.error('❌ Token refresh failed:', refreshError);\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport const authAPI = {\n  login: async data => {\n    const response = await api.post('/v1/auth/login', data);\n    return response.data;\n  },\n  register: async data => {\n    const response = await api.post('/v1/auth/register', data);\n    return response.data;\n  },\n  logout: async () => {\n    const response = await api.post('/v1/auth/logout');\n    return response.data;\n  },\n  refreshToken: async () => {\n    const response = await api.post('/v1/auth/refresh');\n    return response.data;\n  },\n  heartbeat: async () => {\n    const response = await api.post('/v1/auth/heartbeat');\n    return response.data;\n  }\n};\nexport const userAPI = {\n  getAllUsers: async () => {\n    const response = await api.get('/v1/user');\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/v1/user/me');\n    return response.data;\n  },\n  updateProfile: async data => {\n    const response = await api.put('/v1/user/profile', data);\n    return response.data;\n  },\n  updateUserByAdmin: async (id, data) => {\n    const response = await api.put(`/v1/user/${id}`, data);\n    return response.data;\n  },\n  deleteUser: async id => {\n    const response = await api.delete(`/v1/user/${id}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","_error$response","originalRequest","status","_retry","console","log","authAPI","refreshToken","newToken","accessToken","setItem","refreshError","removeItem","window","location","href","Promise","reject","login","data","post","register","logout","heartbeat","userAPI","getAllUsers","get","getCurrentUser","updateProfile","put","updateUserByAdmin","id","deleteUser","delete"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { LoginFormData, RegisterFormData } from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  withCredentials: true,\r\n});\r\n\r\n// Add auth token to requests\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Handle token expiration with auto-refresh\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        console.log('🔄 Token expired, attempting refresh...');\r\n        const response = await authAPI.refreshToken();\r\n        const newToken = response.accessToken;\r\n        \r\n        localStorage.setItem('token', newToken);\r\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n        \r\n        console.log('✅ Token refreshed successfully');\r\n        return api(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error('❌ Token refresh failed:', refreshError);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authAPI = {\r\n  login: async (data: LoginFormData) => {\r\n    const response = await api.post('/v1/auth/login', data);\r\n    return response.data;\r\n  },\r\n\r\n  register: async (data: RegisterFormData) => {\r\n    const response = await api.post('/v1/auth/register', data);\r\n    return response.data;\r\n  },\r\n\r\n  logout: async () => {\r\n    const response = await api.post('/v1/auth/logout');\r\n    return response.data;\r\n  },\r\n\r\n  refreshToken: async () => {\r\n    const response = await api.post('/v1/auth/refresh');\r\n    return response.data;\r\n  },\r\n\r\n  heartbeat: async () => {\r\n    const response = await api.post('/v1/auth/heartbeat');\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport const userAPI = {\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/v1/user');\r\n    return response.data;\r\n  },\r\n\r\n  getCurrentUser: async () => {\r\n    const response = await api.get('/v1/user/me');\r\n    return response.data;\r\n  },\r\n\r\n  updateProfile: async (data: any) => {\r\n    const response = await api.put('/v1/user/profile', data);\r\n    return response.data;\r\n  },\r\n  \r\n  updateUserByAdmin: async (id: string, data: any) => {\r\n    const response = await api.put(`/v1/user/${id}`, data);\r\n    return response.data;\r\n  },\r\n\r\n  deleteUser: async (id: string) => {\r\n    const response = await api.delete(`/v1/user/${id}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}