{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\Components\\\\Chat\\\\MessengerChatPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Card, Typography, Input, Button, List, Avatar, Space, Divider, Badge, Row, Col } from 'antd';\nimport { SendOutlined, UserOutlined, MessageOutlined } from '@ant-design/icons';\nimport { useAuth } from '../../contexts/AuthContext';\nimport socketService from '../../services/socketService';\nimport { chatService } from '../../services/chatService';\nimport './MessengerChatPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst {\n  TextArea\n} = Input;\nconst MessengerChatPage = () => {\n  _s();\n  const {\n    user,\n    token\n  } = useAuth();\n  const [message, setMessage] = useState('');\n  const [messagesByConversation, setMessagesByConversation] = useState({});\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [typing, setTyping] = useState({});\n  const typingTimeoutRef = useRef({});\n  const messagesEndRef = useRef(null);\n  const [socketConnected, setSocketConnected] = useState(false);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const loadMessages = useCallback(async userId => {\n    try {\n      const messages = await chatService.getMessages(userId);\n      // Sort messages by timestamp\n      const sortedMessages = messages.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n      setMessagesByConversation(prev => ({\n        ...prev,\n        [userId]: sortedMessages\n      }));\n      scrollToBottom();\n\n      // Mark messages as read\n      chatService.markAsRead(userId).catch(error => console.error('Error marking messages as read:', error));\n    } catch (error) {\n      console.error('Error loading messages:', error);\n    }\n  }, []);\n  const loadActiveUsers = useCallback(async () => {\n    try {\n      const users = await chatService.getActiveUsers();\n      // Filter out current user\n      const filteredUsers = users.filter(u => u._id !== (user === null || user === void 0 ? void 0 : user._id));\n      setActiveUsers(filteredUsers);\n    } catch (error) {\n      console.error('Error loading active users:', error);\n    }\n  }, [user === null || user === void 0 ? void 0 : user._id]);\n  useEffect(() => {\n    if (token && !socketConnected) {\n      console.log('Connecting socket with token');\n      const socket = socketService.connect(`Bearer ${token}`);\n      if (socket) {\n        socket.on('connect', () => {\n          console.log('Socket connected successfully');\n          setSocketConnected(true);\n          // Reload messages when reconnected\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n          loadActiveUsers();\n        });\n        socket.on('reconnect', () => {\n          console.log('Socket reconnected successfully');\n          setSocketConnected(true);\n          // Reload messages when reconnected\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n          loadActiveUsers();\n        });\n        socket.on('connect_error', error => {\n          console.error('Socket connection error:', error);\n          setSocketConnected(false);\n        });\n        socket.on('disconnect', reason => {\n          console.log('Socket disconnected:', reason);\n          // Only set disconnected for permanent disconnections\n          if (reason === 'io server disconnect' || reason === 'io client disconnect') {\n            setSocketConnected(false);\n          }\n          // For temporary disconnections, keep the connected state and let reconnect handle it\n        });\n      }\n      loadActiveUsers();\n      return () => {\n        console.log('Cleaning up socket connection');\n        if (socketService.isConnected()) {\n          socketService.disconnect();\n        }\n        setSocketConnected(false);\n      };\n    }\n  }, [token, loadActiveUsers, selectedUser, loadMessages]);\n  useEffect(() => {\n    if (socketConnected) {\n      const messageHandler = newMessage => {\n        console.log('Received message:', newMessage);\n\n        // Extract IDs correctly regardless of the format\n        const senderId = typeof newMessage.sender === 'string' ? newMessage.sender : newMessage.sender._id;\n        const receiverId = typeof newMessage.receiver === 'string' ? newMessage.receiver : newMessage.receiver._id;\n        const userId = String(user === null || user === void 0 ? void 0 : user._id);\n\n        // Only update conversation if we're either the sender or receiver\n        if (senderId === userId || receiverId === userId) {\n          // Get the ID of the other person in the conversation\n          const conversationId = senderId === userId ? receiverId : senderId;\n          setMessagesByConversation(prev => {\n            const conversationMessages = prev[conversationId] || [];\n            // Check if message already exists by ID or similar content + timestamp\n            const exists = conversationMessages.some(msg => String(msg._id) === String(newMessage._id) || msg.content === newMessage.content && Math.abs(new Date(msg.timestamp).getTime() - new Date(newMessage.timestamp).getTime()) < 1000);\n            if (!exists) {\n              // Normalize IDs to string for consistency\n              const normalizedMessage = {\n                ...newMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(newMessage._id)\n              };\n\n              // Sort messages by timestamp\n              const updatedMessages = [...conversationMessages, normalizedMessage].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n              return {\n                ...prev,\n                [conversationId]: updatedMessages\n              };\n            }\n            return prev;\n          });\n        }\n\n        // Only scroll if the message belongs to the currently selected conversation\n        if (selectedUser && (senderId === String(selectedUser._id) || receiverId === String(selectedUser._id))) {\n          scrollToBottom();\n        }\n      };\n      const userStatusHandler = async userId => {\n        await loadActiveUsers();\n      };\n      const typingHandler = ({\n        userId,\n        isTyping\n      }) => {\n        setTyping(prev => ({\n          ...prev,\n          [userId]: isTyping\n        }));\n      };\n      socketService.onMessage(messageHandler);\n      socketService.onUserStatus(userStatusHandler);\n      socketService.onTyping(typingHandler);\n\n      // Handle message confirmation for sender\n      const messageConfirmedHandler = confirmedMessage => {\n        console.log('Message confirmed:', confirmedMessage);\n\n        // Extract IDs correctly\n        const senderId = typeof confirmedMessage.sender === 'string' ? confirmedMessage.sender : confirmedMessage.sender._id;\n        const receiverId = typeof confirmedMessage.receiver === 'string' ? confirmedMessage.receiver : confirmedMessage.receiver._id;\n        const userId = String(user === null || user === void 0 ? void 0 : user._id);\n\n        // Only handle confirmation for messages sent by current user\n        if (senderId === userId) {\n          const conversationId = receiverId;\n          setMessagesByConversation(prev => {\n            const conversationMessages = prev[conversationId] || [];\n\n            // Find and replace temporary message or add new one if not exists\n            const messageExists = conversationMessages.some(msg => String(msg._id) === String(confirmedMessage._id));\n            if (!messageExists) {\n              // If message doesn't exist, add it\n              const normalizedMessage = {\n                ...confirmedMessage,\n                sender: senderId,\n                receiver: receiverId,\n                _id: String(confirmedMessage._id)\n              };\n\n              // Remove any temporary messages with same content\n              const filteredMessages = conversationMessages.filter(msg => !(msg.content === confirmedMessage.content && msg._id.toString().length > 10) // temp IDs are typically longer\n              );\n              const updatedMessages = [...filteredMessages, normalizedMessage].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n              return {\n                ...prev,\n                [conversationId]: updatedMessages\n              };\n            }\n            return prev;\n          });\n\n          // Scroll to bottom if this is the selected conversation\n          if (selectedUser && String(selectedUser._id) === conversationId) {\n            scrollToBottom();\n          }\n        }\n      };\n\n      // Listen for messageConfirmed event\n      if (socketService.getSocket()) {\n        var _socketService$getSoc;\n        (_socketService$getSoc = socketService.getSocket()) === null || _socketService$getSoc === void 0 ? void 0 : _socketService$getSoc.on('messageConfirmed', messageConfirmedHandler);\n      }\n      return () => {\n        socketService.off('newMessage');\n        socketService.off('messageConfirmed');\n        socketService.off('userOnline');\n        socketService.off('userOffline');\n        socketService.off('userTyping');\n        if (socketService.getSocket()) {\n          var _socketService$getSoc2;\n          (_socketService$getSoc2 = socketService.getSocket()) === null || _socketService$getSoc2 === void 0 ? void 0 : _socketService$getSoc2.off('messageConfirmed', messageConfirmedHandler);\n        }\n      };\n    }\n  }, [socketConnected, user, selectedUser]);\n  useEffect(() => {\n    if (selectedUser) {\n      loadMessages(selectedUser._id);\n    }\n  }, [selectedUser, loadMessages]);\n\n  // Handle page visibility changes (tab switching)\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        console.log('Page became visible, checking socket connection...');\n\n        // Reconnect socket if needed\n        if (!socketService.isConnected() && token) {\n          console.log('Reconnecting socket after tab switch...');\n          const socket = socketService.connect(`Bearer ${token}`);\n          if (socket) {\n            socket.on('connect', () => {\n              console.log('Reconnected after tab switch');\n              setSocketConnected(true);\n              // Reload data when reconnected\n              loadActiveUsers();\n              if (selectedUser) {\n                loadMessages(selectedUser._id);\n              }\n            });\n          }\n        } else if (socketService.isConnected()) {\n          // Socket is connected, just refresh data\n          console.log('Socket still connected, refreshing data...');\n          loadActiveUsers();\n          if (selectedUser) {\n            loadMessages(selectedUser._id);\n          }\n        }\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [token, selectedUser, loadActiveUsers, loadMessages]);\n  const handleSendMessage = async () => {\n    if (!message.trim() || !selectedUser || !(user !== null && user !== void 0 && user._id)) return;\n\n    // Check if socket is connected\n    if (!socketService.isConnected()) {\n      console.log('Socket not connected, attempting to reconnect...');\n      const socket = socketService.connect(`Bearer ${token}`);\n      if (socket) {\n        socket.on('connect', () => {\n          console.log('Reconnected, sending message...');\n          setSocketConnected(true);\n          // Send the message after reconnection\n          socketService.sendMessage(selectedUser._id, message.trim());\n        });\n      }\n      return;\n    }\n    try {\n      // Clear typing status\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n      socketService.sendTypingStatus(selectedUser._id, false);\n      const content = message.trim();\n      setMessage('');\n\n      // Send through socket - rely on messageConfirmed event for UI update\n      socketService.sendMessage(selectedUser._id, content);\n\n      // Optional: scroll to bottom to prepare for new message\n      setTimeout(() => scrollToBottom(), 100);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const handleTyping = e => {\n    setMessage(e.target.value);\n    if (selectedUser) {\n      // Clear existing timeout\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n\n      // Send typing status\n      socketService.sendTypingStatus(selectedUser._id, true);\n\n      // Set new timeout\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\n        socketService.sendTypingStatus(selectedUser._id, false);\n      }, 2000);\n    }\n  };\n  const formatTime = date => {\n    return new Date(date).toLocaleTimeString('vi-VN', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  const currentMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messenger-chat-page\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 16,\n      style: {\n        height: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 8,\n        md: 6,\n        lg: 6,\n        xl: 5,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: /*#__PURE__*/_jsxDEV(Space, {\n            children: [/*#__PURE__*/_jsxDEV(MessageOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Conversations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this),\n          className: \"users-card\",\n          bodyStyle: {\n            padding: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(List, {\n            dataSource: activeUsers,\n            renderItem: chatUser => /*#__PURE__*/_jsxDEV(List.Item, {\n              className: `user-item ${(selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id) === chatUser._id ? 'selected' : ''}`,\n              onClick: () => setSelectedUser(chatUser),\n              children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n                avatar: /*#__PURE__*/_jsxDEV(Badge, {\n                  dot: true,\n                  status: chatUser.isOnline ? 'success' : 'default',\n                  offset: [-2, 32],\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 420,\n                      columnNumber: 33\n                    }, this),\n                    src: chatUser.avatar,\n                    size: \"large\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 419,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 23\n                }, this),\n                title: /*#__PURE__*/_jsxDEV(Text, {\n                  strong: true,\n                  children: chatUser.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 28\n                }, this),\n                description: typing[chatUser._id] ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Typing...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 25\n                }, this) : chatUser.isOnline ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Online\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 25\n                }, this) : chatUser.lastSeen ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"secondary\",\n                  children: [\"Last seen at \", formatTime(chatUser.lastSeen)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 25\n                }, this) : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 16,\n        md: 18,\n        lg: 18,\n        xl: 19,\n        children: selectedUser ? /*#__PURE__*/_jsxDEV(Card, {\n          className: \"chat-card\",\n          title: /*#__PURE__*/_jsxDEV(Space, {\n            children: [/*#__PURE__*/_jsxDEV(Badge, {\n              dot: true,\n              status: selectedUser.isOnline ? 'success' : 'default',\n              offset: [-2, 32],\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 29\n                }, this),\n                src: selectedUser.avatar,\n                size: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: selectedUser.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 19\n            }, this), typing[selectedUser._id] && /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              italic: true,\n              children: \"typing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 17\n          }, this),\n          style: {\n            height: 'calc(100vh - 200px)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-container\",\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              dataSource: currentMessages,\n              renderItem: msg => {\n                const senderId = typeof msg.sender === 'string' ? msg.sender : msg.sender._id;\n                const isOwnMessage = String(user === null || user === void 0 ? void 0 : user._id) === String(senderId);\n                return /*#__PURE__*/_jsxDEV(List.Item, {\n                  className: `message-item ${isOwnMessage ? 'own-message' : 'other-message'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"message-bubble\",\n                      style: {\n                        backgroundColor: isOwnMessage ? '#1890ff' : '#e4e6eb',\n                        color: isOwnMessage ? '#ffffff' : '#000000'\n                      },\n                      children: /*#__PURE__*/_jsxDEV(Text, {\n                        style: {\n                          color: 'inherit'\n                        },\n                        children: msg.content\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 492,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 485,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Text, {\n                      type: \"secondary\",\n                      className: \"message-time\",\n                      children: formatTime(new Date(msg.timestamp))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 494,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 484,\n                    columnNumber: 25\n                  }, this)\n                }, msg._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 480,\n                  columnNumber: 23\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              margin: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-input-container\",\n            children: /*#__PURE__*/_jsxDEV(Space.Compact, {\n              style: {\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextArea, {\n                value: message,\n                onChange: handleTyping,\n                onKeyPress: handleKeyPress,\n                placeholder: \"Type a message...\",\n                autoSize: {\n                  minRows: 1,\n                  maxRows: 4\n                },\n                style: {\n                  resize: 'none'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"primary\",\n                icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 519,\n                  columnNumber: 27\n                }, this),\n                onClick: handleSendMessage,\n                disabled: !message.trim(),\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Card, {\n          className: \"no-chat-selected\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center',\n              padding: '60px 20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(MessageOutlined, {\n              style: {\n                fontSize: '48px',\n                color: '#d9d9d9'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Title, {\n              level: 4,\n              type: \"secondary\",\n              children: \"Select a conversation to start chatting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              children: \"Choose from your existing conversations on the left or start a new one.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n};\n_s(MessengerChatPage, \"6gWhTTWBN0ylRiRzVt857mwBOBw=\", false, function () {\n  return [useAuth];\n});\n_c = MessengerChatPage;\nexport default MessengerChatPage;\nvar _c;\n$RefreshReg$(_c, \"MessengerChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Card","Typography","Input","Button","List","Avatar","Space","Divider","Badge","Row","Col","SendOutlined","UserOutlined","MessageOutlined","useAuth","socketService","chatService","jsxDEV","_jsxDEV","Title","Text","TextArea","MessengerChatPage","_s","user","token","message","setMessage","messagesByConversation","setMessagesByConversation","activeUsers","setActiveUsers","selectedUser","setSelectedUser","typing","setTyping","typingTimeoutRef","messagesEndRef","socketConnected","setSocketConnected","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","loadMessages","userId","messages","getMessages","sortedMessages","sort","a","b","Date","timestamp","getTime","prev","markAsRead","catch","error","console","loadActiveUsers","users","getActiveUsers","filteredUsers","filter","u","_id","log","socket","connect","on","reason","isConnected","disconnect","messageHandler","newMessage","senderId","sender","receiverId","receiver","String","conversationId","conversationMessages","exists","some","msg","content","Math","abs","normalizedMessage","updatedMessages","userStatusHandler","typingHandler","isTyping","onMessage","onUserStatus","onTyping","messageConfirmedHandler","confirmedMessage","messageExists","filteredMessages","toString","length","getSocket","_socketService$getSoc","off","_socketService$getSoc2","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener","handleSendMessage","trim","sendMessage","clearTimeout","sendTypingStatus","setTimeout","handleKeyPress","e","key","shiftKey","preventDefault","handleTyping","target","value","formatTime","date","toLocaleTimeString","hour","minute","currentMessages","className","children","gutter","style","height","xs","sm","md","lg","xl","title","fileName","_jsxFileName","lineNumber","columnNumber","bodyStyle","padding","dataSource","renderItem","chatUser","Item","onClick","Meta","avatar","dot","status","isOnline","offset","icon","src","size","strong","username","description","type","lastSeen","italic","isOwnMessage","backgroundColor","color","ref","margin","Compact","width","onChange","onKeyPress","placeholder","autoSize","minRows","maxRows","resize","disabled","textAlign","fontSize","level","_c","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/Components/Chat/MessengerChatPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Input, \r\n  Button, \r\n  List, \r\n  Avatar, \r\n  Space,\r\n  Divider,\r\n  Badge,\r\n  Row,\r\n  Col \r\n} from 'antd';\r\nimport { \r\n  SendOutlined, \r\n  UserOutlined,\r\n  MessageOutlined \r\n} from '@ant-design/icons';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport socketService from '../../services/socketService';\r\nimport { chatService, Message, ChatUser } from '../../services/chatService';\r\nimport './MessengerChatPage.css';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst MessengerChatPage: React.FC = () => {\r\n  const { user, token } = useAuth();\r\n  const [message, setMessage] = useState('');\r\n  const [messagesByConversation, setMessagesByConversation] = useState<{ [key: string]: Message[] }>({});\r\n  const [activeUsers, setActiveUsers] = useState<ChatUser[]>([]);\r\n  const [selectedUser, setSelectedUser] = useState<ChatUser | null>(null);\r\n  const [typing, setTyping] = useState<{ [key: string]: boolean }>({});\r\n  const typingTimeoutRef = useRef<{ [key: string]: NodeJS.Timeout }>({});\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const loadMessages = useCallback(async (userId: string) => {\r\n    try {\r\n      const messages = await chatService.getMessages(userId);\r\n      // Sort messages by timestamp\r\n      const sortedMessages = messages.sort((a, b) => \r\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n      );\r\n      \r\n      setMessagesByConversation(prev => ({\r\n        ...prev,\r\n        [userId]: sortedMessages\r\n      }));\r\n      \r\n      scrollToBottom();\r\n      \r\n      // Mark messages as read\r\n      chatService.markAsRead(userId)\r\n        .catch(error => console.error('Error marking messages as read:', error));\r\n    } catch (error) {\r\n      console.error('Error loading messages:', error);\r\n    }\r\n  }, []);\r\n\r\n  const loadActiveUsers = useCallback(async () => {\r\n    try {\r\n      const users = await chatService.getActiveUsers();\r\n      // Filter out current user\r\n      const filteredUsers = users.filter(u => u._id !== user?._id);\r\n      setActiveUsers(filteredUsers);\r\n    } catch (error) {\r\n      console.error('Error loading active users:', error);\r\n    }\r\n  }, [user?._id]);  useEffect(() => {\r\n    if (token && !socketConnected) {\r\n      console.log('Connecting socket with token');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      \r\n      if (socket) {        socket.on('connect', () => {\r\n          console.log('Socket connected successfully');\r\n          setSocketConnected(true);\r\n          // Reload messages when reconnected\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n          loadActiveUsers();\r\n        });\r\n\r\n        socket.on('reconnect', () => {\r\n          console.log('Socket reconnected successfully');\r\n          setSocketConnected(true);\r\n          // Reload messages when reconnected\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n          loadActiveUsers();\r\n        });\r\n\r\n        socket.on('connect_error', (error: Error) => {\r\n          console.error('Socket connection error:', error);\r\n          setSocketConnected(false);\r\n        });\r\n\r\n        socket.on('disconnect', (reason) => {\r\n          console.log('Socket disconnected:', reason);\r\n          // Only set disconnected for permanent disconnections\r\n          if (reason === 'io server disconnect' || reason === 'io client disconnect') {\r\n            setSocketConnected(false);\r\n          }\r\n          // For temporary disconnections, keep the connected state and let reconnect handle it\r\n        });\r\n      }\r\n\r\n      loadActiveUsers();\r\n\r\n      return () => {\r\n        console.log('Cleaning up socket connection');\r\n        if (socketService.isConnected()) {\r\n          socketService.disconnect();\r\n        }\r\n        setSocketConnected(false);\r\n      };\r\n    }\r\n  }, [token, loadActiveUsers, selectedUser, loadMessages]);\r\n  useEffect(() => {\r\n    if (socketConnected) {\r\n      const messageHandler = (newMessage: Message) => {\r\n        console.log('Received message:', newMessage);\r\n\r\n        // Extract IDs correctly regardless of the format\r\n        const senderId = typeof newMessage.sender === 'string' \r\n          ? newMessage.sender \r\n          : newMessage.sender._id;\r\n        \r\n        const receiverId = typeof newMessage.receiver === 'string'\r\n          ? newMessage.receiver \r\n          : newMessage.receiver._id;\r\n        \r\n        const userId = String(user?._id);\r\n\r\n        // Only update conversation if we're either the sender or receiver\r\n        if (senderId === userId || receiverId === userId) {\r\n          // Get the ID of the other person in the conversation\r\n          const conversationId = senderId === userId ? receiverId : senderId;\r\n\r\n          setMessagesByConversation(prev => {\r\n            const conversationMessages = prev[conversationId] || [];\r\n            // Check if message already exists by ID or similar content + timestamp\r\n            const exists = conversationMessages.some(msg => \r\n              String(msg._id) === String(newMessage._id) ||\r\n              (msg.content === newMessage.content && \r\n               Math.abs(new Date(msg.timestamp).getTime() - new Date(newMessage.timestamp).getTime()) < 1000)\r\n            );\r\n            \r\n            if (!exists) {\r\n              // Normalize IDs to string for consistency\r\n              const normalizedMessage = {\r\n                ...newMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(newMessage._id)\r\n              };\r\n\r\n              // Sort messages by timestamp\r\n              const updatedMessages = [...conversationMessages, normalizedMessage]\r\n                .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages\r\n              };\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n\r\n        // Only scroll if the message belongs to the currently selected conversation\r\n        if (selectedUser && (\r\n          senderId === String(selectedUser._id) || \r\n          receiverId === String(selectedUser._id)\r\n        )) {\r\n          scrollToBottom();\r\n        }\r\n      };\r\n\r\n      const userStatusHandler = async (userId: string) => {\r\n        await loadActiveUsers();\r\n      };\r\n\r\n      const typingHandler = ({ userId, isTyping }: { userId: string, isTyping: boolean }) => {\r\n        setTyping(prev => ({ ...prev, [userId]: isTyping }));\r\n      };      socketService.onMessage(messageHandler);\r\n      socketService.onUserStatus(userStatusHandler);\r\n      socketService.onTyping(typingHandler);\r\n\r\n      // Handle message confirmation for sender\r\n      const messageConfirmedHandler = (confirmedMessage: Message) => {\r\n        console.log('Message confirmed:', confirmedMessage);\r\n        \r\n        // Extract IDs correctly\r\n        const senderId = typeof confirmedMessage.sender === 'string' \r\n          ? confirmedMessage.sender \r\n          : confirmedMessage.sender._id;\r\n        \r\n        const receiverId = typeof confirmedMessage.receiver === 'string'\r\n          ? confirmedMessage.receiver \r\n          : confirmedMessage.receiver._id;\r\n        \r\n        const userId = String(user?._id);\r\n        \r\n        // Only handle confirmation for messages sent by current user\r\n        if (senderId === userId) {\r\n          const conversationId = receiverId;\r\n          \r\n          setMessagesByConversation(prev => {\r\n            const conversationMessages = prev[conversationId] || [];\r\n            \r\n            // Find and replace temporary message or add new one if not exists\r\n            const messageExists = conversationMessages.some(msg => \r\n              String(msg._id) === String(confirmedMessage._id)\r\n            );\r\n            \r\n            if (!messageExists) {\r\n              // If message doesn't exist, add it\r\n              const normalizedMessage = {\r\n                ...confirmedMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(confirmedMessage._id)\r\n              };\r\n              \r\n              // Remove any temporary messages with same content\r\n              const filteredMessages = conversationMessages.filter(msg => \r\n                !(msg.content === confirmedMessage.content && \r\n                  msg._id.toString().length > 10) // temp IDs are typically longer\r\n              );\r\n              \r\n              const updatedMessages = [...filteredMessages, normalizedMessage]\r\n                .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages\r\n              };\r\n            }\r\n            \r\n            return prev;\r\n          });\r\n          \r\n          // Scroll to bottom if this is the selected conversation\r\n          if (selectedUser && String(selectedUser._id) === conversationId) {\r\n            scrollToBottom();\r\n          }\r\n        }\r\n      };\r\n\r\n      // Listen for messageConfirmed event\r\n      if (socketService.getSocket()) {\r\n        socketService.getSocket()?.on('messageConfirmed', messageConfirmedHandler);\r\n      }\r\n\r\n      return () => {\r\n        socketService.off('newMessage');\r\n        socketService.off('messageConfirmed');\r\n        socketService.off('userOnline');\r\n        socketService.off('userOffline');\r\n        socketService.off('userTyping');\r\n        if (socketService.getSocket()) {\r\n          socketService.getSocket()?.off('messageConfirmed', messageConfirmedHandler);\r\n        }\r\n      };\r\n    }\r\n  }, [socketConnected, user, selectedUser]);\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      loadMessages(selectedUser._id);\r\n    }\r\n  }, [selectedUser, loadMessages]);\r\n\r\n  // Handle page visibility changes (tab switching)\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'visible') {\r\n        console.log('Page became visible, checking socket connection...');\r\n        \r\n        // Reconnect socket if needed\r\n        if (!socketService.isConnected() && token) {\r\n          console.log('Reconnecting socket after tab switch...');\r\n          const socket = socketService.connect(`Bearer ${token}`);\r\n          if (socket) {\r\n            socket.on('connect', () => {\r\n              console.log('Reconnected after tab switch');\r\n              setSocketConnected(true);\r\n              // Reload data when reconnected\r\n              loadActiveUsers();\r\n              if (selectedUser) {\r\n                loadMessages(selectedUser._id);\r\n              }\r\n            });\r\n          }\r\n        } else if (socketService.isConnected()) {\r\n          // Socket is connected, just refresh data\r\n          console.log('Socket still connected, refreshing data...');\r\n          loadActiveUsers();\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, [token, selectedUser, loadActiveUsers, loadMessages]);const handleSendMessage = async () => {\r\n    if (!message.trim() || !selectedUser || !user?._id) return;\r\n\r\n    // Check if socket is connected\r\n    if (!socketService.isConnected()) {\r\n      console.log('Socket not connected, attempting to reconnect...');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      if (socket) {\r\n        socket.on('connect', () => {\r\n          console.log('Reconnected, sending message...');\r\n          setSocketConnected(true);\r\n          // Send the message after reconnection\r\n          socketService.sendMessage(selectedUser._id, message.trim());\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Clear typing status\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n      socketService.sendTypingStatus(selectedUser._id, false);\r\n\r\n      const content = message.trim();\r\n      setMessage('');\r\n\r\n      // Send through socket - rely on messageConfirmed event for UI update\r\n      socketService.sendMessage(selectedUser._id, content);\r\n      \r\n      // Optional: scroll to bottom to prepare for new message\r\n      setTimeout(() => scrollToBottom(), 100);\r\n        \r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleTyping = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessage(e.target.value);\r\n    \r\n    if (selectedUser) {\r\n      // Clear existing timeout\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n\r\n      // Send typing status\r\n      socketService.sendTypingStatus(selectedUser._id, true);\r\n\r\n      // Set new timeout\r\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\r\n        socketService.sendTypingStatus(selectedUser._id, false);\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const formatTime = (date: Date) => {\r\n    return new Date(date).toLocaleTimeString('vi-VN', { \r\n      hour: '2-digit', \r\n      minute: '2-digit' \r\n    });\r\n  };\r\n  const currentMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\r\n\r\n  return (\r\n    <div className=\"messenger-chat-page\">\r\n      <Row gutter={16} style={{ height: '100%' }}>\r\n        <Col xs={24} sm={8} md={6} lg={6} xl={5}>\r\n          <Card \r\n            title={\r\n              <Space>\r\n                <MessageOutlined />\r\n                <span>Conversations</span>\r\n              </Space>\r\n            }\r\n            className=\"users-card\"\r\n            bodyStyle={{ padding: 0 }}\r\n          >\r\n            <List\r\n              dataSource={activeUsers}\r\n              renderItem={(chatUser) => (\r\n                <List.Item\r\n                  className={`user-item ${selectedUser?._id === chatUser._id ? 'selected' : ''}`}\r\n                  onClick={() => setSelectedUser(chatUser)}\r\n                >\r\n                  <List.Item.Meta\r\n                    avatar={\r\n                      <Badge \r\n                        dot \r\n                        status={chatUser.isOnline ? 'success' : 'default'}\r\n                        offset={[-2, 32]}\r\n                      >\r\n                        <Avatar \r\n                          icon={<UserOutlined />} \r\n                          src={chatUser.avatar}\r\n                          size=\"large\"\r\n                        />\r\n                      </Badge>\r\n                    }\r\n                    title={<Text strong>{chatUser.username}</Text>}\r\n                    description={\r\n                      typing[chatUser._id] ? (\r\n                        <Text type=\"success\">Typing...</Text>\r\n                      ) : chatUser.isOnline ? (\r\n                        <Text type=\"success\">Online</Text>\r\n                      ) : chatUser.lastSeen ? (\r\n                        <Text type=\"secondary\">\r\n                          Last seen at {formatTime(chatUser.lastSeen)}\r\n                        </Text>\r\n                      ) : null\r\n                    }\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col xs={24} sm={16} md={18} lg={18} xl={19}>\r\n          {selectedUser ? (\r\n            <Card\r\n              className=\"chat-card\"\r\n              title={\r\n                <Space>\r\n                  <Badge \r\n                    dot \r\n                    status={selectedUser.isOnline ? 'success' : 'default'}\r\n                    offset={[-2, 32]}\r\n                  >\r\n                    <Avatar \r\n                      icon={<UserOutlined />} \r\n                      src={selectedUser.avatar}\r\n                      size=\"large\"\r\n                    />\r\n                  </Badge>\r\n                  <span>{selectedUser.username}</span>\r\n                  {typing[selectedUser._id] && (\r\n                    <Text type=\"secondary\" italic>typing...</Text>\r\n                  )}\r\n                </Space>\r\n              }\r\n              style={{\r\n                height: 'calc(100vh - 200px)'\r\n              }}\r\n            >\r\n              <div className=\"messages-container\">\r\n                <List\r\n                  dataSource={currentMessages}\r\n                  renderItem={(msg) => {\r\n                    const senderId = typeof msg.sender === 'string' ? msg.sender : msg.sender._id;\r\n                    const isOwnMessage = String(user?._id) === String(senderId);\r\n                    \r\n                    return (\r\n                      <List.Item\r\n                        key={msg._id}\r\n                        className={`message-item ${isOwnMessage ? 'own-message' : 'other-message'}`}\r\n                      >\r\n                        <div className=\"message-content\">\r\n                          <div \r\n                            className=\"message-bubble\"\r\n                            style={{\r\n                              backgroundColor: isOwnMessage ? '#1890ff' : '#e4e6eb',\r\n                              color: isOwnMessage ? '#ffffff' : '#000000'\r\n                            }}\r\n                          >\r\n                            <Text style={{ color: 'inherit' }}>{msg.content}</Text>\r\n                          </div>\r\n                          <Text type=\"secondary\" className=\"message-time\">\r\n                            {formatTime(new Date(msg.timestamp))}\r\n                          </Text>\r\n                        </div>\r\n                      </List.Item>\r\n                    );\r\n                  }}\r\n                />\r\n                <div ref={messagesEndRef} />\r\n              </div>\r\n\r\n              <Divider style={{ margin: 0 }} />\r\n\r\n              <div className=\"message-input-container\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                  <TextArea\r\n                    value={message}\r\n                    onChange={handleTyping}\r\n                    onKeyPress={handleKeyPress}\r\n                    placeholder=\"Type a message...\"\r\n                    autoSize={{ minRows: 1, maxRows: 4 }}\r\n                    style={{ resize: 'none' }}\r\n                  />\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<SendOutlined />}\r\n                    onClick={handleSendMessage}\r\n                    disabled={!message.trim()}\r\n                  >\r\n                    Send\r\n                  </Button>\r\n                </Space.Compact>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <Card className=\"no-chat-selected\">\r\n              <div style={{ textAlign: 'center', padding: '60px 20px' }}>\r\n                <MessageOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\r\n                <Title level={4} type=\"secondary\">Select a conversation to start chatting</Title>\r\n                <Text type=\"secondary\">\r\n                  Choose from your existing conversations on the left or start a new one.\r\n                </Text>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessengerChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}