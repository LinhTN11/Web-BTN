{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.messageCallbacks = [];\n    this.userStatusCallbacks = [];\n    this.typingCallbacks = [];\n  }\n  connect(token) {\n    if (!this.socket || this.socket.disconnected) {\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\n        auth: {\n          token\n        },\n        transports: ['websocket'],\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionDelayMax: 5000,\n        reconnectionAttempts: 10,\n        forceNew: true,\n        timeout: 20000\n      });\n      this.socket.on('connect', () => {\n        console.log('Socket connected');\n      });\n      this.socket.on('reconnect', attemptNumber => {\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\n      });\n      this.socket.on('reconnect_attempt', attemptNumber => {\n        console.log('Reconnection attempt:', attemptNumber);\n      });\n      this.socket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        // Don't immediately show as disconnected for certain reasons\n        if (reason === 'transport close' || reason === 'transport error') {\n          console.log('Temporary disconnect, socket will try to reconnect...');\n        }\n      }); // Message events\n      this.socket.on('newMessage', message => {\n        console.log('Received new message:', message);\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageConfirmed', message => {\n        console.log('Message confirmed:', message);\n        this.messageCallbacks.forEach(callback => callback(message));\n      });\n      this.socket.on('messageError', error => {\n        console.error('Message error:', error);\n      });\n\n      // User status events\n      this.socket.on('userOnline', userId => {\n        this.userStatusCallbacks.forEach(callback => callback(userId));\n      });\n      this.socket.on('userOffline', userId => {\n        this.userStatusCallbacks.forEach(callback => callback(userId));\n      });\n\n      // Typing events\n      this.socket.on('userTyping', data => {\n        this.typingCallbacks.forEach(callback => callback(data));\n      });\n    }\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.removeAllListeners();\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  isConnected() {\n    return this.socket && this.socket.connected;\n  }\n  sendMessage(receiverId, content, messageType = 'text') {\n    if (this.socket) {\n      this.socket.emit('sendMessage', {\n        receiverId,\n        content,\n        messageType\n      });\n    }\n  }\n  onMessage(callback) {\n    this.messageCallbacks.push(callback);\n    return () => this.removeMessageCallback(callback);\n  }\n  onUserStatus(callback) {\n    this.userStatusCallbacks.push(callback);\n    return () => this.removeUserStatusCallback(callback);\n  }\n  onTyping(callback) {\n    this.typingCallbacks.push(callback);\n    return () => this.removeTypingCallback(callback);\n  }\n  sendTypingStatus(receiverId, isTyping) {\n    if (this.socket) {\n      this.socket.emit('typing', {\n        receiverId,\n        isTyping\n      });\n    }\n  }\n  markAsRead(senderId) {\n    if (this.socket) {\n      this.socket.emit('markAsRead', {\n        senderId\n      });\n    }\n  }\n  off(event) {\n    if (this.socket) {\n      this.socket.off(event);\n    }\n  }\n  getSocket() {\n    return this.socket;\n  }\n  removeMessageCallback(callback) {\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\n  }\n  removeUserStatusCallback(callback) {\n    this.userStatusCallbacks = this.userStatusCallbacks.filter(cb => cb !== callback);\n  }\n  removeTypingCallback(callback) {\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","messageCallbacks","userStatusCallbacks","typingCallbacks","connect","token","disconnected","process","env","REACT_APP_API_URL","auth","transports","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","forceNew","timeout","on","console","log","attemptNumber","error","reason","message","forEach","callback","userId","data","disconnect","removeAllListeners","isConnected","connected","sendMessage","receiverId","content","messageType","emit","onMessage","push","removeMessageCallback","onUserStatus","removeUserStatusCallback","onTyping","removeTypingCallback","sendTypingStatus","isTyping","markAsRead","senderId","off","event","getSocket","filter","cb","socketService"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nimport { Message, ChatUser } from './chatService';\r\n\r\ntype MessageCallback = (message: Message) => void;\r\ntype UserStatusCallback = (userId: string) => void;\r\ntype TypingCallback = (data: { userId: string, isTyping: boolean }) => void;\r\n\r\nclass SocketService {\r\n  private socket: Socket | null = null;\r\n  private messageCallbacks: MessageCallback[] = [];\r\n  private userStatusCallbacks: UserStatusCallback[] = [];\r\n  private typingCallbacks: TypingCallback[] = [];  connect(token: string) {\r\n    if (!this.socket || this.socket.disconnected) {\r\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\r\n        auth: { token },\r\n        transports: ['websocket'],\r\n        reconnection: true,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        reconnectionAttempts: 10,\r\n        forceNew: true,\r\n        timeout: 20000\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Socket connected');\r\n      });\r\n\r\n      this.socket.on('reconnect', (attemptNumber) => {\r\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\r\n      });\r\n\r\n      this.socket.on('reconnect_attempt', (attemptNumber) => {\r\n        console.log('Reconnection attempt:', attemptNumber);\r\n      });\r\n\r\n      this.socket.on('connect_error', (error: Error) => {\r\n        console.error('Socket connection error:', error);\r\n      });\r\n\r\n      this.socket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        // Don't immediately show as disconnected for certain reasons\r\n        if (reason === 'transport close' || reason === 'transport error') {\r\n          console.log('Temporary disconnect, socket will try to reconnect...');\r\n        }\r\n      });// Message events\r\n      this.socket.on('newMessage', (message: Message) => {\r\n        console.log('Received new message:', message);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageConfirmed', (message: Message) => {\r\n        console.log('Message confirmed:', message);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageError', (error: { error: string }) => {\r\n        console.error('Message error:', error);\r\n      });\r\n\r\n      // User status events\r\n      this.socket.on('userOnline', (userId: string) => {\r\n        this.userStatusCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      this.socket.on('userOffline', (userId: string) => {\r\n        this.userStatusCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      // Typing events\r\n      this.socket.on('userTyping', (data: { userId: string, isTyping: boolean }) => {\r\n        this.typingCallbacks.forEach(callback => callback(data));\r\n      });\r\n    }\r\n    return this.socket;\r\n  }\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.removeAllListeners();\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  isConnected() {\r\n    return this.socket && this.socket.connected;\r\n  }\r\n\r\n  sendMessage(receiverId: string, content: string, messageType: string = 'text') {\r\n    if (this.socket) {\r\n      this.socket.emit('sendMessage', { receiverId, content, messageType });\r\n    }\r\n  }\r\n\r\n  onMessage(callback: MessageCallback) {\r\n    this.messageCallbacks.push(callback);\r\n    return () => this.removeMessageCallback(callback);\r\n  }\r\n\r\n  onUserStatus(callback: UserStatusCallback) {\r\n    this.userStatusCallbacks.push(callback);\r\n    return () => this.removeUserStatusCallback(callback);\r\n  }\r\n\r\n  onTyping(callback: TypingCallback) {\r\n    this.typingCallbacks.push(callback);\r\n    return () => this.removeTypingCallback(callback);\r\n  }\r\n\r\n  sendTypingStatus(receiverId: string, isTyping: boolean) {\r\n    if (this.socket) {\r\n      this.socket.emit('typing', { receiverId, isTyping });\r\n    }\r\n  }\r\n\r\n  markAsRead(senderId: string) {\r\n    if (this.socket) {\r\n      this.socket.emit('markAsRead', { senderId });\r\n    }\r\n  }\r\n\r\n  off(event: string) {\r\n    if (this.socket) {\r\n      this.socket.off(event);\r\n    }\r\n  }\r\n\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n\r\n  private removeMessageCallback(callback: MessageCallback) {\r\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserStatusCallback(callback: UserStatusCallback) {\r\n    this.userStatusCallbacks = this.userStatusCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeTypingCallback(callback: TypingCallback) {\r\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\r\n  }\r\n}\r\n\r\nexport const socketService = new SocketService();\r\nexport default socketService;"],"mappings":"AAAA,SAASA,EAAE,QAAgB,kBAAkB;AAO7C,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KACVC,MAAM,GAAkB,IAAI;IAAA,KAC5BC,gBAAgB,GAAsB,EAAE;IAAA,KACxCC,mBAAmB,GAAyB,EAAE;IAAA,KAC9CC,eAAe,GAAqB,EAAE;EAAA;EAAGC,OAAOA,CAACC,KAAa,EAAE;IACtE,IAAI,CAAC,IAAI,CAACL,MAAM,IAAI,IAAI,CAACA,MAAM,CAACM,YAAY,EAAE;MAC5C,IAAI,CAACN,MAAM,GAAGH,EAAE,CAACU,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,EAAE;QACzEC,IAAI,EAAE;UAAEL;QAAM,CAAC;QACfM,UAAU,EAAE,CAAC,WAAW,CAAC;QACzBC,YAAY,EAAE,IAAI;QAClBC,iBAAiB,EAAE,IAAI;QACvBC,oBAAoB,EAAE,IAAI;QAC1BC,oBAAoB,EAAE,EAAE;QACxBC,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;MAEF,IAAI,CAACjB,MAAM,CAACkB,EAAE,CAAC,SAAS,EAAE,MAAM;QAC9BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MACjC,CAAC,CAAC;MAEF,IAAI,CAACpB,MAAM,CAACkB,EAAE,CAAC,WAAW,EAAGG,aAAa,IAAK;QAC7CF,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEC,aAAa,EAAE,UAAU,CAAC;MACpE,CAAC,CAAC;MAEF,IAAI,CAACrB,MAAM,CAACkB,EAAE,CAAC,mBAAmB,EAAGG,aAAa,IAAK;QACrDF,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEC,aAAa,CAAC;MACrD,CAAC,CAAC;MAEF,IAAI,CAACrB,MAAM,CAACkB,EAAE,CAAC,eAAe,EAAGI,KAAY,IAAK;QAChDH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,CAAC,CAAC;MAEF,IAAI,CAACtB,MAAM,CAACkB,EAAE,CAAC,YAAY,EAAGK,MAAM,IAAK;QACvCJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,MAAM,CAAC;QAC3C;QACA,IAAIA,MAAM,KAAK,iBAAiB,IAAIA,MAAM,KAAK,iBAAiB,EAAE;UAChEJ,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;QACtE;MACF,CAAC,CAAC,CAAC;MACH,IAAI,CAACpB,MAAM,CAACkB,EAAE,CAAC,YAAY,EAAGM,OAAgB,IAAK;QACjDL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEI,OAAO,CAAC;QAC7C,IAAI,CAACvB,gBAAgB,CAACwB,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACF,OAAO,CAAC,CAAC;MAC9D,CAAC,CAAC;MAEF,IAAI,CAACxB,MAAM,CAACkB,EAAE,CAAC,kBAAkB,EAAGM,OAAgB,IAAK;QACvDL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEI,OAAO,CAAC;QAC1C,IAAI,CAACvB,gBAAgB,CAACwB,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACF,OAAO,CAAC,CAAC;MAC9D,CAAC,CAAC;MAEF,IAAI,CAACxB,MAAM,CAACkB,EAAE,CAAC,cAAc,EAAGI,KAAwB,IAAK;QAC3DH,OAAO,CAACG,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACxC,CAAC,CAAC;;MAEF;MACA,IAAI,CAACtB,MAAM,CAACkB,EAAE,CAAC,YAAY,EAAGS,MAAc,IAAK;QAC/C,IAAI,CAACzB,mBAAmB,CAACuB,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAAC,CAAC;MAChE,CAAC,CAAC;MAEF,IAAI,CAAC3B,MAAM,CAACkB,EAAE,CAAC,aAAa,EAAGS,MAAc,IAAK;QAChD,IAAI,CAACzB,mBAAmB,CAACuB,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAAC,CAAC;MAChE,CAAC,CAAC;;MAEF;MACA,IAAI,CAAC3B,MAAM,CAACkB,EAAE,CAAC,YAAY,EAAGU,IAA2C,IAAK;QAC5E,IAAI,CAACzB,eAAe,CAACsB,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACE,IAAI,CAAC,CAAC;MAC1D,CAAC,CAAC;IACJ;IACA,OAAO,IAAI,CAAC5B,MAAM;EACpB;EACA6B,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAAC7B,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAAC8B,kBAAkB,CAAC,CAAC;MAChC,IAAI,CAAC9B,MAAM,CAAC6B,UAAU,CAAC,CAAC;MACxB,IAAI,CAAC7B,MAAM,GAAG,IAAI;IACpB;EACF;EAEA+B,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC/B,MAAM,IAAI,IAAI,CAACA,MAAM,CAACgC,SAAS;EAC7C;EAEAC,WAAWA,CAACC,UAAkB,EAAEC,OAAe,EAAEC,WAAmB,GAAG,MAAM,EAAE;IAC7E,IAAI,IAAI,CAACpC,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACqC,IAAI,CAAC,aAAa,EAAE;QAAEH,UAAU;QAAEC,OAAO;QAAEC;MAAY,CAAC,CAAC;IACvE;EACF;EAEAE,SAASA,CAACZ,QAAyB,EAAE;IACnC,IAAI,CAACzB,gBAAgB,CAACsC,IAAI,CAACb,QAAQ,CAAC;IACpC,OAAO,MAAM,IAAI,CAACc,qBAAqB,CAACd,QAAQ,CAAC;EACnD;EAEAe,YAAYA,CAACf,QAA4B,EAAE;IACzC,IAAI,CAACxB,mBAAmB,CAACqC,IAAI,CAACb,QAAQ,CAAC;IACvC,OAAO,MAAM,IAAI,CAACgB,wBAAwB,CAAChB,QAAQ,CAAC;EACtD;EAEAiB,QAAQA,CAACjB,QAAwB,EAAE;IACjC,IAAI,CAACvB,eAAe,CAACoC,IAAI,CAACb,QAAQ,CAAC;IACnC,OAAO,MAAM,IAAI,CAACkB,oBAAoB,CAAClB,QAAQ,CAAC;EAClD;EAEAmB,gBAAgBA,CAACX,UAAkB,EAAEY,QAAiB,EAAE;IACtD,IAAI,IAAI,CAAC9C,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACqC,IAAI,CAAC,QAAQ,EAAE;QAAEH,UAAU;QAAEY;MAAS,CAAC,CAAC;IACtD;EACF;EAEAC,UAAUA,CAACC,QAAgB,EAAE;IAC3B,IAAI,IAAI,CAAChD,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACqC,IAAI,CAAC,YAAY,EAAE;QAAEW;MAAS,CAAC,CAAC;IAC9C;EACF;EAEAC,GAAGA,CAACC,KAAa,EAAE;IACjB,IAAI,IAAI,CAAClD,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACiD,GAAG,CAACC,KAAK,CAAC;IACxB;EACF;EAEAC,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACnD,MAAM;EACpB;EAEQwC,qBAAqBA,CAACd,QAAyB,EAAE;IACvD,IAAI,CAACzB,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACmD,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAK3B,QAAQ,CAAC;EAC7E;EAEQgB,wBAAwBA,CAAChB,QAA4B,EAAE;IAC7D,IAAI,CAACxB,mBAAmB,GAAG,IAAI,CAACA,mBAAmB,CAACkD,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAK3B,QAAQ,CAAC;EACnF;EAEQkB,oBAAoBA,CAAClB,QAAwB,EAAE;IACrD,IAAI,CAACvB,eAAe,GAAG,IAAI,CAACA,eAAe,CAACiD,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAK3B,QAAQ,CAAC;EAC3E;AACF;AAEA,OAAO,MAAM4B,aAAa,GAAG,IAAIxD,aAAa,CAAC,CAAC;AAChD,eAAewD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}