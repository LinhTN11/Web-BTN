{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trann\\\\Desktop\\\\jwt-bt\\\\frontend\\\\src\\\\Components\\\\Chat\\\\MessengerChatPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Card, Typography, Input, Button, List, Avatar, Space, Divider, Badge, Row, Col } from 'antd';\nimport { SendOutlined, UserOutlined, MessageOutlined } from '@ant-design/icons';\nimport { useAuth } from '../../contexts/AuthContext';\nimport socketService from '../../services/socketService';\nimport { chatService } from '../../services/chatService';\nimport './MessengerChatPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst {\n  TextArea\n} = Input;\nconst MessengerChatPage = () => {\n  _s();\n  const {\n    user,\n    token\n  } = useAuth();\n  const [message, setMessage] = useState('');\n  const [messagesByConversation, setMessagesByConversation] = useState({});\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [typing, setTyping] = useState({});\n  const typingTimeoutRef = useRef({});\n  const messagesEndRef = useRef(null);\n  const [socketConnected, setSocketConnected] = useState(false);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const loadMessages = useCallback(async userId => {\n    try {\n      const messages = await chatService.getMessages(userId);\n      // Sort messages by timestamp\n      const sortedMessages = messages.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n      setMessagesByConversation(prev => ({\n        ...prev,\n        [userId]: sortedMessages\n      }));\n      scrollToBottom();\n\n      // Mark messages as read\n      chatService.markAsRead(userId).catch(error => console.error('Error marking messages as read:', error));\n    } catch (error) {\n      console.error('Error loading messages:', error);\n    }\n  }, []);\n  const loadActiveUsers = useCallback(async () => {\n    try {\n      const users = await chatService.getActiveUsers();\n      // Filter out current user\n      const filteredUsers = users.filter(u => u._id !== (user === null || user === void 0 ? void 0 : user._id));\n      setActiveUsers(filteredUsers);\n    } catch (error) {\n      console.error('Error loading active users:', error);\n    }\n  }, [user === null || user === void 0 ? void 0 : user._id]);\n  useEffect(() => {\n    if (token && !socketConnected) {\n      console.log('Connecting socket with token');\n      const socket = socketService.connect(`Bearer ${token}`);\n      if (socket) {\n        socket.on('connect', () => {\n          console.log('Socket connected successfully');\n          setSocketConnected(true);\n        });\n        socket.on('connect_error', error => {\n          console.error('Socket connection error:', error);\n          setSocketConnected(false);\n        });\n        socket.on('disconnect', () => {\n          console.log('Socket disconnected');\n          setSocketConnected(false);\n        });\n      }\n      loadActiveUsers();\n      return () => {\n        console.log('Cleaning up socket connection');\n        socketService.disconnect();\n        setSocketConnected(false);\n      };\n    }\n  }, [token, loadActiveUsers]);\n  useEffect(() => {\n    if (socketConnected) {\n      const messageHandler = newMessage => {\n        console.log('Received message:', newMessage);\n        setMessagesByConversation(prev => {\n          var _prev$userId;\n          const userId = newMessage.sender === (user === null || user === void 0 ? void 0 : user._id) ? newMessage.receiver : newMessage.sender;\n          // Check if message already exists\n          const exists = (_prev$userId = prev[userId]) === null || _prev$userId === void 0 ? void 0 : _prev$userId.some(msg => msg._id === newMessage._id);\n          if (!exists) {\n            return {\n              ...prev,\n              [userId]: [...(prev[userId] || []), newMessage]\n            };\n          }\n          return prev;\n        });\n\n        // Only scroll if the message is part of the current conversation\n        if (newMessage.sender === (user === null || user === void 0 ? void 0 : user._id) && newMessage.receiver === (selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id) || newMessage.sender === (selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id) && newMessage.receiver === (user === null || user === void 0 ? void 0 : user._id)) {\n          scrollToBottom();\n        }\n      };\n      const userStatusHandler = async userId => {\n        await loadActiveUsers();\n      };\n      const typingHandler = ({\n        userId,\n        isTyping\n      }) => {\n        setTyping(prev => ({\n          ...prev,\n          [userId]: isTyping\n        }));\n      };\n      socketService.onMessage(messageHandler);\n      socketService.onUserStatus(userStatusHandler);\n      socketService.onTyping(typingHandler);\n      return () => {\n        // Cleanup event listeners\n        socketService.off('newMessage');\n        socketService.off('messageConfirmed');\n        socketService.off('userOnline');\n        socketService.off('userOffline');\n        socketService.off('userTyping');\n      };\n    }\n  }, [socketConnected, loadActiveUsers, user === null || user === void 0 ? void 0 : user._id, selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id]);\n  useEffect(() => {\n    if (selectedUser) {\n      loadMessages(selectedUser._id);\n    }\n  }, [selectedUser, loadMessages]);\n  const handleSendMessage = async () => {\n    if (!message.trim() || !selectedUser || !(user !== null && user !== void 0 && user._id)) return;\n    try {\n      // Clear typing status\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n      socketService.sendTypingStatus(selectedUser._id, false);\n      const content = message.trim();\n      setMessage(''); // Reset input right away for better UX\n\n      // Create a temporary message\n      const tempMessage = {\n        _id: Date.now().toString(),\n        content,\n        sender: user._id,\n        receiver: selectedUser._id,\n        messageType: 'text',\n        timestamp: new Date(),\n        read: false\n      };\n\n      // Add optimistic update\n      setMessagesByConversation(prev => ({\n        ...prev,\n        [selectedUser._id]: [...(prev[selectedUser._id] || []), tempMessage]\n      }));\n      scrollToBottom();\n\n      // Send through both socket and API for reliability\n      socketService.sendMessage(selectedUser._id, content);\n      try {\n        const savedMessage = await chatService.sendMessage(selectedUser._id, content);\n        // Replace temp message with saved message\n        setMessagesByConversation(prev => ({\n          ...prev,\n          [selectedUser._id]: prev[selectedUser._id].map(msg => msg._id === tempMessage._id ? savedMessage : msg)\n        }));\n      } catch (error) {\n        console.error('Failed to save message to API:', error);\n        // Keep the temporary message as it was sent through socket\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const handleTyping = e => {\n    setMessage(e.target.value);\n    if (selectedUser) {\n      // Clear existing timeout\n      if (typingTimeoutRef.current[selectedUser._id]) {\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\n      }\n\n      // Send typing status\n      socketService.sendTypingStatus(selectedUser._id, true);\n\n      // Set new timeout\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\n        socketService.sendTypingStatus(selectedUser._id, false);\n      }, 2000);\n    }\n  };\n  const formatTime = date => {\n    return new Date(date).toLocaleTimeString('vi-VN', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  const filteredMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messenger-chat-page\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 16,\n      style: {\n        height: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 8,\n        md: 6,\n        lg: 6,\n        xl: 5,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: /*#__PURE__*/_jsxDEV(Space, {\n            children: [/*#__PURE__*/_jsxDEV(MessageOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Conversations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this),\n          className: \"users-card\",\n          bodyStyle: {\n            padding: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(List, {\n            dataSource: activeUsers,\n            renderItem: chatUser => /*#__PURE__*/_jsxDEV(List.Item, {\n              className: `user-item ${(selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id) === chatUser._id ? 'selected' : ''}`,\n              onClick: () => setSelectedUser(chatUser),\n              children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n                avatar: /*#__PURE__*/_jsxDEV(Badge, {\n                  dot: true,\n                  status: chatUser.isOnline ? 'success' : 'default',\n                  offset: [-2, 32],\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 277,\n                      columnNumber: 33\n                    }, this),\n                    src: chatUser.avatar,\n                    size: \"large\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 23\n                }, this),\n                title: /*#__PURE__*/_jsxDEV(Text, {\n                  strong: true,\n                  children: chatUser.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 28\n                }, this),\n                description: typing[chatUser._id] ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Typing...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 25\n                }, this) : chatUser.isOnline ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"success\",\n                  children: \"Online\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 25\n                }, this) : chatUser.lastSeen ? /*#__PURE__*/_jsxDEV(Text, {\n                  type: \"secondary\",\n                  children: [\"Last seen at \", formatTime(chatUser.lastSeen)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 25\n                }, this) : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 16,\n        md: 18,\n        lg: 18,\n        xl: 19,\n        children: selectedUser ? /*#__PURE__*/_jsxDEV(Card, {\n          className: \"chat-card\",\n          title: /*#__PURE__*/_jsxDEV(Space, {\n            children: [/*#__PURE__*/_jsxDEV(Badge, {\n              dot: true,\n              status: selectedUser.isOnline ? 'success' : 'default',\n              offset: [-2, 32],\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 29\n                }, this),\n                src: selectedUser.avatar,\n                size: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: selectedUser.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 19\n            }, this), typing[selectedUser._id] && /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              italic: true,\n              children: \"typing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }, this),\n          style: {\n            height: 'calc(100vh - 200px)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-container\",\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              dataSource: filteredMessages,\n              renderItem: msg => /*#__PURE__*/_jsxDEV(List.Item, {\n                className: `message-item ${msg.sender === (user === null || user === void 0 ? void 0 : user._id) ? 'own-message' : 'other-message'}`,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-content\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-bubble\",\n                    children: /*#__PURE__*/_jsxDEV(Text, {\n                      children: msg.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 340,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Text, {\n                    type: \"secondary\",\n                    className: \"message-time\",\n                    children: formatTime(msg.timestamp)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 342,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              margin: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-input-container\",\n            children: /*#__PURE__*/_jsxDEV(Space.Compact, {\n              style: {\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextArea, {\n                value: message,\n                onChange: handleTyping,\n                onKeyPress: handleKeyPress,\n                placeholder: \"Type a message...\",\n                autoSize: {\n                  minRows: 1,\n                  maxRows: 4\n                },\n                style: {\n                  resize: 'none'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"primary\",\n                icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 27\n                }, this),\n                onClick: handleSendMessage,\n                disabled: !message.trim(),\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Card, {\n          className: \"no-chat-selected\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center',\n              padding: '60px 20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(MessageOutlined, {\n              style: {\n                fontSize: '48px',\n                color: '#d9d9d9'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Title, {\n              level: 4,\n              type: \"secondary\",\n              children: \"Select a conversation to start chatting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              children: \"Choose from your existing conversations on the left or start a new one.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s(MessengerChatPage, \"G+N4MchJdypY83tnUfB2OWBQlUE=\", false, function () {\n  return [useAuth];\n});\n_c = MessengerChatPage;\nexport default MessengerChatPage;\nvar _c;\n$RefreshReg$(_c, \"MessengerChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Card","Typography","Input","Button","List","Avatar","Space","Divider","Badge","Row","Col","SendOutlined","UserOutlined","MessageOutlined","useAuth","socketService","chatService","jsxDEV","_jsxDEV","Title","Text","TextArea","MessengerChatPage","_s","user","token","message","setMessage","messagesByConversation","setMessagesByConversation","activeUsers","setActiveUsers","selectedUser","setSelectedUser","typing","setTyping","typingTimeoutRef","messagesEndRef","socketConnected","setSocketConnected","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","loadMessages","userId","messages","getMessages","sortedMessages","sort","a","b","Date","timestamp","getTime","prev","markAsRead","catch","error","console","loadActiveUsers","users","getActiveUsers","filteredUsers","filter","u","_id","log","socket","connect","on","disconnect","messageHandler","newMessage","_prev$userId","sender","receiver","exists","some","msg","userStatusHandler","typingHandler","isTyping","onMessage","onUserStatus","onTyping","off","handleSendMessage","trim","clearTimeout","sendTypingStatus","content","tempMessage","now","toString","messageType","read","sendMessage","savedMessage","map","handleKeyPress","e","key","shiftKey","preventDefault","handleTyping","target","value","setTimeout","formatTime","date","toLocaleTimeString","hour","minute","filteredMessages","className","children","gutter","style","height","xs","sm","md","lg","xl","title","fileName","_jsxFileName","lineNumber","columnNumber","bodyStyle","padding","dataSource","renderItem","chatUser","Item","onClick","Meta","avatar","dot","status","isOnline","offset","icon","src","size","strong","username","description","type","lastSeen","italic","ref","margin","Compact","width","onChange","onKeyPress","placeholder","autoSize","minRows","maxRows","resize","disabled","textAlign","fontSize","color","level","_c","$RefreshReg$"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/Components/Chat/MessengerChatPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Input, \r\n  Button, \r\n  List, \r\n  Avatar, \r\n  Space,\r\n  Divider,\r\n  Badge,\r\n  Row,\r\n  Col \r\n} from 'antd';\r\nimport { \r\n  SendOutlined, \r\n  UserOutlined,\r\n  MessageOutlined \r\n} from '@ant-design/icons';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport socketService from '../../services/socketService';\r\nimport { chatService, Message, ChatUser } from '../../services/chatService';\r\nimport './MessengerChatPage.css';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst MessengerChatPage: React.FC = () => {\r\n  const { user, token } = useAuth();\r\n  const [message, setMessage] = useState('');\r\n  const [messagesByConversation, setMessagesByConversation] = useState<{ [key: string]: Message[] }>({});\r\n  const [activeUsers, setActiveUsers] = useState<ChatUser[]>([]);\r\n  const [selectedUser, setSelectedUser] = useState<ChatUser | null>(null);\r\n  const [typing, setTyping] = useState<{ [key: string]: boolean }>({});\r\n  const typingTimeoutRef = useRef<{ [key: string]: NodeJS.Timeout }>({});\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const loadMessages = useCallback(async (userId: string) => {\r\n    try {\r\n      const messages = await chatService.getMessages(userId);\r\n      // Sort messages by timestamp\r\n      const sortedMessages = messages.sort((a, b) => \r\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n      );\r\n      \r\n      setMessagesByConversation(prev => ({\r\n        ...prev,\r\n        [userId]: sortedMessages\r\n      }));\r\n      \r\n      scrollToBottom();\r\n      \r\n      // Mark messages as read\r\n      chatService.markAsRead(userId)\r\n        .catch(error => console.error('Error marking messages as read:', error));\r\n    } catch (error) {\r\n      console.error('Error loading messages:', error);\r\n    }\r\n  }, []);\r\n\r\n  const loadActiveUsers = useCallback(async () => {\r\n    try {\r\n      const users = await chatService.getActiveUsers();\r\n      // Filter out current user\r\n      const filteredUsers = users.filter(u => u._id !== user?._id);\r\n      setActiveUsers(filteredUsers);\r\n    } catch (error) {\r\n      console.error('Error loading active users:', error);\r\n    }\r\n  }, [user?._id]);\r\n  useEffect(() => {\r\n    if (token && !socketConnected) {\r\n      console.log('Connecting socket with token');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      \r\n      if (socket) {\r\n        socket.on('connect', () => {\r\n          console.log('Socket connected successfully');\r\n          setSocketConnected(true);\r\n        });\r\n\r\n        socket.on('connect_error', (error: Error) => {\r\n          console.error('Socket connection error:', error);\r\n          setSocketConnected(false);\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n          console.log('Socket disconnected');\r\n          setSocketConnected(false);\r\n        });\r\n      }\r\n\r\n      loadActiveUsers();\r\n\r\n      return () => {\r\n        console.log('Cleaning up socket connection');\r\n        socketService.disconnect();\r\n        setSocketConnected(false);\r\n      };\r\n    }\r\n  }, [token, loadActiveUsers]);\r\n\r\n  useEffect(() => {\r\n    if (socketConnected) {\r\n      const messageHandler = (newMessage: Message) => {\r\n        console.log('Received message:', newMessage);\r\n        setMessagesByConversation(prev => {\r\n          const userId = newMessage.sender === user?._id ? newMessage.receiver : newMessage.sender;\r\n          // Check if message already exists\r\n          const exists = prev[userId]?.some(msg => msg._id === newMessage._id);\r\n          if (!exists) {\r\n            return {\r\n              ...prev,\r\n              [userId]: [...(prev[userId] || []), newMessage]\r\n            };\r\n          }\r\n          return prev;\r\n        });\r\n        \r\n        // Only scroll if the message is part of the current conversation\r\n        if ((newMessage.sender === user?._id && newMessage.receiver === selectedUser?._id) ||\r\n            (newMessage.sender === selectedUser?._id && newMessage.receiver === user?._id)) {\r\n          scrollToBottom();\r\n        }\r\n      };\r\n\r\n      const userStatusHandler = async (userId: string) => {\r\n        await loadActiveUsers();\r\n      };\r\n\r\n      const typingHandler = ({ userId, isTyping }: { userId: string, isTyping: boolean }) => {\r\n        setTyping(prev => ({ ...prev, [userId]: isTyping }));\r\n      };\r\n\r\n      socketService.onMessage(messageHandler);\r\n      socketService.onUserStatus(userStatusHandler);\r\n      socketService.onTyping(typingHandler);\r\n\r\n      return () => {\r\n        // Cleanup event listeners\r\n        socketService.off('newMessage');\r\n        socketService.off('messageConfirmed');\r\n        socketService.off('userOnline');\r\n        socketService.off('userOffline');\r\n        socketService.off('userTyping');\r\n      };\r\n    }\r\n  }, [socketConnected, loadActiveUsers, user?._id, selectedUser?._id]);\r\n\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      loadMessages(selectedUser._id);\r\n    }\r\n  }, [selectedUser, loadMessages]);\r\n  const handleSendMessage = async () => {\r\n    if (!message.trim() || !selectedUser || !user?._id) return;\r\n\r\n    try {\r\n      // Clear typing status\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n      socketService.sendTypingStatus(selectedUser._id, false);\r\n\r\n      const content = message.trim();\r\n      setMessage(''); // Reset input right away for better UX\r\n\r\n      // Create a temporary message\r\n      const tempMessage: Message = {\r\n        _id: Date.now().toString(),\r\n        content,\r\n        sender: user._id,\r\n        receiver: selectedUser._id,\r\n        messageType: 'text',\r\n        timestamp: new Date(),\r\n        read: false\r\n      };\r\n\r\n      // Add optimistic update\r\n      setMessagesByConversation(prev => ({\r\n        ...prev,\r\n        [selectedUser._id]: [...(prev[selectedUser._id] || []), tempMessage]\r\n      }));\r\n      scrollToBottom();\r\n\r\n      // Send through both socket and API for reliability\r\n      socketService.sendMessage(selectedUser._id, content);\r\n      \r\n      try {\r\n        const savedMessage = await chatService.sendMessage(selectedUser._id, content);\r\n        // Replace temp message with saved message\r\n        setMessagesByConversation(prev => ({\r\n          ...prev,\r\n          [selectedUser._id]: prev[selectedUser._id].map(msg => \r\n            msg._id === tempMessage._id ? savedMessage : msg\r\n          )\r\n        }));\r\n      } catch (error) {\r\n        console.error('Failed to save message to API:', error);\r\n        // Keep the temporary message as it was sent through socket\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleTyping = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessage(e.target.value);\r\n    \r\n    if (selectedUser) {\r\n      // Clear existing timeout\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n\r\n      // Send typing status\r\n      socketService.sendTypingStatus(selectedUser._id, true);\r\n\r\n      // Set new timeout\r\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\r\n        socketService.sendTypingStatus(selectedUser._id, false);\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const formatTime = (date: Date) => {\r\n    return new Date(date).toLocaleTimeString('vi-VN', { \r\n      hour: '2-digit', \r\n      minute: '2-digit' \r\n    });\r\n  };\r\n  const filteredMessages = selectedUser \r\n    ? messagesByConversation[selectedUser._id] || []\r\n    : [];\r\n\r\n  return (\r\n    <div className=\"messenger-chat-page\">\r\n      <Row gutter={16} style={{ height: '100%' }}>\r\n        <Col xs={24} sm={8} md={6} lg={6} xl={5}>\r\n          <Card \r\n            title={\r\n              <Space>\r\n                <MessageOutlined />\r\n                <span>Conversations</span>\r\n              </Space>\r\n            }\r\n            className=\"users-card\"\r\n            bodyStyle={{ padding: 0 }}\r\n          >\r\n            <List\r\n              dataSource={activeUsers}\r\n              renderItem={(chatUser) => (\r\n                <List.Item\r\n                  className={`user-item ${selectedUser?._id === chatUser._id ? 'selected' : ''}`}\r\n                  onClick={() => setSelectedUser(chatUser)}\r\n                >\r\n                  <List.Item.Meta\r\n                    avatar={\r\n                      <Badge \r\n                        dot \r\n                        status={chatUser.isOnline ? 'success' : 'default'}\r\n                        offset={[-2, 32]}\r\n                      >\r\n                        <Avatar \r\n                          icon={<UserOutlined />} \r\n                          src={chatUser.avatar}\r\n                          size=\"large\"\r\n                        />\r\n                      </Badge>\r\n                    }\r\n                    title={<Text strong>{chatUser.username}</Text>}\r\n                    description={\r\n                      typing[chatUser._id] ? (\r\n                        <Text type=\"success\">Typing...</Text>\r\n                      ) : chatUser.isOnline ? (\r\n                        <Text type=\"success\">Online</Text>\r\n                      ) : chatUser.lastSeen ? (\r\n                        <Text type=\"secondary\">\r\n                          Last seen at {formatTime(chatUser.lastSeen)}\r\n                        </Text>\r\n                      ) : null\r\n                    }\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col xs={24} sm={16} md={18} lg={18} xl={19}>\r\n          {selectedUser ? (\r\n            <Card\r\n              className=\"chat-card\"\r\n              title={\r\n                <Space>\r\n                  <Badge \r\n                    dot \r\n                    status={selectedUser.isOnline ? 'success' : 'default'}\r\n                    offset={[-2, 32]}\r\n                  >\r\n                    <Avatar \r\n                      icon={<UserOutlined />} \r\n                      src={selectedUser.avatar}\r\n                      size=\"large\"\r\n                    />\r\n                  </Badge>\r\n                  <span>{selectedUser.username}</span>\r\n                  {typing[selectedUser._id] && (\r\n                    <Text type=\"secondary\" italic>typing...</Text>\r\n                  )}\r\n                </Space>\r\n              }\r\n              style={{\r\n                height: 'calc(100vh - 200px)'\r\n              }}\r\n            >\r\n              <div className=\"messages-container\">\r\n                <List\r\n                  dataSource={filteredMessages}\r\n                  renderItem={(msg) => (\r\n                    <List.Item\r\n                      className={`message-item ${\r\n                        msg.sender === user?._id ? 'own-message' : 'other-message'\r\n                      }`}\r\n                    >\r\n                      <div className=\"message-content\">\r\n                        <div className=\"message-bubble\">\r\n                          <Text>{msg.content}</Text>\r\n                        </div>\r\n                        <Text type=\"secondary\" className=\"message-time\">\r\n                          {formatTime(msg.timestamp)}\r\n                        </Text>\r\n                      </div>\r\n                    </List.Item>\r\n                  )}\r\n                />\r\n                <div ref={messagesEndRef} />\r\n              </div>\r\n\r\n              <Divider style={{ margin: 0 }} />\r\n\r\n              <div className=\"message-input-container\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                  <TextArea\r\n                    value={message}\r\n                    onChange={handleTyping}\r\n                    onKeyPress={handleKeyPress}\r\n                    placeholder=\"Type a message...\"\r\n                    autoSize={{ minRows: 1, maxRows: 4 }}\r\n                    style={{ resize: 'none' }}\r\n                  />\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<SendOutlined />}\r\n                    onClick={handleSendMessage}\r\n                    disabled={!message.trim()}\r\n                  >\r\n                    Send\r\n                  </Button>\r\n                </Space.Compact>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <Card className=\"no-chat-selected\">\r\n              <div style={{ textAlign: 'center', padding: '60px 20px' }}>\r\n                <MessageOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\r\n                <Title level={4} type=\"secondary\">Select a conversation to start chatting</Title>\r\n                <Text type=\"secondary\">\r\n                  Choose from your existing conversations on the left or start a new one.\r\n                </Text>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessengerChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}