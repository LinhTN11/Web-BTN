{"ast":null,"code":"import{io}from'socket.io-client';class SocketService{constructor(){this.socket=null;this.messageCallbacks=[];this.userOnlineCallbacks=[];this.userOfflineCallbacks=[];this.typingCallbacks=[];this.heartbeatInterval=null;this.lastToken='';}connect(token){this.lastToken=token;if(!this.socket||this.socket.disconnected){this.socket=io(process.env.REACT_APP_API_URL||'http://localhost:8000',{auth:{token},transports:['websocket','polling'],reconnection:true,reconnectionDelay:100,reconnectionDelayMax:1000,reconnectionAttempts:50,forceNew:true,timeout:5000,closeOnBeforeunload:false});this.socket.on('connect',()=>{console.log('Socket connected');this.startHeartbeat();if(this.lastToken){var _this$socket;(_this$socket=this.socket)===null||_this$socket===void 0?void 0:_this$socket.emit('rejoin',{token:this.lastToken});}});this.socket.on('reconnect',attemptNumber=>{console.log('Socket reconnected after',attemptNumber,'attempts');this.startHeartbeat();});this.socket.on('reconnect_attempt',attemptNumber=>{console.log('Reconnection attempt:',attemptNumber);});this.socket.on('connect_error',error=>{console.error('Socket connection error:',error);});this.socket.on('disconnect',reason=>{console.log('Socket disconnected:',reason);if(reason==='transport close'||reason==='transport error'||reason==='ping timeout'){console.log('Temporary disconnect, socket will try to reconnect...');setTimeout(()=>{var _this$socket2;if(!((_this$socket2=this.socket)!==null&&_this$socket2!==void 0&&_this$socket2.connected)){console.log('Force reconnecting socket after disconnect...');this.forceReconnect(this.lastToken);}},2000);}else{console.log('Permanent disconnect:',reason);}});this.socket.on('reconnect_failed',()=>{console.error('Socket failed to reconnect after all attempts');});this.socket.on('reconnect_error',error=>{console.error('Socket reconnection error:',error);});// Message events\nthis.socket.on('newMessage',message=>{var _this$socket3,_this$socket4;console.log('Received new message:',message,'Current user:',(_this$socket3=this.socket)===null||_this$socket3===void 0?void 0:_this$socket3.id,'Auth:',(_this$socket4=this.socket)===null||_this$socket4===void 0?void 0:_this$socket4.auth);// Gọi callback để cập nhật UI ngay lập tức\nthis.messageCallbacks.forEach(callback=>callback(message));});this.socket.on('messageConfirmed',message=>{var _this$socket5,_this$socket6;console.log('Message confirmed:',message,'Current user:',(_this$socket5=this.socket)===null||_this$socket5===void 0?void 0:_this$socket5.id,'Auth:',(_this$socket6=this.socket)===null||_this$socket6===void 0?void 0:_this$socket6.auth);this.messageCallbacks.forEach(callback=>callback(message));});this.socket.on('messageError',error=>{console.error('Message error:',error);});// User status events\nthis.socket.on('userOnline',userId=>{this.userOnlineCallbacks.forEach(callback=>callback(userId));});this.socket.on('userOffline',userId=>{this.userOfflineCallbacks.forEach(callback=>callback(userId));});// Typing events\nthis.socket.on('userTyping',data=>{this.typingCallbacks.forEach(callback=>callback(data));});this.socket.on('ping',()=>{var _this$socket7;// Khi nhận được ping từ server, gửi lại pong để giữ kết nối\n(_this$socket7=this.socket)===null||_this$socket7===void 0?void 0:_this$socket7.emit('pong');// Reset lại heartbeat để đảm bảo không bị timeout\nthis.startHeartbeat();});}return this.socket;}disconnect(){this.stopHeartbeat();if(this.socket){this.socket.removeAllListeners();this.socket.disconnect();this.socket=null;}}forceReconnect(token){console.log('Force reconnecting socket...');this.disconnect();return this.connect(token);}isConnected(){return this.socket&&this.socket.connected;}startHeartbeat(){this.stopHeartbeat();// Gửi heartbeat mỗi 10 giây để giữ kết nối luôn sống\nthis.heartbeatInterval=setInterval(()=>{if(this.socket&&this.socket.connected){this.socket.emit('heartbeat');console.log('Heartbeat sent');}},15000);// 10 giây\n}stopHeartbeat(){if(this.heartbeatInterval){clearInterval(this.heartbeatInterval);this.heartbeatInterval=null;}}sendMessage(receiverId,content){let messageType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'text';if(this.socket){this.socket.emit('sendMessage',{receiverId,content,messageType});}}onMessage(callback){this.messageCallbacks.push(callback);return()=>this.removeMessageCallback(callback);}onUserOnline(callback){this.userOnlineCallbacks.push(callback);return()=>this.removeUserOnlineCallback(callback);}onUserOffline(callback){this.userOfflineCallbacks.push(callback);return()=>this.removeUserOfflineCallback(callback);}// Keep for backward compatibility\nonUserStatus(callback){return this.onUserOnline(callback);}onTyping(callback){this.typingCallbacks.push(callback);return()=>this.removeTypingCallback(callback);}sendTypingStatus(receiverId,isTyping){if(this.socket){this.socket.emit('typing',{receiverId,isTyping});}}markAsRead(senderId){if(this.socket){this.socket.emit('markAsRead',{senderId});}}off(event){if(this.socket){this.socket.off(event);}}getSocket(){return this.socket;}removeMessageCallback(callback){this.messageCallbacks=this.messageCallbacks.filter(cb=>cb!==callback);}removeUserOnlineCallback(callback){this.userOnlineCallbacks=this.userOnlineCallbacks.filter(cb=>cb!==callback);}removeUserOfflineCallback(callback){this.userOfflineCallbacks=this.userOfflineCallbacks.filter(cb=>cb!==callback);}removeTypingCallback(callback){this.typingCallbacks=this.typingCallbacks.filter(cb=>cb!==callback);}}export const socketService=new SocketService();export default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","messageCallbacks","userOnlineCallbacks","userOfflineCallbacks","typingCallbacks","heartbeatInterval","lastToken","connect","token","disconnected","process","env","REACT_APP_API_URL","auth","transports","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","forceNew","timeout","closeOnBeforeunload","on","console","log","startHeartbeat","_this$socket","emit","attemptNumber","error","reason","setTimeout","_this$socket2","connected","forceReconnect","message","_this$socket3","_this$socket4","id","forEach","callback","_this$socket5","_this$socket6","userId","data","_this$socket7","disconnect","stopHeartbeat","removeAllListeners","isConnected","setInterval","clearInterval","sendMessage","receiverId","content","messageType","arguments","length","undefined","onMessage","push","removeMessageCallback","onUserOnline","removeUserOnlineCallback","onUserOffline","removeUserOfflineCallback","onUserStatus","onTyping","removeTypingCallback","sendTypingStatus","isTyping","markAsRead","senderId","off","event","getSocket","filter","cb","socketService"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/socketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nimport { Message, ChatUser } from './chatService';\r\n\r\ntype MessageCallback = (message: Message) => void;\r\ntype UserOnlineCallback = (userId: string) => void;\r\ntype UserOfflineCallback = (userId: string) => void;\r\ntype TypingCallback = (data: { userId: string, isTyping: boolean }) => void;\r\n\r\nclass SocketService {\r\n  private socket: Socket | null = null;\r\n  private messageCallbacks: MessageCallback[] = [];\r\n  private userOnlineCallbacks: UserOnlineCallback[] = [];\r\n  private userOfflineCallbacks: UserOfflineCallback[] = [];\r\n  private typingCallbacks: TypingCallback[] = [];\r\n  private heartbeatInterval: NodeJS.Timeout | null = null;\r\n  private lastToken: string = '';\r\n\r\n  connect(token: string) {\r\n    this.lastToken = token;\r\n    if (!this.socket || this.socket.disconnected) {\r\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:8000', {\r\n        auth: { token },\r\n        transports: ['websocket', 'polling'],\r\n        reconnection: true,\r\n        reconnectionDelay: 100,\r\n        reconnectionDelayMax: 1000,\r\n        reconnectionAttempts: 50,\r\n        forceNew: true,\r\n        timeout: 5000,\r\n        closeOnBeforeunload: false\r\n      });\r\n      this.socket.on('connect', () => {\r\n        console.log('Socket connected');\r\n        this.startHeartbeat();\r\n        if (this.lastToken) {\r\n          this.socket?.emit('rejoin', { token: this.lastToken });\r\n        }\r\n      });\r\n\r\n      this.socket.on('reconnect', (attemptNumber) => {\r\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\r\n        this.startHeartbeat();\r\n      });\r\n\r\n      this.socket.on('reconnect_attempt', (attemptNumber) => {\r\n        console.log('Reconnection attempt:', attemptNumber);\r\n      });\r\n\r\n      this.socket.on('connect_error', (error: Error) => {\r\n        console.error('Socket connection error:', error);\r\n      });      this.socket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        if (reason === 'transport close' || \r\n            reason === 'transport error' || \r\n            reason === 'ping timeout') {\r\n          console.log('Temporary disconnect, socket will try to reconnect...');\r\n          setTimeout(() => {\r\n            if (!this.socket?.connected) {\r\n              console.log('Force reconnecting socket after disconnect...');\r\n              this.forceReconnect(this.lastToken);\r\n            }\r\n          }, 2000);\r\n        } else {\r\n          console.log('Permanent disconnect:', reason);\r\n        }\r\n      });      this.socket.on('reconnect_failed', () => {\r\n        console.error('Socket failed to reconnect after all attempts');\r\n      });\r\n\r\n      this.socket.on('reconnect_error', (error) => {\r\n        console.error('Socket reconnection error:', error);\r\n      });\r\n\r\n      // Message events\r\n      this.socket.on('newMessage', (message: Message) => {\r\n        console.log('Received new message:', message, 'Current user:', this.socket?.id, 'Auth:', this.socket?.auth);\r\n        // Gọi callback để cập nhật UI ngay lập tức\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageConfirmed', (message: Message) => {\r\n        console.log('Message confirmed:', message, 'Current user:', this.socket?.id, 'Auth:', this.socket?.auth);\r\n        this.messageCallbacks.forEach(callback => callback(message));\r\n      });\r\n\r\n      this.socket.on('messageError', (error: { error: string }) => {\r\n        console.error('Message error:', error);\r\n      });      // User status events\r\n      this.socket.on('userOnline', (userId: string) => {\r\n        this.userOnlineCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      this.socket.on('userOffline', (userId: string) => {\r\n        this.userOfflineCallbacks.forEach(callback => callback(userId));\r\n      });\r\n\r\n      // Typing events\r\n      this.socket.on('userTyping', (data: { userId: string, isTyping: boolean }) => {\r\n        this.typingCallbacks.forEach(callback => callback(data));\r\n      });\r\n\r\n      this.socket.on('ping', () => {\r\n        // Khi nhận được ping từ server, gửi lại pong để giữ kết nối\r\n        this.socket?.emit('pong');\r\n        // Reset lại heartbeat để đảm bảo không bị timeout\r\n        this.startHeartbeat();\r\n      });\r\n    }\r\n    return this.socket;\r\n  }  disconnect() {\r\n    this.stopHeartbeat();\r\n    if (this.socket) {\r\n      this.socket.removeAllListeners();\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  forceReconnect(token: string) {\r\n    console.log('Force reconnecting socket...');\r\n    this.disconnect();\r\n    return this.connect(token);\r\n  }\r\n\r\n  isConnected() {\r\n    return this.socket && this.socket.connected;\r\n  }\r\n  private startHeartbeat() {\r\n    this.stopHeartbeat();\r\n    // Gửi heartbeat mỗi 10 giây để giữ kết nối luôn sống\r\n    this.heartbeatInterval = setInterval(() => {\r\n      if (this.socket && this.socket.connected) {\r\n        this.socket.emit('heartbeat');\r\n        console.log('Heartbeat sent');\r\n      }\r\n    }, 15000); // 10 giây\r\n  }\r\n\r\n  private stopHeartbeat() {\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval);\r\n      this.heartbeatInterval = null;\r\n    }\r\n  }\r\n\r\n  sendMessage(receiverId: string, content: string, messageType: string = 'text') {\r\n    if (this.socket) {\r\n      this.socket.emit('sendMessage', { receiverId, content, messageType });\r\n    }\r\n  }\r\n  onMessage(callback: MessageCallback) {\r\n    this.messageCallbacks.push(callback);\r\n    return () => this.removeMessageCallback(callback);\r\n  }\r\n\r\n  onUserOnline(callback: UserOnlineCallback) {\r\n    this.userOnlineCallbacks.push(callback);\r\n    return () => this.removeUserOnlineCallback(callback);\r\n  }\r\n\r\n  onUserOffline(callback: UserOfflineCallback) {\r\n    this.userOfflineCallbacks.push(callback);\r\n    return () => this.removeUserOfflineCallback(callback);\r\n  }\r\n\r\n  // Keep for backward compatibility\r\n  onUserStatus(callback: UserOnlineCallback) {\r\n    return this.onUserOnline(callback);\r\n  }\r\n\r\n  onTyping(callback: TypingCallback) {\r\n    this.typingCallbacks.push(callback);\r\n    return () => this.removeTypingCallback(callback);\r\n  }\r\n\r\n  sendTypingStatus(receiverId: string, isTyping: boolean) {\r\n    if (this.socket) {\r\n      this.socket.emit('typing', { receiverId, isTyping });\r\n    }\r\n  }\r\n\r\n  markAsRead(senderId: string) {\r\n    if (this.socket) {\r\n      this.socket.emit('markAsRead', { senderId });\r\n    }\r\n  }\r\n\r\n  off(event: string) {\r\n    if (this.socket) {\r\n      this.socket.off(event);\r\n    }\r\n  }\r\n\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n  private removeMessageCallback(callback: MessageCallback) {\r\n    this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserOnlineCallback(callback: UserOnlineCallback) {\r\n    this.userOnlineCallbacks = this.userOnlineCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeUserOfflineCallback(callback: UserOfflineCallback) {\r\n    this.userOfflineCallbacks = this.userOfflineCallbacks.filter(cb => cb !== callback);\r\n  }\r\n\r\n  private removeTypingCallback(callback: TypingCallback) {\r\n    this.typingCallbacks = this.typingCallbacks.filter(cb => cb !== callback);\r\n  }\r\n}\r\n\r\nexport const socketService = new SocketService();\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}