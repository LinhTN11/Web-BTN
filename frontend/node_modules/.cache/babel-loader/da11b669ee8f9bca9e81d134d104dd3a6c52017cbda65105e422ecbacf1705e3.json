{"ast":null,"code":"import api from './api';\nexport const chatService = {\n  getMessages: async userId => {\n    try {\n      const response = await api.get(`/v1/chat/conversation/${userId}`);\n      return response.data.data.messages;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      return [];\n    }\n  },\n  sendMessage: async (receiverId, content, messageType = 'text') => {\n    const response = await api.post('/v1/chat/send', {\n      receiverId,\n      content,\n      messageType\n    });\n    return response.data;\n  },\n  markAsRead: async senderId => {\n    await api.post('/v1/chat/read', {\n      senderId\n    });\n  },\n  getActiveUsers: async () => {\n    try {\n      const response = await api.get('/v1/chat/users');\n      return response.data.data.users;\n    } catch (error) {\n      console.error('Error fetching active users:', error);\n      return [];\n    }\n  },\n  getConversations: async () => {\n    const response = await api.get('/v1/chat/conversations');\n    return response.data;\n  },\n  getUnreadCount: async () => {\n    const response = await api.get('/v1/chat/unread-count');\n    return response.data.unreadCount;\n  },\n  // Add new function to get user by ID\n  getUserById: async userId => {\n    try {\n      const response = await api.get(`/v1/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n  }\n};\nexport default chatService;","map":{"version":3,"names":["api","chatService","getMessages","userId","response","get","data","messages","error","console","sendMessage","receiverId","content","messageType","post","markAsRead","senderId","getActiveUsers","users","getConversations","getUnreadCount","unreadCount","getUserById"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/chatService.ts"],"sourcesContent":["import api from './api';\r\n\r\nexport interface MessageUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface Message {\r\n  _id: string;\r\n  content: string;\r\n  sender: string | MessageUser;\r\n  receiver: string | MessageUser;\r\n  messageType: 'text' | 'image' | 'file';\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\nexport interface ChatUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n  isOnline: boolean;\r\n  lastSeen?: Date;\r\n}\r\n\r\nexport const chatService = {\r\n  getMessages: async (userId: string): Promise<Message[]> => {\r\n    try {\r\n      const response = await api.get(`/v1/chat/conversation/${userId}`);\r\n      return response.data.data.messages;\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  sendMessage: async (receiverId: string, content: string, messageType: string = 'text'): Promise<Message> => {\r\n    const response = await api.post('/v1/chat/send', {\r\n      receiverId,\r\n      content,\r\n      messageType\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  markAsRead: async (senderId: string): Promise<void> => {\r\n    await api.post('/v1/chat/read', { senderId });\r\n  },\r\n  getActiveUsers: async (): Promise<ChatUser[]> => {\r\n    try {\r\n      const response = await api.get('/v1/chat/users');\r\n      return response.data.data.users;\r\n    } catch (error) {\r\n      console.error('Error fetching active users:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  getConversations: async (): Promise<{\r\n    user: ChatUser;\r\n    lastMessage: Message | null;\r\n    unreadCount: number;\r\n  }[]> => {\r\n    const response = await api.get('/v1/chat/conversations');\r\n    return response.data;\r\n  },\r\n\r\n  getUnreadCount: async (): Promise<number> => {\r\n    const response = await api.get('/v1/chat/unread-count');\r\n    return response.data.unreadCount;\r\n  },\r\n\r\n  // Add new function to get user by ID\r\n  getUserById: async (userId: string): Promise<ChatUser | null> => {\r\n    try {\r\n      const response = await api.get(`/v1/user/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nexport default chatService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AA0BvB,OAAO,MAAMC,WAAW,GAAG;EACzBC,WAAW,EAAE,MAAOC,MAAc,IAAyB;IACzD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,yBAAyBF,MAAM,EAAE,CAAC;MACjE,OAAOC,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACC,QAAQ;IACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,EAAE;IACX;EACF,CAAC;EAEDE,WAAW,EAAE,MAAAA,CAAOC,UAAkB,EAAEC,OAAe,EAAEC,WAAmB,GAAG,MAAM,KAAuB;IAC1G,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACc,IAAI,CAAC,eAAe,EAAE;MAC/CH,UAAU;MACVC,OAAO;MACPC;IACF,CAAC,CAAC;IACF,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDS,UAAU,EAAE,MAAOC,QAAgB,IAAoB;IACrD,MAAMhB,GAAG,CAACc,IAAI,CAAC,eAAe,EAAE;MAAEE;IAAS,CAAC,CAAC;EAC/C,CAAC;EACDC,cAAc,EAAE,MAAAA,CAAA,KAAiC;IAC/C,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,gBAAgB,CAAC;MAChD,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACY,KAAK;IACjC,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,EAAE;IACX;EACF,CAAC;EAEDW,gBAAgB,EAAE,MAAAA,CAAA,KAIV;IACN,MAAMf,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDc,cAAc,EAAE,MAAAA,CAAA,KAA6B;IAC3C,MAAMhB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,uBAAuB,CAAC;IACvD,OAAOD,QAAQ,CAACE,IAAI,CAACe,WAAW;EAClC,CAAC;EAED;EACAC,WAAW,EAAE,MAAOnB,MAAc,IAA+B;IAC/D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,YAAYF,MAAM,EAAE,CAAC;MACpD,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACb;EACF;AACF,CAAC;AAED,eAAeP,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}