{"ast":null,"code":"import _objectSpread from\"C:/Users/trann/Desktop/jwt-bt/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback,useRef}from'react';import{Card,Typography,Input,Button,List,Avatar,Space,Divider,Badge,Row,Col,Tooltip}from'antd';import{SendOutlined,UserOutlined,MessageOutlined}from'@ant-design/icons';import{useAuth}from'../../contexts/AuthContext';import socketService from'../../services/socketService';import{chatService}from'../../services/chatService';import'./MessengerChatPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const{Title,Text}=Typography;const{TextArea}=Input;const MessengerChatPage=()=>{const{user,token}=useAuth();const[message,setMessage]=useState('');const[messagesByConversation,setMessagesByConversation]=useState({});const[activeUsers,setActiveUsers]=useState([]);const[selectedUser,setSelectedUser]=useState(null);const[typing,setTyping]=useState({});const typingTimeoutRef=useRef({});const messagesEndRef=useRef(null);const[socketConnected,setSocketConnected]=useState(false);const[searchQuery,setSearchQuery]=useState('');const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};const loadMessages=useCallback(async userId=>{try{const messages=await chatService.getMessages(userId);console.log('API getMessages for',userId,'returned',messages);// Sort messages by timestamp\nconst sortedMessages=messages.sort((a,b)=>new Date(a.timestamp).getTime()-new Date(b.timestamp).getTime());setMessagesByConversation(prev=>{const newState=_objectSpread(_objectSpread({},prev),{},{[userId]:sortedMessages});console.log('setMessagesByConversation after loadMessages:',newState);return newState;});scrollToBottom();// Mark messages as read\nchatService.markAsRead(userId).catch(error=>console.error('Error marking messages as read:',error));}catch(error){console.error('Error loading messages:',error);}},[]);const loadActiveUsers=useCallback(async()=>{try{const users=await chatService.getActiveUsers();// Filter out current user\nconst filteredUsers=users.filter(u=>u._id!==(user===null||user===void 0?void 0:user._id));setActiveUsers(filteredUsers);// Auto-select first user if no user is selected and there are users available\nif(!selectedUser&&filteredUsers.length>0){setSelectedUser(filteredUsers[0]);}}catch(error){console.error('Error loading active users:',error);}},[user===null||user===void 0?void 0:user._id,selectedUser]);useEffect(()=>{if(token&&!socketConnected){console.log('Connecting socket with token');const socket=socketService.connect(\"Bearer \".concat(token));if(socket){socket.on('connect',()=>{console.log('Socket connected successfully');setSocketConnected(true);// Reload messages when reconnected\nif(selectedUser){loadMessages(selectedUser._id);}loadActiveUsers();});socket.on('reconnect',()=>{console.log('Socket reconnected successfully');setSocketConnected(true);// Reload messages when reconnected\nif(selectedUser){loadMessages(selectedUser._id);}loadActiveUsers();});socket.on('connect_error',error=>{console.error('Socket connection error:',error);setSocketConnected(false);});socket.on('disconnect',reason=>{console.log('Socket disconnected:',reason);// Only set disconnected for permanent disconnections\nif(reason==='io server disconnect'||reason==='io client disconnect'){setSocketConnected(false);}// For temporary disconnections, keep the connected state and let reconnect handle it\n});}loadActiveUsers();return()=>{console.log('Cleaning up socket connection');if(socketService.isConnected()){socketService.disconnect();}setSocketConnected(false);};}},[token,loadActiveUsers,selectedUser,loadMessages]);useEffect(()=>{if(socketConnected){const messageHandler=newMessage=>{console.log('messageHandler called:',newMessage,'Current user:',user,'Selected:',selectedUser);// Extract IDs correctly regardless of the format\nconst senderId=typeof newMessage.sender==='string'?newMessage.sender:newMessage.sender._id;const receiverId=typeof newMessage.receiver==='string'?newMessage.receiver:newMessage.receiver._id;const userId=String(user===null||user===void 0?void 0:user._id);// Only update conversation if we're either the sender or receiver\nif(senderId===userId||receiverId===userId){// Get the ID of the other person in the conversation\nconst conversationId=senderId===userId?receiverId:senderId;setMessagesByConversation(prev=>{const conversationMessages=prev[conversationId]||[];// Check if this is confirming an optimistic message\nconst optimisticIndex=conversationMessages.findIndex(msg=>msg._id.startsWith('temp_')&&msg.content===newMessage.content&&senderId===userId&&Math.abs(new Date(msg.timestamp).getTime()-new Date(newMessage.timestamp).getTime())<5000// Within 5 seconds\n);if(optimisticIndex!==-1){// Replace optimistic message with real message\nconst updatedMessages=[...conversationMessages];updatedMessages[optimisticIndex]=_objectSpread(_objectSpread({},newMessage),{},{sender:senderId,receiver:receiverId,_id:String(newMessage._id)});return _objectSpread(_objectSpread({},prev),{},{[conversationId]:updatedMessages.sort((a,b)=>new Date(a.timestamp).getTime()-new Date(b.timestamp).getTime())});}// Check if message already exists by ID\nconst exists=conversationMessages.some(msg=>String(msg._id)===String(newMessage._id));if(!exists){// Normalize IDs to string for consistency\nconst normalizedMessage=_objectSpread(_objectSpread({},newMessage),{},{sender:senderId,receiver:receiverId,_id:String(newMessage._id)});// Sort messages by timestamp\nconst updatedMessages=[...conversationMessages,normalizedMessage].sort((a,b)=>new Date(a.timestamp).getTime()-new Date(b.timestamp).getTime());return _objectSpread(_objectSpread({},prev),{},{[conversationId]:updatedMessages});}return prev;});}// Only scroll if the message belongs to the currently selected conversation\nif(selectedUser&&(senderId===String(selectedUser._id)||receiverId===String(selectedUser._id))){scrollToBottom();}};const userOnlineHandler=userId=>{console.log('User came online:',userId);setActiveUsers(prev=>prev.map(user=>user._id===userId?_objectSpread(_objectSpread({},user),{},{isOnline:true}):user));};const userOfflineHandler=userId=>{console.log('User went offline:',userId);setActiveUsers(prev=>prev.map(user=>user._id===userId?_objectSpread(_objectSpread({},user),{},{isOnline:false}):user));};const typingHandler=_ref=>{let{userId,isTyping}=_ref;setTyping(prev=>_objectSpread(_objectSpread({},prev),{},{[userId]:isTyping}));};socketService.onMessage(messageHandler);socketService.onUserOnline(userOnlineHandler);socketService.onUserOffline(userOfflineHandler);socketService.onTyping(typingHandler);// Handle message confirmation for sender\nconst messageConfirmedHandler=confirmedMessage=>{console.log('messageConfirmedHandler called:',confirmedMessage,'Current user:',user,'Selected:',selectedUser);// Extract IDs correctly\nconst senderId=typeof confirmedMessage.sender==='string'?confirmedMessage.sender:confirmedMessage.sender._id;const receiverId=typeof confirmedMessage.receiver==='string'?confirmedMessage.receiver:confirmedMessage.receiver._id;const userId=String(user===null||user===void 0?void 0:user._id);// Only handle confirmation for messages sent by current user\nif(senderId===userId){const conversationId=receiverId;setMessagesByConversation(prev=>{const conversationMessages=prev[conversationId]||[];// Find and replace temporary message or add new one if not exists\nconst messageExists=conversationMessages.some(msg=>String(msg._id)===String(confirmedMessage._id));if(!messageExists){// If message doesn't exist, add it\nconst normalizedMessage=_objectSpread(_objectSpread({},confirmedMessage),{},{sender:senderId,receiver:receiverId,_id:String(confirmedMessage._id)});// Remove any temporary messages with same content\nconst filteredMessages=conversationMessages.filter(msg=>!(msg.content===confirmedMessage.content&&msg._id.toString().length>10)// temp IDs are typically longer\n);const updatedMessages=[...filteredMessages,normalizedMessage].sort((a,b)=>new Date(a.timestamp).getTime()-new Date(b.timestamp).getTime());return _objectSpread(_objectSpread({},prev),{},{[conversationId]:updatedMessages});}return prev;});// Scroll to bottom if this is the selected conversation\nif(selectedUser&&String(selectedUser._id)===conversationId){scrollToBottom();}}};// Listen for messageConfirmed event\nif(socketService.getSocket()){var _socketService$getSoc;(_socketService$getSoc=socketService.getSocket())===null||_socketService$getSoc===void 0?void 0:_socketService$getSoc.on('messageConfirmed',messageConfirmedHandler);}return()=>{socketService.off('newMessage');socketService.off('messageConfirmed');socketService.off('userOnline');socketService.off('userOffline');socketService.off('userTyping');if(socketService.getSocket()){var _socketService$getSoc2;(_socketService$getSoc2=socketService.getSocket())===null||_socketService$getSoc2===void 0?void 0:_socketService$getSoc2.off('messageConfirmed',messageConfirmedHandler);}};}},[socketConnected,user,selectedUser]);useEffect(()=>{if(selectedUser){loadMessages(selectedUser._id);}},[selectedUser,loadMessages]);// Handle page visibility changes (tab switching)\nuseEffect(()=>{const handleVisibilityChange=()=>{if(document.visibilityState==='visible'){console.log('Page became visible, checking socket connection...');// Reconnect socket if needed\nif(!socketService.isConnected()&&token){console.log('Reconnecting socket after tab switch...');const socket=socketService.connect(\"Bearer \".concat(token));if(socket){socket.on('connect',()=>{console.log('Reconnected after tab switch');setSocketConnected(true);// Reload data when reconnected\nloadActiveUsers();if(selectedUser){loadMessages(selectedUser._id);}});}}else if(socketService.isConnected()){// Socket is connected, just refresh data\nconsole.log('Socket still connected, refreshing data...');loadActiveUsers();if(selectedUser){loadMessages(selectedUser._id);}}}};document.addEventListener('visibilitychange',handleVisibilityChange);return()=>{document.removeEventListener('visibilitychange',handleVisibilityChange);};},[token,selectedUser,loadActiveUsers,loadMessages]);const handleSendMessage=async()=>{if(!message.trim()||!selectedUser||!(user!==null&&user!==void 0&&user._id))return;// Check if socket is connected\nif(!socketService.isConnected()){console.log('Socket not connected, attempting to reconnect...');const socket=socketService.connect(\"Bearer \".concat(token));if(socket){socket.on('connect',()=>{console.log('Reconnected, sending message...');setSocketConnected(true);// Send the message after reconnection\nsocketService.sendMessage(selectedUser._id,message.trim());});}return;}const content=message.trim();setMessage('');// Optimistic update - add message immediately to UI\nconst optimisticMessage={_id:\"temp_\".concat(Date.now(),\"_\").concat(Math.random()),// Temporary ID\nsender:user._id,receiver:selectedUser._id,content:content,timestamp:new Date(),read:false,messageType:'text',status:'sending'// Add status to track message state\n};// Add optimistic message to UI immediately\nsetMessagesByConversation(prev=>{const conversationMessages=prev[selectedUser._id]||[];return _objectSpread(_objectSpread({},prev),{},{[selectedUser._id]:[...conversationMessages,optimisticMessage]});});// Scroll to bottom immediately\nsetTimeout(()=>scrollToBottom(),10);try{// Clear typing status\nif(typingTimeoutRef.current[selectedUser._id]){clearTimeout(typingTimeoutRef.current[selectedUser._id]);}socketService.sendTypingStatus(selectedUser._id,false);// Send through socket\nsocketService.sendMessage(selectedUser._id,content);// Set a timeout to mark message as failed if not confirmed within 10 seconds\nsetTimeout(()=>{setMessagesByConversation(prev=>{const conversationMessages=prev[selectedUser._id]||[];const messageIndex=conversationMessages.findIndex(msg=>msg._id===optimisticMessage._id);if(messageIndex!==-1&&conversationMessages[messageIndex]._id.startsWith('temp_')){// Message still has temp ID, mark as failed\nconst updatedMessages=[...conversationMessages];updatedMessages[messageIndex]=_objectSpread(_objectSpread({},updatedMessages[messageIndex]),{},{status:'failed'});return _objectSpread(_objectSpread({},prev),{},{[selectedUser._id]:updatedMessages});}return prev;});},10000);}catch(error){console.error('Error sending message:',error);// Mark the optimistic message as failed\nsetMessagesByConversation(prev=>{const conversationMessages=prev[selectedUser._id]||[];const messageIndex=conversationMessages.findIndex(msg=>msg._id===optimisticMessage._id);if(messageIndex!==-1){const updatedMessages=[...conversationMessages];updatedMessages[messageIndex]=_objectSpread(_objectSpread({},updatedMessages[messageIndex]),{},{status:'failed'});return _objectSpread(_objectSpread({},prev),{},{[selectedUser._id]:updatedMessages});}return prev;});}};const handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSendMessage();}};const handleTyping=e=>{setMessage(e.target.value);if(selectedUser){// Clear existing timeout\nif(typingTimeoutRef.current[selectedUser._id]){clearTimeout(typingTimeoutRef.current[selectedUser._id]);}// Send typing status\nsocketService.sendTypingStatus(selectedUser._id,true);// Set new timeout\ntypingTimeoutRef.current[selectedUser._id]=setTimeout(()=>{socketService.sendTypingStatus(selectedUser._id,false);},2000);}};const formatTime=date=>{try{const messageDate=new Date(date);// Check if date is valid\nif(isNaN(messageDate.getTime())){return'Invalid date';}const now=new Date();const diffMs=now.getTime()-messageDate.getTime();const diffMinutes=Math.floor(diffMs/(1000*60));const diffHours=Math.floor(diffMs/(1000*60*60));const diffDays=Math.floor(diffMs/(1000*60*60*24));if(diffMinutes<1){return'Vừa xong';}else if(diffMinutes<60){return\"\".concat(diffMinutes,\" ph\\xFAt tr\\u01B0\\u1EDBc\");}else if(diffHours<24){return\"\".concat(diffHours,\" gi\\u1EDD tr\\u01B0\\u1EDBc\");}else if(diffDays<7){return\"\".concat(diffDays,\" ng\\xE0y tr\\u01B0\\u1EDBc\");}else{return messageDate.toLocaleDateString('vi-VN');}}catch(error){console.error('Error formatting time:',error);return'Invalid date';}};const formatFullDateTime=date=>{try{const messageDate=new Date(date);// Check if date is valid\nif(isNaN(messageDate.getTime())){return'Invalid date';}return messageDate.toLocaleString('vi-VN',{weekday:'long',year:'numeric',month:'long',day:'numeric',hour:'2-digit',minute:'2-digit',second:'2-digit'});}catch(error){console.error('Error formatting full date time:',error);return'Invalid date';}};const currentMessages=selectedUser?messagesByConversation[selectedUser._id]||[]:[];// Filter users based on search query\nconst filteredUsers=activeUsers.filter(chatUser=>chatUser.username.toLowerCase().includes(searchQuery.toLowerCase()));return/*#__PURE__*/_jsx(\"div\",{className:\"messenger-chat-page\",children:/*#__PURE__*/_jsxs(Row,{gutter:16,style:{height:'100%'},children:[\"        \",/*#__PURE__*/_jsx(Col,{xs:24,sm:8,md:6,lg:6,xl:5,children:/*#__PURE__*/_jsxs(Card,{title:/*#__PURE__*/_jsx(Input,{placeholder:\"Search users by name...\",value:searchQuery,onChange:e=>setSearchQuery(e.target.value),style:{width:'100%'},allowClear:true}),className:\"users-card\",bodyStyle:{padding:0},children:[\"            \",/*#__PURE__*/_jsx(List,{dataSource:filteredUsers,renderItem:chatUser=>/*#__PURE__*/_jsx(List.Item,{className:\"user-item \".concat((selectedUser===null||selectedUser===void 0?void 0:selectedUser._id)===chatUser._id?'selected':''),onClick:()=>setSelectedUser(chatUser),children:/*#__PURE__*/_jsx(List.Item.Meta,{avatar:/*#__PURE__*/_jsx(Badge,{dot:true,status:chatUser.isOnline?'success':'default',offset:[-2,32],children:/*#__PURE__*/_jsx(Avatar,{icon:/*#__PURE__*/_jsx(UserOutlined,{}),src:chatUser.avatar,size:\"large\"})}),title:/*#__PURE__*/_jsx(Text,{strong:true,children:chatUser.username}),description:typing[chatUser._id]?/*#__PURE__*/_jsx(Text,{type:\"success\",children:\"Typing...\"}):chatUser.isOnline?/*#__PURE__*/_jsx(Text,{type:\"success\",children:\"Online\"}):chatUser.lastSeen?/*#__PURE__*/_jsxs(Text,{type:\"secondary\",children:[\"Last seen at \",formatTime(chatUser.lastSeen)]}):null})})})]})}),/*#__PURE__*/_jsx(Col,{xs:24,sm:16,md:18,lg:18,xl:19,children:selectedUser?/*#__PURE__*/_jsxs(Card,{className:\"chat-card\",title:/*#__PURE__*/_jsxs(Space,{children:[/*#__PURE__*/_jsx(Badge,{dot:true,status:selectedUser.isOnline?'success':'default',offset:[-2,32],children:/*#__PURE__*/_jsx(Avatar,{icon:/*#__PURE__*/_jsx(UserOutlined,{}),src:selectedUser.avatar,size:\"large\"})}),/*#__PURE__*/_jsx(\"span\",{children:selectedUser.username}),typing[selectedUser._id]&&/*#__PURE__*/_jsx(Text,{type:\"secondary\",italic:true,children:\"typing...\"}),!socketConnected&&/*#__PURE__*/_jsx(Text,{type:\"warning\",style:{fontSize:'12px',marginLeft:'8px'},children:\"\\u26A0\\uFE0F Reconnecting...\"})]}),style:{height:'calc(100vh - 200px)'},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"messages-container\",children:[/*#__PURE__*/_jsx(List,{dataSource:currentMessages,renderItem:msg=>{const senderId=typeof msg.sender==='string'?msg.sender:msg.sender._id;const isOwnMessage=String(user===null||user===void 0?void 0:user._id)===String(senderId);const isOptimistic=msg._id.startsWith('temp_');const messageStatus=msg.status;return/*#__PURE__*/_jsx(List.Item,{className:\"message-item \".concat(isOwnMessage?'own-message':'other-message'),children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[/*#__PURE__*/_jsx(Tooltip,{title:formatFullDateTime(msg.timestamp),placement:isOwnMessage?'left':'right',children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-bubble\",style:{backgroundColor:isOwnMessage?'#1890ff':'#e4e6eb',color:isOwnMessage?'#ffffff':'#000000',opacity:isOptimistic?0.7:1,// Show optimistic messages as slightly transparent\ntransition:'opacity 0.2s ease'// Smooth transition when message is confirmed\n},children:[\"                              \",/*#__PURE__*/_jsx(Text,{style:{color:'inherit'},children:msg.content}),isOptimistic&&messageStatus==='sending'&&/*#__PURE__*/_jsx(Text,{style:{color:'inherit',fontSize:'10px',marginLeft:'8px',opacity:0.8},children:\"\\u23F3\"}),isOptimistic&&messageStatus==='failed'&&/*#__PURE__*/_jsx(Text,{style:{color:'inherit',fontSize:'10px',marginLeft:'8px',opacity:0.8,cursor:'pointer'},onClick:()=>{// Retry sending the message\nsocketService.sendMessage(selectedUser._id,msg.content);// Update status back to sending\nsetMessagesByConversation(prev=>{const conversationMessages=prev[selectedUser._id]||[];const messageIndex=conversationMessages.findIndex(m=>m._id===msg._id);if(messageIndex!==-1){const updatedMessages=[...conversationMessages];updatedMessages[messageIndex]=_objectSpread(_objectSpread({},updatedMessages[messageIndex]),{},{status:'sending'});return _objectSpread(_objectSpread({},prev),{},{[selectedUser._id]:updatedMessages});}return prev;});},title:\"Click to retry\",children:\"\\u274C Retry\"})]})}),/*#__PURE__*/_jsx(Text,{type:\"secondary\",className:\"message-time\",children:formatTime(new Date(msg.timestamp))})]})},msg._id);}}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsx(Divider,{style:{margin:0}}),/*#__PURE__*/_jsx(\"div\",{className:\"message-input-container\",children:/*#__PURE__*/_jsxs(Space.Compact,{style:{width:'100%'},children:[/*#__PURE__*/_jsx(TextArea,{value:message,onChange:handleTyping,onKeyPress:handleKeyPress,placeholder:\"Type a message...\",autoSize:{minRows:1,maxRows:4},style:{resize:'none'}}),/*#__PURE__*/_jsx(Button,{type:\"primary\",icon:/*#__PURE__*/_jsx(SendOutlined,{}),onClick:handleSendMessage,disabled:!message.trim(),children:\"Send\"})]})})]}):/*#__PURE__*/_jsx(Card,{className:\"no-chat-selected\",children:/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',padding:'60px 20px'},children:[/*#__PURE__*/_jsx(MessageOutlined,{style:{fontSize:'48px',color:'#d9d9d9'}}),/*#__PURE__*/_jsx(Title,{level:4,type:\"secondary\",children:\"Select a conversation to start chatting\"}),/*#__PURE__*/_jsx(Text,{type:\"secondary\",children:\"Choose from your existing conversations on the left or start a new one.\"})]})})})]})});};export default MessengerChatPage;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Card","Typography","Input","Button","List","Avatar","Space","Divider","Badge","Row","Col","Tooltip","SendOutlined","UserOutlined","MessageOutlined","useAuth","socketService","chatService","jsx","_jsx","jsxs","_jsxs","Title","Text","TextArea","MessengerChatPage","user","token","message","setMessage","messagesByConversation","setMessagesByConversation","activeUsers","setActiveUsers","selectedUser","setSelectedUser","typing","setTyping","typingTimeoutRef","messagesEndRef","socketConnected","setSocketConnected","searchQuery","setSearchQuery","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","loadMessages","userId","messages","getMessages","console","log","sortedMessages","sort","a","b","Date","timestamp","getTime","prev","newState","_objectSpread","markAsRead","catch","error","loadActiveUsers","users","getActiveUsers","filteredUsers","filter","u","_id","length","socket","connect","concat","on","reason","isConnected","disconnect","messageHandler","newMessage","senderId","sender","receiverId","receiver","String","conversationId","conversationMessages","optimisticIndex","findIndex","msg","startsWith","content","Math","abs","updatedMessages","exists","some","normalizedMessage","userOnlineHandler","map","isOnline","userOfflineHandler","typingHandler","_ref","isTyping","onMessage","onUserOnline","onUserOffline","onTyping","messageConfirmedHandler","confirmedMessage","messageExists","filteredMessages","toString","getSocket","_socketService$getSoc","off","_socketService$getSoc2","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener","handleSendMessage","trim","sendMessage","optimisticMessage","now","random","read","messageType","status","setTimeout","clearTimeout","sendTypingStatus","messageIndex","handleKeyPress","e","key","shiftKey","preventDefault","handleTyping","target","value","formatTime","date","messageDate","isNaN","diffMs","diffMinutes","floor","diffHours","diffDays","toLocaleDateString","formatFullDateTime","toLocaleString","weekday","year","month","day","hour","minute","second","currentMessages","chatUser","username","toLowerCase","includes","className","children","gutter","style","height","xs","sm","md","lg","xl","title","placeholder","onChange","width","allowClear","bodyStyle","padding","dataSource","renderItem","Item","onClick","Meta","avatar","dot","offset","icon","src","size","strong","description","type","lastSeen","italic","fontSize","marginLeft","isOwnMessage","isOptimistic","messageStatus","placement","backgroundColor","color","opacity","transition","cursor","m","ref","margin","Compact","onKeyPress","autoSize","minRows","maxRows","resize","disabled","textAlign","level"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/Components/Chat/MessengerChatPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Input, \r\n  Button, \r\n  List, \r\n  Avatar, \r\n  Space,\r\n  Divider,\r\n  Badge,\r\n  Row,\r\n  Col,\r\n  Tooltip\r\n} from 'antd';\r\nimport { \r\n  SendOutlined, \r\n  UserOutlined,\r\n  MessageOutlined \r\n} from '@ant-design/icons';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport socketService from '../../services/socketService';\r\nimport { chatService, Message, ChatUser } from '../../services/chatService';\r\nimport './MessengerChatPage.css';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst MessengerChatPage: React.FC = () => {\r\n  const { user, token } = useAuth();\r\n  const [message, setMessage] = useState('');\r\n  const [messagesByConversation, setMessagesByConversation] = useState<{ [key: string]: Message[] }>({});\r\n  const [activeUsers, setActiveUsers] = useState<ChatUser[]>([]);\r\n  const [selectedUser, setSelectedUser] = useState<ChatUser | null>(null);\r\n  const [typing, setTyping] = useState<{ [key: string]: boolean }>({});\r\n  const typingTimeoutRef = useRef<{ [key: string]: NodeJS.Timeout }>({});\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const loadMessages = useCallback(async (userId: string) => {\r\n    try {\r\n      const messages = await chatService.getMessages(userId);\r\n      console.log('API getMessages for', userId, 'returned', messages);\r\n      // Sort messages by timestamp\r\n      const sortedMessages = messages.sort((a, b) => \r\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n      );\r\n      setMessagesByConversation(prev => {\r\n        const newState = {\r\n          ...prev,\r\n          [userId]: sortedMessages\r\n        };\r\n        console.log('setMessagesByConversation after loadMessages:', newState);\r\n        return newState;\r\n      });\r\n      scrollToBottom();\r\n      // Mark messages as read\r\n      chatService.markAsRead(userId)\r\n        .catch(error => console.error('Error marking messages as read:', error));\r\n    } catch (error) {\r\n      console.error('Error loading messages:', error);\r\n    }\r\n  }, []);  const loadActiveUsers = useCallback(async () => {\r\n    try {\r\n      const users = await chatService.getActiveUsers();\r\n      // Filter out current user\r\n      const filteredUsers = users.filter(u => u._id !== user?._id);\r\n      setActiveUsers(filteredUsers);\r\n      \r\n      // Auto-select first user if no user is selected and there are users available\r\n      if (!selectedUser && filteredUsers.length > 0) {\r\n        setSelectedUser(filteredUsers[0]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading active users:', error);\r\n    }\r\n  }, [user?._id, selectedUser]);useEffect(() => {\r\n    if (token && !socketConnected) {\r\n      console.log('Connecting socket with token');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      \r\n      if (socket) {        socket.on('connect', () => {\r\n          console.log('Socket connected successfully');\r\n          setSocketConnected(true);\r\n          // Reload messages when reconnected\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n          loadActiveUsers();\r\n        });\r\n\r\n        socket.on('reconnect', () => {\r\n          console.log('Socket reconnected successfully');\r\n          setSocketConnected(true);\r\n          // Reload messages when reconnected\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n          loadActiveUsers();\r\n        });\r\n\r\n        socket.on('connect_error', (error: Error) => {\r\n          console.error('Socket connection error:', error);\r\n          setSocketConnected(false);\r\n        });\r\n\r\n        socket.on('disconnect', (reason) => {\r\n          console.log('Socket disconnected:', reason);\r\n          // Only set disconnected for permanent disconnections\r\n          if (reason === 'io server disconnect' || reason === 'io client disconnect') {\r\n            setSocketConnected(false);\r\n          }\r\n          // For temporary disconnections, keep the connected state and let reconnect handle it\r\n        });\r\n      }\r\n\r\n      loadActiveUsers();\r\n\r\n      return () => {\r\n        console.log('Cleaning up socket connection');\r\n        if (socketService.isConnected()) {\r\n          socketService.disconnect();\r\n        }\r\n        setSocketConnected(false);\r\n      };\r\n    }\r\n  }, [token, loadActiveUsers, selectedUser, loadMessages]);\r\n  useEffect(() => {\r\n    if (socketConnected) {\r\n      const messageHandler = (newMessage: Message) => {\r\n        console.log('messageHandler called:', newMessage, 'Current user:', user, 'Selected:', selectedUser);\r\n\r\n        // Extract IDs correctly regardless of the format\r\n        const senderId = typeof newMessage.sender === 'string' \r\n          ? newMessage.sender \r\n          : newMessage.sender._id;\r\n        \r\n        const receiverId = typeof newMessage.receiver === 'string'\r\n          ? newMessage.receiver \r\n          : newMessage.receiver._id;\r\n        \r\n        const userId = String(user?._id);\r\n\r\n        // Only update conversation if we're either the sender or receiver\r\n        if (senderId === userId || receiverId === userId) {\r\n          // Get the ID of the other person in the conversation\r\n          const conversationId = senderId === userId ? receiverId : senderId;          setMessagesByConversation(prev => {\r\n            const conversationMessages = prev[conversationId] || [];\r\n            \r\n            // Check if this is confirming an optimistic message\r\n            const optimisticIndex = conversationMessages.findIndex(msg => \r\n              msg._id.startsWith('temp_') && \r\n              msg.content === newMessage.content && \r\n              senderId === userId &&\r\n              Math.abs(new Date(msg.timestamp).getTime() - new Date(newMessage.timestamp).getTime()) < 5000 // Within 5 seconds\r\n            );\r\n\r\n            if (optimisticIndex !== -1) {\r\n              // Replace optimistic message with real message\r\n              const updatedMessages = [...conversationMessages];\r\n              updatedMessages[optimisticIndex] = {\r\n                ...newMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(newMessage._id)\r\n              };\r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages.sort((a, b) => \r\n                  new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n                )\r\n              };\r\n            }\r\n\r\n            // Check if message already exists by ID\r\n            const exists = conversationMessages.some(msg => \r\n              String(msg._id) === String(newMessage._id)\r\n            );\r\n            \r\n            if (!exists) {\r\n              // Normalize IDs to string for consistency\r\n              const normalizedMessage = {\r\n                ...newMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(newMessage._id)\r\n              };\r\n\r\n              // Sort messages by timestamp\r\n              const updatedMessages = [...conversationMessages, normalizedMessage]\r\n                .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages\r\n              };\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n\r\n        // Only scroll if the message belongs to the currently selected conversation\r\n        if (selectedUser && (\r\n          senderId === String(selectedUser._id) || \r\n          receiverId === String(selectedUser._id)\r\n        )) {\r\n          scrollToBottom();\r\n        }\r\n      };      const userOnlineHandler = (userId: string) => {\r\n        console.log('User came online:', userId);\r\n        setActiveUsers(prev => \r\n          prev.map(user => \r\n            user._id === userId ? { ...user, isOnline: true } : user\r\n          )\r\n        );\r\n      };\r\n\r\n      const userOfflineHandler = (userId: string) => {\r\n        console.log('User went offline:', userId);\r\n        setActiveUsers(prev => \r\n          prev.map(user => \r\n            user._id === userId ? { ...user, isOnline: false } : user\r\n          )\r\n        );\r\n      };\r\n\r\n      const typingHandler = ({ userId, isTyping }: { userId: string, isTyping: boolean }) => {\r\n        setTyping(prev => ({ ...prev, [userId]: isTyping }));\r\n      };      socketService.onMessage(messageHandler);\r\n      socketService.onUserOnline(userOnlineHandler);\r\n      socketService.onUserOffline(userOfflineHandler);\r\n      socketService.onTyping(typingHandler);\r\n\r\n      // Handle message confirmation for sender\r\n      const messageConfirmedHandler = (confirmedMessage: Message) => {\r\n        console.log('messageConfirmedHandler called:', confirmedMessage, 'Current user:', user, 'Selected:', selectedUser);\r\n        \r\n        // Extract IDs correctly\r\n        const senderId = typeof confirmedMessage.sender === 'string' \r\n          ? confirmedMessage.sender \r\n          : confirmedMessage.sender._id;\r\n        \r\n        const receiverId = typeof confirmedMessage.receiver === 'string'\r\n          ? confirmedMessage.receiver \r\n          : confirmedMessage.receiver._id;\r\n        \r\n        const userId = String(user?._id);\r\n        \r\n        // Only handle confirmation for messages sent by current user\r\n        if (senderId === userId) {\r\n          const conversationId = receiverId;\r\n          \r\n          setMessagesByConversation(prev => {\r\n            const conversationMessages = prev[conversationId] || [];\r\n            \r\n            // Find and replace temporary message or add new one if not exists\r\n            const messageExists = conversationMessages.some(msg => \r\n              String(msg._id) === String(confirmedMessage._id)\r\n            );\r\n            \r\n            if (!messageExists) {\r\n              // If message doesn't exist, add it\r\n              const normalizedMessage = {\r\n                ...confirmedMessage,\r\n                sender: senderId,\r\n                receiver: receiverId,\r\n                _id: String(confirmedMessage._id)\r\n              };\r\n              \r\n              // Remove any temporary messages with same content\r\n              const filteredMessages = conversationMessages.filter(msg => \r\n                !(msg.content === confirmedMessage.content && \r\n                  msg._id.toString().length > 10) // temp IDs are typically longer\r\n              );\r\n              \r\n              const updatedMessages = [...filteredMessages, normalizedMessage]\r\n                .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n              \r\n              return {\r\n                ...prev,\r\n                [conversationId]: updatedMessages\r\n              };\r\n            }\r\n            \r\n            return prev;\r\n          });\r\n          \r\n          // Scroll to bottom if this is the selected conversation\r\n          if (selectedUser && String(selectedUser._id) === conversationId) {\r\n            scrollToBottom();\r\n          }\r\n        }\r\n      };\r\n\r\n      // Listen for messageConfirmed event\r\n      if (socketService.getSocket()) {\r\n        socketService.getSocket()?.on('messageConfirmed', messageConfirmedHandler);\r\n      }\r\n\r\n      return () => {\r\n        socketService.off('newMessage');\r\n        socketService.off('messageConfirmed');\r\n        socketService.off('userOnline');\r\n        socketService.off('userOffline');\r\n        socketService.off('userTyping');\r\n        if (socketService.getSocket()) {\r\n          socketService.getSocket()?.off('messageConfirmed', messageConfirmedHandler);\r\n        }\r\n      };\r\n    }\r\n  }, [socketConnected, user, selectedUser]);\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      loadMessages(selectedUser._id);\r\n    }\r\n  }, [selectedUser, loadMessages]);\r\n\r\n  // Handle page visibility changes (tab switching)\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'visible') {\r\n        console.log('Page became visible, checking socket connection...');\r\n        \r\n        // Reconnect socket if needed\r\n        if (!socketService.isConnected() && token) {\r\n          console.log('Reconnecting socket after tab switch...');\r\n          const socket = socketService.connect(`Bearer ${token}`);\r\n          if (socket) {\r\n            socket.on('connect', () => {\r\n              console.log('Reconnected after tab switch');\r\n              setSocketConnected(true);\r\n              // Reload data when reconnected\r\n              loadActiveUsers();\r\n              if (selectedUser) {\r\n                loadMessages(selectedUser._id);\r\n              }\r\n            });\r\n          }\r\n        } else if (socketService.isConnected()) {\r\n          // Socket is connected, just refresh data\r\n          console.log('Socket still connected, refreshing data...');\r\n          loadActiveUsers();\r\n          if (selectedUser) {\r\n            loadMessages(selectedUser._id);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, [token, selectedUser, loadActiveUsers, loadMessages]);const handleSendMessage = async () => {\r\n    if (!message.trim() || !selectedUser || !user?._id) return;\r\n\r\n    // Check if socket is connected\r\n    if (!socketService.isConnected()) {\r\n      console.log('Socket not connected, attempting to reconnect...');\r\n      const socket = socketService.connect(`Bearer ${token}`);\r\n      if (socket) {\r\n        socket.on('connect', () => {\r\n          console.log('Reconnected, sending message...');\r\n          setSocketConnected(true);\r\n          // Send the message after reconnection\r\n          socketService.sendMessage(selectedUser._id, message.trim());\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    const content = message.trim();\r\n    setMessage('');\r\n\r\n    // Optimistic update - add message immediately to UI\r\n    const optimisticMessage: Message & { status?: string } = {\r\n      _id: `temp_${Date.now()}_${Math.random()}`, // Temporary ID\r\n      sender: user._id,\r\n      receiver: selectedUser._id,\r\n      content: content,\r\n      timestamp: new Date(),\r\n      read: false,\r\n      messageType: 'text',\r\n      status: 'sending' // Add status to track message state\r\n    };\r\n\r\n    // Add optimistic message to UI immediately\r\n    setMessagesByConversation(prev => {\r\n      const conversationMessages = prev[selectedUser._id] || [];\r\n      return {\r\n        ...prev,\r\n        [selectedUser._id]: [...conversationMessages, optimisticMessage]\r\n      };\r\n    });\r\n\r\n    // Scroll to bottom immediately\r\n    setTimeout(() => scrollToBottom(), 10);\r\n\r\n    try {\r\n      // Clear typing status\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n      socketService.sendTypingStatus(selectedUser._id, false);\r\n\r\n      // Send through socket\r\n      socketService.sendMessage(selectedUser._id, content);\r\n\r\n      // Set a timeout to mark message as failed if not confirmed within 10 seconds\r\n      setTimeout(() => {\r\n        setMessagesByConversation(prev => {\r\n          const conversationMessages = prev[selectedUser._id] || [];\r\n          const messageIndex = conversationMessages.findIndex(msg => \r\n            msg._id === optimisticMessage._id\r\n          );\r\n          \r\n          if (messageIndex !== -1 && conversationMessages[messageIndex]._id.startsWith('temp_')) {\r\n            // Message still has temp ID, mark as failed\r\n            const updatedMessages = [...conversationMessages];\r\n            updatedMessages[messageIndex] = {\r\n              ...updatedMessages[messageIndex],\r\n              status: 'failed'\r\n            } as Message & { status?: string };\r\n            \r\n            return {\r\n              ...prev,\r\n              [selectedUser._id]: updatedMessages\r\n            };\r\n          }\r\n          return prev;\r\n        });\r\n      }, 10000);\r\n        \r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      // Mark the optimistic message as failed\r\n      setMessagesByConversation(prev => {\r\n        const conversationMessages = prev[selectedUser._id] || [];\r\n        const messageIndex = conversationMessages.findIndex(msg => \r\n          msg._id === optimisticMessage._id\r\n        );\r\n        \r\n        if (messageIndex !== -1) {\r\n          const updatedMessages = [...conversationMessages];\r\n          updatedMessages[messageIndex] = {\r\n            ...updatedMessages[messageIndex],\r\n            status: 'failed'\r\n          } as Message & { status?: string };\r\n          \r\n          return {\r\n            ...prev,\r\n            [selectedUser._id]: updatedMessages\r\n          };\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleTyping = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessage(e.target.value);\r\n    \r\n    if (selectedUser) {\r\n      // Clear existing timeout\r\n      if (typingTimeoutRef.current[selectedUser._id]) {\r\n        clearTimeout(typingTimeoutRef.current[selectedUser._id]);\r\n      }\r\n\r\n      // Send typing status\r\n      socketService.sendTypingStatus(selectedUser._id, true);\r\n\r\n      // Set new timeout\r\n      typingTimeoutRef.current[selectedUser._id] = setTimeout(() => {\r\n        socketService.sendTypingStatus(selectedUser._id, false);\r\n      }, 2000);\r\n    }\r\n  };\r\n  const formatTime = (date: Date | string) => {\r\n    try {\r\n      const messageDate = new Date(date);\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(messageDate.getTime())) {\r\n        return 'Invalid date';\r\n      }\r\n\r\n      const now = new Date();\r\n      const diffMs = now.getTime() - messageDate.getTime();\r\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\r\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\r\n\r\n      if (diffMinutes < 1) {\r\n        return 'Vừa xong';\r\n      } else if (diffMinutes < 60) {\r\n        return `${diffMinutes} phút trước`;\r\n      } else if (diffHours < 24) {\r\n        return `${diffHours} giờ trước`;\r\n      } else if (diffDays < 7) {\r\n        return `${diffDays} ngày trước`;\r\n      } else {\r\n        return messageDate.toLocaleDateString('vi-VN');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error formatting time:', error);\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n\r\n  const formatFullDateTime = (date: Date | string) => {\r\n    try {\r\n      const messageDate = new Date(date);\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(messageDate.getTime())) {\r\n        return 'Invalid date';\r\n      }\r\n\r\n      return messageDate.toLocaleString('vi-VN', {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long', \r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n      });\r\n    } catch (error) {\r\n      console.error('Error formatting full date time:', error);\r\n      return 'Invalid date';\r\n    }  };\r\n  const currentMessages = selectedUser ? messagesByConversation[selectedUser._id] || [] : [];\r\n  // Filter users based on search query\r\n  const filteredUsers = activeUsers.filter(chatUser => \r\n    chatUser.username.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"messenger-chat-page\">\r\n      <Row gutter={16} style={{ height: '100%' }}>        <Col xs={24} sm={8} md={6} lg={6} xl={5}>\r\n          <Card \r\n            title={\r\n              <Input\r\n                placeholder=\"Search users by name...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                style={{ width: '100%' }}\r\n                allowClear\r\n              />\r\n            }\r\n            className=\"users-card\"\r\n            bodyStyle={{ padding: 0 }}\r\n          >            <List\r\n              dataSource={filteredUsers}\r\n              renderItem={(chatUser) => (\r\n                <List.Item\r\n                  className={`user-item ${selectedUser?._id === chatUser._id ? 'selected' : ''}`}\r\n                  onClick={() => setSelectedUser(chatUser)}\r\n                >\r\n                  <List.Item.Meta\r\n                    avatar={\r\n                      <Badge \r\n                        dot \r\n                        status={chatUser.isOnline ? 'success' : 'default'}\r\n                        offset={[-2, 32]}\r\n                      >\r\n                        <Avatar \r\n                          icon={<UserOutlined />} \r\n                          src={chatUser.avatar}\r\n                          size=\"large\"\r\n                        />\r\n                      </Badge>\r\n                    }\r\n                    title={<Text strong>{chatUser.username}</Text>}\r\n                    description={\r\n                      typing[chatUser._id] ? (\r\n                        <Text type=\"success\">Typing...</Text>\r\n                      ) : chatUser.isOnline ? (\r\n                        <Text type=\"success\">Online</Text>\r\n                      ) : chatUser.lastSeen ? (\r\n                        <Text type=\"secondary\">\r\n                          Last seen at {formatTime(chatUser.lastSeen)}\r\n                        </Text>\r\n                      ) : null\r\n                    }\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col xs={24} sm={16} md={18} lg={18} xl={19}>\r\n          {selectedUser ? (\r\n            <Card\r\n              className=\"chat-card\"              title={\r\n                <Space>\r\n                  <Badge \r\n                    dot \r\n                    status={selectedUser.isOnline ? 'success' : 'default'}\r\n                    offset={[-2, 32]}\r\n                  >\r\n                    <Avatar \r\n                      icon={<UserOutlined />} \r\n                      src={selectedUser.avatar}\r\n                      size=\"large\"\r\n                    />\r\n                  </Badge>\r\n                  <span>{selectedUser.username}</span>\r\n                  {typing[selectedUser._id] && (\r\n                    <Text type=\"secondary\" italic>typing...</Text>\r\n                  )}\r\n                  {!socketConnected && (\r\n                    <Text type=\"warning\" style={{ fontSize: '12px', marginLeft: '8px' }}>\r\n                      ⚠️ Reconnecting...\r\n                    </Text>\r\n                  )}\r\n                </Space>\r\n              }\r\n              style={{\r\n                height: 'calc(100vh - 200px)'\r\n              }}\r\n            >\r\n              <div className=\"messages-container\">\r\n                <List\r\n                  dataSource={currentMessages}                  renderItem={(msg) => {\r\n                    const senderId = typeof msg.sender === 'string' ? msg.sender : msg.sender._id;\r\n                    const isOwnMessage = String(user?._id) === String(senderId);\r\n                    const isOptimistic = msg._id.startsWith('temp_');\r\n                    const messageStatus = (msg as any).status;\r\n                    \r\n                    return (                      <List.Item\r\n                        key={msg._id}\r\n                        className={`message-item ${isOwnMessage ? 'own-message' : 'other-message'}`}\r\n                      >\r\n                        <div className=\"message-content\">\r\n                          <Tooltip \r\n                            title={formatFullDateTime(msg.timestamp)}\r\n                            placement={isOwnMessage ? 'left' : 'right'}\r\n                          >\r\n                            <div \r\n                              className=\"message-bubble\"\r\n                              style={{\r\n                                backgroundColor: isOwnMessage ? '#1890ff' : '#e4e6eb',\r\n                                color: isOwnMessage ? '#ffffff' : '#000000',\r\n                                opacity: isOptimistic ? 0.7 : 1, // Show optimistic messages as slightly transparent\r\n                                transition: 'opacity 0.2s ease' // Smooth transition when message is confirmed\r\n                              }}\r\n                            >                              <Text style={{ color: 'inherit' }}>{msg.content}</Text>\r\n                              {isOptimistic && messageStatus === 'sending' && (\r\n                                <Text style={{ \r\n                                  color: 'inherit', \r\n                                  fontSize: '10px', \r\n                                  marginLeft: '8px',\r\n                                  opacity: 0.8 \r\n                                }}>\r\n                                  ⏳\r\n                                </Text>\r\n                              )}\r\n                              {isOptimistic && messageStatus === 'failed' && (\r\n                                <Text \r\n                                  style={{ \r\n                                    color: 'inherit', \r\n                                    fontSize: '10px', \r\n                                    marginLeft: '8px',\r\n                                    opacity: 0.8,\r\n                                    cursor: 'pointer'\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    // Retry sending the message\r\n                                    socketService.sendMessage(selectedUser._id, msg.content);\r\n                                    // Update status back to sending\r\n                                    setMessagesByConversation(prev => {\r\n                                      const conversationMessages = prev[selectedUser._id] || [];\r\n                                      const messageIndex = conversationMessages.findIndex(m => m._id === msg._id);\r\n                                      if (messageIndex !== -1) {\r\n                                        const updatedMessages = [...conversationMessages];\r\n                                        updatedMessages[messageIndex] = {\r\n                                          ...updatedMessages[messageIndex],\r\n                                          status: 'sending'\r\n                                        } as Message & { status?: string };\r\n                                        return {\r\n                                          ...prev,\r\n                                          [selectedUser._id]: updatedMessages\r\n                                        };\r\n                                      }\r\n                                      return prev;\r\n                                    });\r\n                                  }}\r\n                                  title=\"Click to retry\"\r\n                                >\r\n                                  ❌ Retry\r\n                                </Text>\r\n                              )}\r\n                            </div>\r\n                          </Tooltip>\r\n                          <Text type=\"secondary\" className=\"message-time\">\r\n                            {formatTime(new Date(msg.timestamp))}\r\n                          </Text>\r\n                        </div>\r\n                      </List.Item>\r\n                    );\r\n                  }}\r\n                />\r\n                <div ref={messagesEndRef} />\r\n              </div>\r\n\r\n              <Divider style={{ margin: 0 }} />\r\n\r\n              <div className=\"message-input-container\">\r\n                <Space.Compact style={{ width: '100%' }}>\r\n                  <TextArea\r\n                    value={message}\r\n                    onChange={handleTyping}\r\n                    onKeyPress={handleKeyPress}\r\n                    placeholder=\"Type a message...\"\r\n                    autoSize={{ minRows: 1, maxRows: 4 }}\r\n                    style={{ resize: 'none' }}\r\n                  />\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<SendOutlined />}\r\n                    onClick={handleSendMessage}\r\n                    disabled={!message.trim()}\r\n                  >\r\n                    Send\r\n                  </Button>\r\n                </Space.Compact>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <Card className=\"no-chat-selected\">\r\n              <div style={{ textAlign: 'center', padding: '60px 20px' }}>\r\n                <MessageOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />\r\n                <Title level={4} type=\"secondary\">Select a conversation to start chatting</Title>\r\n                <Text type=\"secondary\">\r\n                  Choose from your existing conversations on the left or start a new one.\r\n                </Text>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessengerChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}