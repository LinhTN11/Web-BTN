{"ast":null,"code":"import api from './api';\n// Add message caching\nconst messageCache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\nexport const chatService = {\n  getMessages: async userId => {\n    // Check cache first\n    const cacheKey = `messages_${userId}`;\n    const cachedData = messageCache.get(cacheKey);\n    if (cachedData && Date.now() - cachedData.timestamp < CACHE_DURATION) {\n      return cachedData.messages;\n    }\n    const response = await api.get(`/v1/chat/conversation/${userId}`);\n\n    // Update cache\n    messageCache.set(cacheKey, {\n      messages: response.data.messages,\n      timestamp: Date.now()\n    });\n    return response.data.messages;\n  },\n  sendMessage: async (receiverId, content, messageType = 'text') => {\n    const response = await api.post('/v1/chat/send', {\n      receiverId,\n      content,\n      messageType\n    });\n    return response.data;\n  },\n  markAsRead: async senderId => {\n    await api.post('/v1/chat/read', {\n      senderId\n    });\n  },\n  getActiveUsers: async () => {\n    const response = await api.get('/v1/chat/users');\n    return response.data;\n  },\n  getConversations: async () => {\n    const response = await api.get('/v1/chat/conversations');\n    return response.data;\n  },\n  getUnreadCount: async () => {\n    const response = await api.get('/v1/chat/unread-count');\n    return response.data.unreadCount;\n  }\n};\nexport default chatService;","map":{"version":3,"names":["api","messageCache","Map","CACHE_DURATION","chatService","getMessages","userId","cacheKey","cachedData","get","Date","now","timestamp","messages","response","set","data","sendMessage","receiverId","content","messageType","post","markAsRead","senderId","getActiveUsers","getConversations","getUnreadCount","unreadCount"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/chatService.ts"],"sourcesContent":["import api from './api';\r\n\r\nexport interface MessageUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface Message {\r\n  _id: string;\r\n  content: string;\r\n  sender: string | MessageUser;\r\n  receiver: string | MessageUser;\r\n  messageType: 'text' | 'image' | 'file';\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\nexport interface ChatUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n  isOnline: boolean;\r\n  lastSeen?: Date;\r\n}\r\n\r\n// Add message caching\r\nconst messageCache = new Map<string, Message[]>();\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\nexport const chatService = {\r\n  getMessages: async (userId: string): Promise<Message[]> => {\r\n    // Check cache first\r\n    const cacheKey = `messages_${userId}`;\r\n    const cachedData = messageCache.get(cacheKey);\r\n    \r\n    if (cachedData && Date.now() - cachedData.timestamp < CACHE_DURATION) {\r\n      return cachedData.messages;\r\n    }\r\n\r\n    const response = await api.get(`/v1/chat/conversation/${userId}`);\r\n    \r\n    // Update cache\r\n    messageCache.set(cacheKey, {\r\n      messages: response.data.messages,\r\n      timestamp: Date.now()\r\n    });\r\n\r\n    return response.data.messages;\r\n  },\r\n\r\n  sendMessage: async (receiverId: string, content: string, messageType: string = 'text'): Promise<Message> => {\r\n    const response = await api.post('/v1/chat/send', {\r\n      receiverId,\r\n      content,\r\n      messageType\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  markAsRead: async (senderId: string): Promise<void> => {\r\n    await api.post('/v1/chat/read', { senderId });\r\n  },\r\n  getActiveUsers: async (): Promise<ChatUser[]> => {\r\n    const response = await api.get('/v1/chat/users');\r\n    return response.data;\r\n  },\r\n\r\n  getConversations: async (): Promise<{\r\n    user: ChatUser;\r\n    lastMessage: Message | null;\r\n    unreadCount: number;\r\n  }[]> => {\r\n    const response = await api.get('/v1/chat/conversations');\r\n    return response.data;\r\n  },\r\n\r\n  getUnreadCount: async (): Promise<number> => {\r\n    const response = await api.get('/v1/chat/unread-count');\r\n    return response.data.unreadCount;\r\n  }\r\n};\r\n\r\nexport default chatService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AA0BvB;AACA,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAoB,CAAC;AACjD,MAAMC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEtC,OAAO,MAAMC,WAAW,GAAG;EACzBC,WAAW,EAAE,MAAOC,MAAc,IAAyB;IACzD;IACA,MAAMC,QAAQ,GAAG,YAAYD,MAAM,EAAE;IACrC,MAAME,UAAU,GAAGP,YAAY,CAACQ,GAAG,CAACF,QAAQ,CAAC;IAE7C,IAAIC,UAAU,IAAIE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,UAAU,CAACI,SAAS,GAAGT,cAAc,EAAE;MACpE,OAAOK,UAAU,CAACK,QAAQ;IAC5B;IAEA,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACS,GAAG,CAAC,yBAAyBH,MAAM,EAAE,CAAC;;IAEjE;IACAL,YAAY,CAACc,GAAG,CAACR,QAAQ,EAAE;MACzBM,QAAQ,EAAEC,QAAQ,CAACE,IAAI,CAACH,QAAQ;MAChCD,SAAS,EAAEF,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC,CAAC;IAEF,OAAOG,QAAQ,CAACE,IAAI,CAACH,QAAQ;EAC/B,CAAC;EAEDI,WAAW,EAAE,MAAAA,CAAOC,UAAkB,EAAEC,OAAe,EAAEC,WAAmB,GAAG,MAAM,KAAuB;IAC1G,MAAMN,QAAQ,GAAG,MAAMd,GAAG,CAACqB,IAAI,CAAC,eAAe,EAAE;MAC/CH,UAAU;MACVC,OAAO;MACPC;IACF,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDM,UAAU,EAAE,MAAOC,QAAgB,IAAoB;IACrD,MAAMvB,GAAG,CAACqB,IAAI,CAAC,eAAe,EAAE;MAAEE;IAAS,CAAC,CAAC;EAC/C,CAAC;EACDC,cAAc,EAAE,MAAAA,CAAA,KAAiC;IAC/C,MAAMV,QAAQ,GAAG,MAAMd,GAAG,CAACS,GAAG,CAAC,gBAAgB,CAAC;IAChD,OAAOK,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDS,gBAAgB,EAAE,MAAAA,CAAA,KAIV;IACN,MAAMX,QAAQ,GAAG,MAAMd,GAAG,CAACS,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOK,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDU,cAAc,EAAE,MAAAA,CAAA,KAA6B;IAC3C,MAAMZ,QAAQ,GAAG,MAAMd,GAAG,CAACS,GAAG,CAAC,uBAAuB,CAAC;IACvD,OAAOK,QAAQ,CAACE,IAAI,CAACW,WAAW;EAClC;AACF,CAAC;AAED,eAAevB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}