{"ast":null,"code":"import api from './api';\nexport const chatService = {\n  getMessages: async userId => {\n    const response = await api.get(`/v1/chat/conversation/${userId}`);\n    return response.data.data ? response.data.data.messages : response.data.messages || response.data;\n  },\n  sendMessage: async (receiverId, content, messageType = 'text') => {\n    const response = await api.post('/v1/chat/send', {\n      receiverId,\n      content,\n      messageType\n    });\n    return response.data.data || response.data;\n  },\n  markAsRead: async senderId => {\n    await api.post('/v1/chat/read', {\n      senderId\n    });\n  },\n  getActiveUsers: async () => {\n    const response = await api.get('/v1/chat/users');\n    return response.data.data ? response.data.data.users : response.data;\n  },\n  getConversations: async () => {\n    const response = await api.get('/v1/chat/conversations');\n    return response.data.data || response.data;\n  },\n  getUnreadCount: async () => {\n    const response = await api.get('/v1/chat/unread-count');\n    return response.data.data ? response.data.data.unreadCount : response.data.unreadCount;\n  }\n};\nexport default chatService;","map":{"version":3,"names":["api","chatService","getMessages","userId","response","get","data","messages","sendMessage","receiverId","content","messageType","post","markAsRead","senderId","getActiveUsers","users","getConversations","getUnreadCount","unreadCount"],"sources":["C:/Users/trann/Desktop/jwt-bt/frontend/src/services/chatService.ts"],"sourcesContent":["import api from './api';\r\n\r\nexport interface MessageUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface Message {\r\n  _id: string;\r\n  content: string;\r\n  sender: string | MessageUser;\r\n  receiver: string | MessageUser;\r\n  messageType: 'text' | 'image' | 'file';\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\nexport interface ChatUser {\r\n  _id: string;\r\n  username: string;\r\n  avatar?: string;\r\n  isOnline: boolean;\r\n  lastSeen?: Date;\r\n}\r\n\r\nexport const chatService = {  getMessages: async (userId: string): Promise<Message[]> => {\r\n    const response = await api.get(`/v1/chat/conversation/${userId}`);\r\n    return response.data.data ? response.data.data.messages : response.data.messages || response.data;\r\n  },\r\n  sendMessage: async (receiverId: string, content: string, messageType: string = 'text'): Promise<Message> => {\r\n    const response = await api.post('/v1/chat/send', {\r\n      receiverId,\r\n      content,\r\n      messageType\r\n    });\r\n    return response.data.data || response.data;\r\n  },\r\n\r\n  markAsRead: async (senderId: string): Promise<void> => {\r\n    await api.post('/v1/chat/read', { senderId });\r\n  },  getActiveUsers: async (): Promise<ChatUser[]> => {\r\n    const response = await api.get('/v1/chat/users');\r\n    return response.data.data ? response.data.data.users : response.data;\r\n  },\r\n  getConversations: async (): Promise<{\r\n    user: ChatUser;\r\n    lastMessage: Message | null;\r\n    unreadCount: number;\r\n  }[]> => {\r\n    const response = await api.get('/v1/chat/conversations');\r\n    return response.data.data || response.data;\r\n  },\r\n  getUnreadCount: async (): Promise<number> => {\r\n    const response = await api.get('/v1/chat/unread-count');\r\n    return response.data.data ? response.data.data.unreadCount : response.data.unreadCount;\r\n  }\r\n};\r\n\r\nexport default chatService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AA0BvB,OAAO,MAAMC,WAAW,GAAG;EAAGC,WAAW,EAAE,MAAOC,MAAc,IAAyB;IACrF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,yBAAyBF,MAAM,EAAE,CAAC;IACjE,OAAOC,QAAQ,CAACE,IAAI,CAACA,IAAI,GAAGF,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACC,QAAQ,GAAGH,QAAQ,CAACE,IAAI,CAACC,QAAQ,IAAIH,QAAQ,CAACE,IAAI;EACnG,CAAC;EACDE,WAAW,EAAE,MAAAA,CAAOC,UAAkB,EAAEC,OAAe,EAAEC,WAAmB,GAAG,MAAM,KAAuB;IAC1G,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACY,IAAI,CAAC,eAAe,EAAE;MAC/CH,UAAU;MACVC,OAAO;MACPC;IACF,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI,CAACA,IAAI,IAAIF,QAAQ,CAACE,IAAI;EAC5C,CAAC;EAEDO,UAAU,EAAE,MAAOC,QAAgB,IAAoB;IACrD,MAAMd,GAAG,CAACY,IAAI,CAAC,eAAe,EAAE;MAAEE;IAAS,CAAC,CAAC;EAC/C,CAAC;EAAGC,cAAc,EAAE,MAAAA,CAAA,KAAiC;IACnD,MAAMX,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,gBAAgB,CAAC;IAChD,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI,GAAGF,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACU,KAAK,GAAGZ,QAAQ,CAACE,IAAI;EACtE,CAAC;EACDW,gBAAgB,EAAE,MAAAA,CAAA,KAIV;IACN,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI,IAAIF,QAAQ,CAACE,IAAI;EAC5C,CAAC;EACDY,cAAc,EAAE,MAAAA,CAAA,KAA6B;IAC3C,MAAMd,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,uBAAuB,CAAC;IACvD,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI,GAAGF,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACa,WAAW,GAAGf,QAAQ,CAACE,IAAI,CAACa,WAAW;EACxF;AACF,CAAC;AAED,eAAelB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}